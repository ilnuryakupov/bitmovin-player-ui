{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/ts/arrayutils.ts","src/ts/audiotrackutils.ts","src/ts/browserutils.ts","src/ts/components/adclickoverlay.ts","src/ts/components/admessagelabel.ts","src/ts/components/adskipbutton.ts","src/ts/components/airplaytogglebutton.ts","src/ts/components/audioqualityselectbox.ts","src/ts/components/audiotracklistbox.ts","src/ts/components/audiotrackselectbox.ts","src/ts/components/bufferingoverlay.ts","src/ts/components/button.ts","src/ts/components/caststatusoverlay.ts","src/ts/components/casttogglebutton.ts","src/ts/components/castuicontainer.ts","src/ts/components/clickoverlay.ts","src/ts/components/closebutton.ts","src/ts/components/component.ts","src/ts/components/container.ts","src/ts/components/controlbar.ts","src/ts/components/errormessageoverlay.ts","src/ts/components/fullscreentogglebutton.ts","src/ts/components/hugeplaybacktogglebutton.ts","src/ts/components/hugereplaybutton.ts","src/ts/components/itemselectionlist.ts","src/ts/components/label.ts","src/ts/components/listbox.ts","src/ts/components/listselector.ts","src/ts/components/metadatalabel.ts","src/ts/components/pictureinpicturetogglebutton.ts","src/ts/components/playbackspeedselectbox.ts","src/ts/components/playbacktimelabel.ts","src/ts/components/playbacktogglebutton.ts","src/ts/components/playbacktoggleoverlay.ts","src/ts/components/recommendationoverlay.ts","src/ts/components/seekbar.ts","src/ts/components/seekbarlabel.ts","src/ts/components/selectbox.ts","src/ts/components/settingspanel.ts","src/ts/components/settingspanelitem.ts","src/ts/components/settingspanelpage.ts","src/ts/components/settingspanelpagebackbutton.ts","src/ts/components/settingspanelpagenavigatorbutton.ts","src/ts/components/settingspanelpageopenbutton.ts","src/ts/components/settingstogglebutton.ts","src/ts/components/spacer.ts","src/ts/components/subtitlelistbox.ts","src/ts/components/subtitleoverlay.ts","src/ts/components/subtitleselectbox.ts","src/ts/components/subtitlesettings/backgroundcolorselectbox.ts","src/ts/components/subtitlesettings/backgroundopacityselectbox.ts","src/ts/components/subtitlesettings/characteredgeselectbox.ts","src/ts/components/subtitlesettings/fontcolorselectbox.ts","src/ts/components/subtitlesettings/fontfamilyselectbox.ts","src/ts/components/subtitlesettings/fontopacityselectbox.ts","src/ts/components/subtitlesettings/fontsizeselectbox.ts","src/ts/components/subtitlesettings/subtitlesettingselectbox.ts","src/ts/components/subtitlesettings/subtitlesettingslabel.ts","src/ts/components/subtitlesettings/subtitlesettingsmanager.ts","src/ts/components/subtitlesettings/subtitlesettingspanelpage.ts","src/ts/components/subtitlesettings/subtitlesettingsresetbutton.ts","src/ts/components/subtitlesettings/windowcolorselectbox.ts","src/ts/components/subtitlesettings/windowopacityselectbox.ts","src/ts/components/titlebar.ts","src/ts/components/togglebutton.ts","src/ts/components/tvnoisecanvas.ts","src/ts/components/uicontainer.ts","src/ts/components/videoqualityselectbox.ts","src/ts/components/volumecontrolbutton.ts","src/ts/components/volumeslider.ts","src/ts/components/volumetogglebutton.ts","src/ts/components/vrtogglebutton.ts","src/ts/components/watermark.ts","src/ts/demofactory.ts","src/ts/dom.ts","src/ts/errorutils.ts","src/ts/eventdispatcher.ts","src/ts/guid.ts","src/ts/imageloader.ts","src/ts/localization/i18n.ts","src/ts/localization/languages/de.json","src/ts/localization/languages/en.json","src/ts/main.ts","src/ts/playerutils.ts","src/ts/storageutils.ts","src/ts/stringutils.ts","src/ts/subtitleutils.ts","src/ts/timeout.ts","src/ts/uifactory.ts","src/ts/uimanager.ts","src/ts/uiutils.ts","src/ts/volumecontroller.ts"],"names":["f","exports","module","define","amd","g","window","global","self","this","bitmovin","playerui","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","ArrayUtils","remove","array","item","index","indexOf","splice","i18n_1","AudioTrackSwitchHandler","player","element","uimanager","_this","addAudioTrack","event","audioTrack","track","listElement","hasItem","id","addItem","i18n","getLocalizer","label","removeAudioTrack","removeItem","selectCurrentAudioTrack","currentAudioTrack","getAudio","selectItem","refreshAudioTracks","audioTracks","getAvailableAudio","audioTrackToListItem","key","synchronizeItems","map","bindSelectionEvent","bindPlayerEvents","prototype","onItemSelected","subscribe","_","value","setAudio","on","PlayerEvent","AudioChanged","SourceUnloaded","PeriodSwitched","AudioAdded","AudioRemoved","getConfig","events","onUpdated","BrowserUtils","Object","defineProperty","windowExists","navigator","userAgent","test","clickoverlay_1","AdClickOverlay","_super","__extends","configure","clickThroughCallback","AdStarted","ad","setUrl","clickThroughUrl","clickThroughUrlOpened","adFinishedHandler","AdFinished","AdSkipped","AdError","onClick","pause","ClickOverlay","label_1","stringutils_1","AdMessageLabel","config","mergeConfig","cssClass","text","updateMessageHandler","setText","StringUtils","replaceAdMessagePlaceholders","performLocalization","adStartHandler","uiConfig","message","TimeChanged","adEndHandler","off","Label","button_1","AdSkipButton","untilSkippableMessage","skippableMessage","skipOffset","updateSkipMessageHandler","show","getCurrentTime","disable","enable","skippableAfter","hide","ads","skip","Button","togglebutton_1","AirPlayToggleButton","isAirplayAvailable","showAirplayTargetPicker","console","log","airPlayAvailableHandler","airPlayChangedHandler","isAirplayActive","AirplayAvailable","AirplayChanged","ToggleButton","selectbox_1","AudioQualitySelectBox","cssClasses","selectCurrentAudioQuality","getAudioQuality","updateAudioQualities","audioQualities","getAvailableAudioQualities","clearItems","_i","audioQualities_1","audioQuality","sender","setAudioQuality","AudioQualityChanged","AudioQualityAdded","AudioQualityRemoved","SelectBox","listbox_1","audiotrackutils_1","AudioTrackListBox","ListBox","AudioTrackSelectBox","container_1","component_1","timeout_1","BufferingOverlay","indicators","Component","tag","hidden","components","showDelayMs","overlayShowTimeout","Timeout","showOverlay","start","hideOverlay","clear","StallStarted","StallEnded","Play","Playing","Paused","Seek","Seeked","TimeShift","TimeShifted","isStalled","Container","dom_1","eventdispatcher_1","buttonEvents","EventDispatcher","toDomElement","buttonElement","DOM","type","class","getCssClasses","append","prefixCss","html","onClickEvent","getDomElement","find","dispatch","getEvent","CastStatusOverlay","statusLabel","CastWaitingForDevice","castDeviceName","castPayload","deviceName","CastStarted","CastStopped","CastToggleButton","isCastAvailable","isCasting","castStop","castVideo","castAvailableHander","CastAvailable","uicontainer_1","CastUIContainer","isUiShown","hideUi","onControlsHide","castUiHideTimeout","hideDelay","showUi","onControlsShow","showUiPermanently","showUiWithTimeout","showUiAfterSeek","isPlaying","release","UIContainer","initialize","url","data","open","getUrl","undefined","CloseButton","target","guid_1","componentEvents","onShow","onHide","onHoverChanged","onEnabled","onDisabled","Guid","next","cssPrefix","disabled","isHidden","isDisabled","onComponentShow","onComponentHide","onHoverChangedEvent","defaults","base","assign","flattenedArray","concat","css","join","trim","cssClassOrId","addClass","CLASS_HIDDEN","onHideEvent","removeClass","onShowEvent","isShown","toggleHidden","CLASS_DISABLED","onDisabledEvent","onEnabledEvent","isEnabled","isHovered","hovered","arrayutils_1","componentsToAdd","componentsToRemove","addComponent","component","push","removeComponent","getComponents","removeComponents","_a","slice","updateComponents","shift","innerContainerElement","containerElement","innerContainer","initialComponent","ControlBar","tvnoisecanvas_1","errorutils_1","ErrorMessageOverlay","errorLabel","tvNoiseBackground","TvNoiseCanvas","ErrorUtils","defaultErrorMessageTranslator","errorMessages","messages","customMessage","SourceLoaded","stop","FullscreenToggleButton","fullscreenStateHandler","getViewMode","ViewMode","Fullscreen","ViewModeChanged","setViewMode","Inline","playbacktogglebutton_1","HugePlaybackToggleButton","togglePlayback","isPlayInitiated","play","toggleFullscreen","firstPlay","clickTime","doubleClickTime","now","Date","setTimeout","Warning","WarningCode","PLAYBACK_COULD_NOT_BE_STARTED","suppressPlayButtonTransitionAnimation","setTransitionAnimationsEnabled","onToggle","subscribeOnce","isAutoplayEnabled","playback","Boolean","autoplay","isAutoplayUpcoming","getSource","enabled","noTransitionAnimationsClass","hasClass","PlaybackToggleButton","HugeReplayButton","listselector_1","ItemSelectionList","isActive","items","updateDomItems","selectedValue","empty","selectedListItem","listItem","CLASS_SELECTED","deselectItem","this_1","String","onItemSelectedEvent","onItemAddedEvent","selectedItem","onItemRemovedEvent","ListSelector","labelEvents","onTextChanged","labelElement","localizedText","onTextChangedEvent","getText","clearText","isEmpty","removeListBoxDomItem","getComponentForKey","addListBoxDomItem","newItem","getItemForKey","listBoxItemButton_1","buildListBoxItemButton","handleSelectionChange","listBoxElement","refreshSelectedItem","onItemAdded","onItemRemoved","createListBoxDomItems","ListBoxItemButton","c","onClass","offClass","listSelectorEvents","getItemIndex","parseInt","getItems","filter","translator","getSelectedItem","newItems","forEach","items_1","itemCount","keys","MetadataLabelContent","MetadataLabel","content","toLowerCase","uiconfig","init","Title","metadata","title","Description","description","unload","PictureInPictureToggleButton","isViewModeAvailable","PictureInPicture","pipAvailableHander","PlaybackSpeedSelectBox","defaultPlaybackSpeeds","addDefaultItems","setPlaybackSpeed","parseFloat","setDefaultValue","playbackSpeed","getPlaybackSpeed","setSpeed","PlaybackSpeedChanged","speed","customItems","sort","PlaybackTimeLabelMode","playerutils_1","PlaybackTimeLabel","timeLabelMode","CurrentAndTotalTime","hideInLivePlayback","live","liveCssClass","liveEdgeCssClass","minWidth","liveClickHandler","timeShift","updateLiveState","isLive","updateLiveTimeshiftState","unsubscribe","isTimeshifted","getTimeShift","isTimeshiftAvailable","getMaxTimeShift","isPaused","liveStreamDetector","PlayerUtils","LiveStreamDetector","onLiveChanged","args","detect","playbackTimeHandler","getDuration","Infinity","setTime","getCurrentTimeRelativeToSeekableRange","width","min-width","timeFormat","Math","abs","FORMAT_HHMMSS","FORMAT_MMSS","playbackSeconds","durationSeconds","currentTime","secondsToTime","totalTime","CurrentTime","TotalTime","RemainingTime","remainingTime","setTimeFormat","handleClickEvent","isSeeking","playbackStateHandler","PlaybackFinished","isTimeShiftAvailable","CLASS_STOPTOGGLE","timeShiftDetector","TimeShiftAvailabilityDetector","onTimeShiftAvailabilityChanged","onSeek","onSeeked","hugeplaybacktogglebutton_1","PlaybackToggleOverlay","playbackToggleButton","hugereplaybutton_1","RecommendationOverlay","replayButton","clearRecommendations","RecommendationItem","setupRecommendations","recommendations","recommendations_1","itemConfig","itemElement","href","background-image","thumbnail","bgElement","titleElement","timeElement","duration","SeekBar","playbackPositionPercentage","touchSupported","seekBarEvents","onSeekPreview","seekWhileScrubbing","scrubbing","seek","position","percentage","maxTimeShift","seekableRangeStart","getSeekableRangeStart","relativeSeekTarget","absoluteSeekTarget","vertical","smoothPlaybackPositionUpdateIntervalMs","timelineMarkers","hasLabel","getLabel","configureSeek","setPosition","seekBarBackdrop","isUserSeeking","isPlayerSeeking","playbackPositionHandler","forceUpdate","setPlaybackPosition","setBufferPosition","getRelativeCurrentTime","videoBufferLength","getVideoBufferLength","audioBufferLength","getAudioBufferLength","bufferLength","min","Number","MAX_VALUE","bufferPercentage","SMOOTH_PLAYBACK_POSITION_UPDATE_DISABLED","Ready","SegmentRequestFinished","configureLivePausedTimeshiftUpdater","onPlayerSeek","setSeeking","onPlayerSeeked","restorePlayingState","subscribeRateLimited","hasTimeShift","switchVisibility","refreshPlaybackPosition","smoothPlaybackPositionUpdater","timeShiftAvailable","PlayerResized","onConfigured","setSeekPosition","configureSmoothPlaybackPositionUpdater","configureMarkers","pausedTimeshiftUpdater","currentTimeSeekBar","currentTimePlayer","updateIntervalMs","error","PlayerAPINotAvailableError","currentTimeDelta","startSmoothPlaybackPositionUpdater","stopSmoothPlaybackPositionUpdater","clearMarkers","updateMarkers","setupMarkers","markers","marker","markerPosition","time","markerDuration","onRelease","seekBarContainer","seekBar","seekBarBufferLevel","seekBarBufferPosition","seekBarPlaybackPosition","seekBarPlaybackPositionMarker","seekBarSeekPosition","seekBarChapterMarkersContainer","seekBarMarkersContainer","seeking","mouseTouchMoveHandler","preventDefault","stopPropagation","targetPercentage","getOffset","onSeekPreviewEvent","mouseTouchUpHandler","document","snappedChapter","getMarkerAtPosition","onSeekedEvent","isTouchEvent","TouchEvent","onSeekEvent","seekBarWidthPx","markerClasses","cssProperties","markerWidthPx","round","data-marker-time","data-marker-title","getHorizontalOffset","eventPageX","elementOffsetPx","offset","left","widthPx","offsetPx","sanitizeOffset","getVerticalOffset","eventPageY","top","height","changedTouches","pageY","touches","pageX","MouseEvent","warn","percent","totalSize","px","style","transform","-ms-transform","-webkit-transform","scale","CLASS_SEEKING","snappedMarker","seekPositionPercentage","imageloader_1","SeekBarLabel","appliedMarkerCssClasses","handleSeekPreview","timeShiftPreview","wallClockTime","targetTimeShift","currentTimeShift","setThumbnail","getThumbnail","setTitleText","timeLabel","titleLabel","thumbnailImageLoader","ImageLoader","uiManager","seconds","thumbnailElement","display","load","x","thumbnailCssSprite","thumbnailCssSingleImage","thumbnailCountX","thumbnailCountY","thumbnailIndexX","thumbnailIndexY","y","sizeX","sizeY","offsetX","offsetY","aspectRatio","padding-bottom","background-size","background-position","selectElement","val","optionElement","attr","NavigationDirection","settingspanelpage_1","SettingsPanel","navigationStack","settingsPanelEvents","onSettingsStateChanged","pageTransitionAnimation","activePage","getRootPage","hideHoveredSelectBoxes","hideTimeout","resetNavigation","onActiveEvent","reset","onInactiveEvent","onSettingsStateChangedEvent","updateActivePageClass","getActivePage","setActivePageIndex","setActivePage","getPages","targetPage","navigateToPage","Forwards","popToRootSettingsPanelPage","popSettingsPanelPage","Backwards","rootPageHasActiveSettings","hasActiveSettings","SettingsPanelPage","page","CLASS_ACTIVE_PAGE","resetNavigationOnShow","sourcePage","rootPage","animateNavigation","direction","skipAnimation","pop","settingsPanelDomElement","settingsPanelHTMLElement","get","settingsPanelWidth","scrollWidth","settingsPanelHeight","scrollHeight","targetPageHtmlElement","clone","cloneNode","parentNode","appendChild","targetSettingsPanelWidth","targetSettingsPanelHeight","parentElement","removeChild","forceBrowserReflow","offsetLeft","getComputedItems","setting","selectBox_1","oldDisplay_1","requestAnimationFrame","allItems","apply","videoqualityselectbox_1","audioqualityselectbox_1","playbackspeedselectbox_1","SettingsPanelItem","settingsPanelItemEvents","onActiveChanged","handleConfigItemChanged","minItemsToDisplay","VideoQualitySelectBox","hasAutoItem","playbackSpeedSelectionEnabled","onActiveChangedEvent","settingspanelitem_1","settingsPanelPageEvents","onActive","onInactive","settingsStateChangedHandler","lastShownItem","CLASS_LAST","settingspanelpagenavigatorbutton_1","SettingsPanelPageBackButton","popPage","SettingsPanelPageNavigatorButton","container","pushTargetPage","SettingsPanelPageOpenButton","settingspanel_1","SettingsToggleButton","visibleSettingsPanels","settingsPanel","autoHideWhenNoActiveSettings","settingsPanelItemsChangedHandler","Spacer","subtitleutils_1","SubtitleListBox","SubtitleSwitchHandler","controlbar_1","SubtitleOverlay","preprocessLabelEventCallback","previewSubtitleActive","previewSubtitle","SubtitleLabel","subtitleManager","ActiveSubtitleManager","subtitleContainerManager","SubtitleRegionContainerManager","CueEnter","row","column","labelToAdd","cueEnter","removeLabel","addLabel","CueExit","labelToRemove","cueExit","hasCues","subtitleClearHandler","SubtitleEnabled","SubtitleDisabled","CLASS_CONTROLBAR_VISIBLE","configureCea608Captions","fontSize","fontLetterSpacing","fontSizeCalculationRequired","updateCEA608FontSize","dummyLabel","font-size","line-height","visibility","dummyLabelCharWidth","dummyLabelCharHeight","fontSizeRatio","subtitleOverlayWidth","subtitleOverlayHeight","CEA608_NUM_COLUMNS","CEA608_NUM_ROWS","gridSlotWidth","letter-spacing","CLASS_CEA_608","CEA608_COLUMN_OFFSET","CEA608_ROW_OFFSET","enablePreviewSubtitleLabel","removePreviewSubtitleLabel","region","regionStyle","activeSubtitleCueMap","activeSubtitleCueCount","calculateId","generateImageTagText","image","imageData","imgTag","src","outerHTML","getCues","activeSubtitleCues","cue","activeSubtitleCue","cueCount","subtitleOverlay","subtitleRegionContainers","regionName","regionContainer","SubtitleRegionContainer","regionName_1","labelCount","SubtitleSelectBox","subtitlesettingselectbox_1","BackgroundColorSelectBox","setColorAndOpacity","settingsManager","backgroundColor","isSet","backgroundOpacity","toggleOverlayClass","onChanged","property","SubtitleSettingSelectBox","BackgroundOpacitySelectBox","CharacterEdgeSelectBox","characterEdge","FontColorSelectBox","fontColor","fontOpacity","FontFamilySelectBox","fontFamily","FontOpacitySelectBox","FontSizeSelectBox","overlay","currentCssClass","SubtitleSettingsLabel","opener","storageutils_1","SubtitleSettingsManager","_properties","SubtitleSettingsProperty","windowColor","windowOpacity","userSettings","localStorageKey","DummyComponent","instance","propertyName","save","StorageUtils","setObject","getObject","_instance","manager","_manager","_onChanged","_value","onChangedEvent","subtitlesettingsmanager_1","fontsizeselectbox_1","fontfamilyselectbox_1","fontcolorselectbox_1","fontopacityselectbox_1","characteredgeselectbox_1","backgroundcolorselectbox_1","backgroundopacityselectbox_1","windowcolorselectbox_1","windowopacityselectbox_1","subtitlesettingsresetbutton_1","settingspanelpagebackbutton_1","SubtitleSettingsPanelPage","WindowColorSelectBox","WindowOpacitySelectBox","SubtitleSettingsResetButton","metadatalabel_1","TitleBar","keepHiddenWithoutMetadata","shouldBeShown","hasMetadataText","checkMetadataTextAndUpdateVisibility","toggleButtonEvents","onToggleOn","onToggleOff","defaultConfig","isOff","onState","onToggleEvent","onToggleOnEvent","isOn","onToggleOffEvent","toggle","canvasWidth","canvasHeight","interferenceHeight","lastFrameUpdate","frameInterval","useAnimationFrame","canvas","canvasElement","canvasContext","getContext","noiseAnimationWindowPos","renderFrame","cancelAnimationFrame","frameUpdateHandlerId","clearTimeout","getTime","scheduleNextRender","currentPixelOffset","noiseImage","createImageData","random","putImageData","bind","playerStateChange","userInteractionEventSource","configureUIShowHide","configurePlayerStates","playerState","isFirstTouch","hidingPrevented","hidePlayerStateExceptions","uiHideTimeout","previewHideEventArgs","onPreviewControlsHide","cancel","userInteractionEvents","name","handler","state","stateClassNames","PlayerState","isNaN","enumName","STATE_PREFIX","removeStates","Idle","Prepared","Finished","updateState","getState","FULLSCREEN","BUFFERING","REMOTE_CONTROL","CONTROLS_HIDDEN","CONTROLS_SHOWN","updateLayoutSizeClasses","substring","getContainer","createElement","flex","selectCurrentVideoQuality","getVideoQuality","updateVideoQualities","videoQualities","getAvailableVideoQualities","hasAuto","getStreamType","videoQualities_1","videoQuality","setVideoQuality","VideoQualityChanged","VideoQualityAdded","VideoQualityRemoved","volumeslider_1","volumetogglebutton_1","VolumeControlButton","volumeToggleButton","VolumeToggleButton","volumeSlider","VolumeSlider","getVolumeToggleButton","getVolumeSlider","volumeSliderHideTimeout","volumeSliderHovered","seekbar_1","updateVolumeWhileScrubbing","volumeTransition","update","hideIfVolumeControlProhibited","volumeController","detectVolumeControlAvailability","muted","volume","startTransition","finish","dummyVideoElement","issuerName","volumeLevelTens","ceil","toggleMuted","VRToggleButton","isVRConfigured","source","vr","isVRStereoAvailable","vrStateHandler","ev","VR_RENDERING_ERROR","getStereo","vrButtonVisibilityHandler","VRStereoChanged","setStereo","Watermark","vrtogglebutton_1","settingstogglebutton_1","playbacktimelabel_1","airplaytogglebutton_1","errormessageoverlay_1","casttogglebutton_1","fullscreentogglebutton_1","recommendationoverlay_1","caststatusoverlay_1","watermark_1","subtitleoverlay_1","seekbarlabel_1","playbacktoggleoverlay_1","pictureinpicturetogglebutton_1","spacer_1","uimanager_1","titlebar_1","bufferingoverlay_1","subtitlelistbox_1","audiotracklistbox_1","uifactory_1","DemoFactory","buildDemoWithSeparateAudioSubtitlesButtons","UIManager","ui","UIFactory","modernSmallScreenAdsUI","condition","context","isMobile","documentWidth","isAd","adRequiresUi","modernAdsUI","modernSmallScreenUI","modernUIWithSeparateAudioSubtitlesButtons","subtitleListBox","subtitleSettingsPanel","audioTrackListBox","audioTrackSettingsPanel","controlBar","something","attributes","Array","HTMLElement","elements","Document","tagName","attributeName","attributeValue","setAttribute","selector","findChildElements","findChildElementsOfElement","childElements","querySelectorAll","allChildElements","arguments","setHtml","getHtml","innerHTML","HTMLSelectElement","HTMLInputElement","attribute","setAttr","getAttr","getAttribute","dataAttribute","setData","getData","childElement","parent","elementRect","getBoundingClientRect","htmlRect","body","offsetWidth","offsetHeight","eventName","eventHandler","split","addEventListener","removeEventListener","className","classList","classNames","add","replace","RegExp","contains","propertyNameOrCollection","setCss","getCss","propertyValueCollection","setCssCollection","getComputedStyle","ruleValueCollection","defaultErrorMessages","1000","1001","1100","1101","1102","1103","1104","1105","1106","1107","1108","1109","1110","1111","1112","1113","1200","1201","1202","1203","1204","1205","1206","1207","1208","1209","1210","1211","1300","1301","1302","1303","1304","1400","1401","1402","1403","1404","2000","2001","2002","2003","2004","2005","2006","2007","2008","2009","2010","2011","2012","2013","2014","2100","2101","3000","3001","3002","3003","3004","3100","errorMessage","listeners","listener","EventListenerWrapper","rateMs","RateLimitedEventListenerWrapper","subscribedListener","unsubscribeAll","listenersToRemove","listeners_1","fire","isOnce","listenersToRemove_1","listenerToRemove","once","eventListener","startRateLimiting","rateLimitTimout","lastSeenEvent","fireSuper","rateLimitingEventListener","shouldFireEvent","guid","loadedCallback","loaded","callLoadedCallback","state_1","de_json_1","__importDefault","en_json_1","defaultVocabularies","en","default","de","defaultLocalizationConfig","language","vocabularies","I18n","setConfig","mergedConfig","__assign","detectBrowserLanguage","mergeVocabulariesWithDefaultVocabularies","initializeLanguage","initializeVocabulary","containsLanguage","hasOwnProperty","rawVocabularies","reduce","mergedVocabularies","vocabulary","browserLanguageDetectionEnabled","userLanguage","shortenedUserLanguage","vocab","lang","replaceVariableWithPlaceholderIfExists","matches","match","m","str","vocabularyString","settings.video.quality","settings.audio.quality","settings.audio.track","playPause","settings.audio.mute","pictureInPicture","appleAirplay","googleCast","settings","fullscreen","settings.subtitles","settings.subtitles.font.size","settings.subtitles.font.family","settings.subtitles.font.color","settings.subtitles.font.opacity","settings.subtitles.characterEdge","settings.subtitles.background.color","settings.subtitles.background.opacity","settings.subtitles.window.color","settings.subtitles.window.opacity","back","replay","ads.remainingTime","colors.white","colors.black","colors.red","colors.green","colors.blue","colors.yellow","subtitle.example","playingOn","connectingTo","colors.cyan","colors.magenta","settings.subtitles.characterEdge.raised","settings.subtitles.characterEdge.depressed","settings.subtitles.characterEdge.uniform","settings.subtitles.characterEdge.dropshadowed","settings.subtitles.font.family.monospacedserif","settings.subtitles.font.family.proportionalserif","settings.subtitles.font.family.monospacedsansserif","settings.subtitles.font.family.proportionalsansserif","settings.subtitles.font.family.casual","settings.subtitles.font.family.cursive","settings.subtitles.font.family.smallcapital","auto","normal","version","UIInstanceManager","demofactory_1","uiutils_1","UIUtils","browserutils_1","itemselectionlist_1","audiotrackselectbox_1","subtitleselectbox_1","volumecontrolbutton_1","adskipbutton_1","admessagelabel_1","adclickoverlay_1","castuicontainer_1","closebutton_1","subtitlesettingslabel_1","settingspanelpageopenbutton_1","subtitlesettingspanelpage_1","TypeError","hasEnded","defaultValue","getSeekableRange","timeShiftAvailabilityChangedEvent","timeShiftAvailableNow","liveChangedEvent","liveDetector","isAndroid","isChrome","DurationChanged","AdBreakStarted","AdBreakFinished","liveNow","hasLocalStorage","hasLocalStorageCache","storage","setItem","DOMException","localStorage","getItem","JSON","stringify","json","parse","totalSeconds","format","isNegative","hours","floor","minutes","leftPadWithZeros","num","substr","adMessage","adMessagePlaceholderRegex","formatString","formatNumber","formatStringValidationRegex","leadingZeroesRegex","decimalPlacesRegex","leadingZeroes","leadingZeroesMatches","numDecimalPlaces","decimalPlacesMatches","timeString","toFixed","addSubtitle","subtitle","removeSubtitle","selectCurrentSubtitle","subtitles","currentSubtitle","list","SUBTITLES_OFF_KEY","refreshSubtitles","offListItem","subtitleToListItem","SubtitleAdded","SubtitleRemoved","delay","callback","repeat","timeoutOrIntervalId","active","clearInternal","setInterval","clearInterval","buildDefaultUI","buildModernUI","buildDefaultSmallScreenUI","buildModernSmallScreenUI","buildDefaultCastReceiverUI","buildModernCastReceiverUI","modernUI","mainSettingsPanelPage","subtitleSettingsPanelPage","subtitleSettingsOpenButton","modernCastReceiverUI","volumecontroller_1","playerUiOrUiVariants","onUiVariantResolve","playerUi","uiVariants","managerPlayerWrapper","PlayerWrapper","autoUiVariantResolve","VolumeController","getPlayer","updateConfig","playerSourceConfig","playerSourceUiConfig","uiContainerElement","uiInstanceManagers","uiVariantsWithoutCondition","uiVariant","InternalUIInstanceManager","adStartedEvent","resolveUiVariant","isLinear","linearAd","requestsUi","currentUi","getWrappedPlayer","fireEventInUI","localize","setLocalizationConfig","localizationConfig","getUiVariants","switchToUiVariant","uiVariantIndex","nextUi","uiVariantChanged","getUI","isConfigured","addUi","defaultContext","isFullscreen","clientWidth","switchingContext","nextUiVariant","dom","configureControls","releaseUi","releaseControls","clearEventHandlers","uiInstanceManager","getTimelineMarkers","addTimelineMarker","timelineMarker","removeTimelineMarker","playerWrapper","event_1","configureControlsTree","configured","configuredComponents","traverseTree","configuredComponents_1","constructor","releaseControlsTree","released","isReleased","childComponent","eventHandlers","members","member","methods","properties","members_1","wrapper","methods_1","method","_b","properties_1","propertyDescriptor","propertyDescriptor_1","getOwnPropertyDescriptor","getPrototypeOf","set","eventType","playerEventData","timestamp","uiSourced","visit","recursiveTreeWalker","storeVolume","VolumeChanged","Muted","Unmuted","setVolume","getVolume","setMuted","mute","unmute","isMuted","recallVolume","storedVolume","VolumeTransition","playerMuted","playerVolume","uiMuted","uiVolume","controller"],"mappings":"CAAA,SAAAA,GAAA,GAAA,gBAAAC,UAAA,mBAAAC,QAAAA,OAAAD,QAAAD,QAAA,IAAA,kBAAAG,SAAAA,OAAAC,IAAAD,UAAAH,OAAA,CAAA,GAAAK,EAAAA,GAAA,mBAAAC,QAAAA,OAAA,mBAAAC,QAAAA,OAAA,mBAAAC,MAAAA,KAAAC,MAAAJ,EAAAK,WAAAL,EAAAK,cAAAC,SAAAX,MAAA,WAAA,MAAA,SAAAY,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAjB,GAAA,GAAAsB,OAAA,uBAAAL,EAAA,IAAA,MAAAjB,GAAAuB,KAAA,mBAAAvB,EAAA,GAAAwB,GAAAV,EAAAG,IAAAhB,WAAAY,GAAAI,GAAA,GAAAQ,KAAAD,EAAAvB,QAAA,SAAAW,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,GAAAF,IAAAY,EAAAA,EAAAvB,QAAAW,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAhB,QAAA,IAAA,GAAAoB,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAW,OAAAT,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAW,GAAA,SAAAP,EAAAlB,EAAAD,kECAA,SAAiB2B,GAOf,QAAgBC,GAAUC,EAAYC,GACpC,GAAIC,GAAQF,EAAMG,QAAQF,EAE1B,OAAIC,IAAS,EACJF,EAAMI,OAAOF,EAAO,GAAG,GAEvB,KANKJ,EAAAC,OAAMA,GAPP5B,EAAA2B,aAAA3B,EAAA2B,qGCGjB,IAAAO,GAAAf,EAAA,uBAOAgB,EAAA,WAME,QAAAA,GAAYC,EAAmBC,EAA2CC,GAA1E,GAAAC,GAAA/B,IA8BQA,MAAAgC,cAAgB,SAACC,GACvB,GAAMC,GAAaD,EAAME,KACpBJ,GAAKK,YAAYC,QAAQH,EAAWI,KACvCP,EAAKK,YAAYG,QAAQL,EAAWI,GAAIZ,EAAAc,KAAKC,aAAaP,EAAWQ,SAIjE1C,KAAA2C,iBAAmB,SAACV,GAC1B,GAAMC,GAAaD,EAAME,KACrBJ,GAAKK,YAAYC,QAAQH,EAAWI,KACtCP,EAAKK,YAAYQ,WAAWV,EAAWI,KAInCtC,KAAA6C,wBAA0B,WAChC,GAAIC,GAAoBf,EAAKH,OAAOmB,UAGhCD,IACFf,EAAKK,YAAYY,WAAWF,EAAkBR,KAI1CtC,KAAAiD,mBAAqB,WAC3B,GAAMC,GAAcnB,EAAKH,OAAOuB,oBAC1BC,EAAuB,SAAClB,GAC5B,OAASmB,IAAKnB,EAAWI,GAAII,MAAOR,EAAWQ,OAGjDX,GAAKK,YAAYkB,iBAAiBJ,EAAYK,IAAIH,KA1DlDpD,KAAK4B,OAASA,EACd5B,KAAKoC,YAAcP,EACnB7B,KAAK8B,UAAYA,EAEjB9B,KAAKwD,qBACLxD,KAAKyD,mBACLzD,KAAKiD,qBACLjD,KAAK6C,0BAqDT,MAlDUlB,GAAA+B,UAAAF,mBAAR,WAAA,GAAAzB,GAAA/B,IACEA,MAAKoC,YAAYuB,eAAeC,UAAU,SAACC,EAAGC,GAC5C/B,EAAKH,OAAOmC,SAASD,MAIjBnC,EAAA+B,UAAAD,iBAAR,WAEEzD,KAAK4B,OAAOoC,GAAGhE,KAAK4B,OAAOpC,QAAQyE,YAAYC,aAAclE,KAAK6C,yBAElE7C,KAAK4B,OAAOoC,GAAGhE,KAAK4B,OAAOpC,QAAQyE,YAAYE,eAAgBnE,KAAKiD,oBAEpEjD,KAAK4B,OAAOoC,GAAGhE,KAAK4B,OAAOpC,QAAQyE,YAAYG,eAAgBpE,KAAKiD,oBAEpEjD,KAAK4B,OAAOoC,GAAGhE,KAAK4B,OAAOpC,QAAQyE,YAAYI,WAAYrE,KAAKgC,eAChEhC,KAAK4B,OAAOoC,GAAGhE,KAAK4B,OAAOpC,QAAQyE,YAAYK,aAActE,KAAK2C,kBAClE3C,KAAK8B,UAAUyC,YAAYC,OAAOC,UAAUb,UAAU5D,KAAKiD,qBAkC/DtB,IAnEanC,GAAAmC,wBAAAA,+GCVb,IAAA+C,GAAA,WAAA,QAAAA,MA8BA,MAxBEC,QAAAC,eAAWF,EAAA,gBAAX,WACE,QAAK1E,KAAK6E,iBAGHC,WAAaA,UAAUC,WAAa,OAAOC,KAAKF,UAAUC,6CAGnEJ,OAAAC,eAAWF,EAAA,gBAAX,WACE,QAAK1E,KAAK6E,iBAGHC,WAAaA,UAAUC,WAAa,SAASC,KAAKF,UAAUC,6CAGrEJ,OAAAC,eAAWF,EAAA,iBAAX,WACE,QAAK1E,KAAK6E,iBAGHC,WAAaA,UAAUC,WAAa,UAAUC,KAAKF,UAAUC,6CAGvDL,EAAAG,aAAf,WACE,MAAyB,mBAAXhF,SAElB6E,IA9BalF,GAAAkF,aAAAA,4bCAb,IAAAO,GAAAtE,EAAA,kBAOAuE,EAAA,SAAAC,GAAA,QAAAD,oDA+BA,MA/BoCE,GAAAF,EAAAC,GAElCD,EAAAxB,UAAA2B,UAAA,SAAUzD,EAAmBE,GAA7B,GAAAC,GAAA/B,IACEmF,GAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,EAExB,IAAIwD,GAAmC,IAEvC1D,GAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYsB,UAAW,SAACtD,GAC/C,GAAIuD,GAAKvD,EAAMuD,EACfzD,GAAK0D,OAAOD,EAAGE,iBACfJ,EAAuBE,EAAGG,uBAI5B,IAAIC,GAAoB,WACtB7D,EAAK0D,OAAO,MAGd7D,GAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY4B,WAAYD,GACjDhE,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY6B,UAAWF,GAChDhE,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY8B,QAASH,GAE9C5F,KAAKgG,QAAQpC,UAAU,WAErBhC,EAAOqE,MAAM,uBAETX,GACFA,OAIRJ,GA/BoCD,EAAAiB,aAAvB1G,GAAA0F,eAAAA,+cCPb,IAAAiB,GAAAxF,EAAA,WAEAyF,EAAAzF,EAAA,kBAEAe,EAAAf,EAAA,wBAKA0F,EAAA,SAAAlB,GAEE,QAAAkB,GAAYC,OAAA,KAAAA,IAAAA,KAAZ,IAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAKuE,OAASvE,EAAKwE,YAAYD,GAC7BE,SAAU,sBACVC,KAAM/E,EAAAc,KAAKC,aAAa,sBACvBV,EAAKuE,UA+BZ,MAvCoClB,GAAAiB,EAAAlB,GAWlCkB,EAAA3C,UAAA2B,UAAA,SAAUzD,EAAmBE,GAA7B,GAAAC,GAAA/B,IACEmF,GAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,EAExB,IAAIwE,GAAStG,KAAKuE,YACdkC,EAAOH,EAAOG,KAEdC,EAAuB,WACzB3E,EAAK4E,QAAQP,EAAAQ,YAAYC,6BAA6BnF,EAAAc,KAAKsE,oBAAoBL,GAAO,KAAM7E,KAG1FmF,EAAiB,SAAC9E,GACpB,GAAI+E,GAAY/E,EAAMuD,GAAgBwB,QACtCP,GAAOO,GAAYA,EAASC,SAAWX,EAAOG,KAE9CC,IAEA9E,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYiD,YAAaR,IAGhDS,EAAe,WACjBvF,EAAOwF,IAAIxF,EAAOpC,QAAQyE,YAAYiD,YAAaR,GAGrD9E,GAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYsB,UAAWwB,GAChDnF,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY6B,UAAWqB,GAChDvF,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY8B,QAASoB,GAC9CvF,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY4B,WAAYsB,IAErDd,GAvCoCF,EAAAkB,MAAvB7H,GAAA6G,eAAAA,sfCTb,IAAAiB,GAAA3G,EAAA,YAEAyF,EAAAzF,EAAA,kBAsBA4G,EAAA,SAAApC,GAEE,QAAAoC,GAAYjB,OAAA,KAAAA,IAAAA,KAAZ,IAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAKuE,OAASvE,EAAKwE,YAAYD,GAC7BE,SAAU,oBACVgB,sBAAuB,6BACvBC,iBAAkB,WACjB1F,EAAKuE,UAsDZ,MA/DkClB,GAAAmC,EAAApC,GAYhCoC,EAAA7D,UAAA2B,UAAA,SAAUzD,EAAmBE,GAA7B,GAAAC,GAAA/B,IACEmF,GAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,EAExB,IAAIwE,GAAStG,KAAKuE,YACdiD,EAAwBlB,EAAOkB,sBAC/BC,EAAmBnB,EAAOmB,iBAC1BC,GAAc,EAEdC,EAA2B,WAC7B5F,EAAK6F,OAGDhG,EAAOiG,iBAAmBH,GAC5B3F,EAAK4E,QAAQP,EAAAQ,YAAYC,6BAA6BW,EAAuBE,EAAY9F,IACzFG,EAAK+F,YAEL/F,EAAK4E,QAAQc,GACb1F,EAAKgG,WAILhB,EAAiB,SAAC9E,GACpB,GAAIuD,GAAKvD,EAAMuD,EACfkC,GAAalC,EAAGwC,eAChBR,EAAwBhC,EAAGwB,UAAYxB,EAAGwB,SAASQ,uBAAyBlB,EAAOkB,sBACnFC,EAAmBjC,EAAGwB,UAAYxB,EAAGwB,SAASS,kBAAoBnB,EAAOmB,iBAI/C,gBAAfC,IAA2BA,GAAc,GAClDC,IACA/F,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYiD,YAAaS,IAElD5F,EAAKkG,QAILd,EAAe,WACjBvF,EAAOwF,IAAIxF,EAAOpC,QAAQyE,YAAYiD,YAAaS,GAGrD/F,GAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYsB,UAAWwB,GAChDnF,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY6B,UAAWqB,GAChDvF,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY8B,QAASoB,GAC9CvF,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY4B,WAAYsB,GAEjDnH,KAAKgG,QAAQpC,UAAU,WAErBhC,EAAOsG,IAAIC,UAGjBZ,GA/DkCD,EAAAc,OAArB5I,GAAA+H,aAAAA,6dCxBb,IAAAc,GAAA1H,EAAA,kBAGAe,EAAAf,EAAA,wBAKA2H,EAAA,SAAAnD,GAEE,QAAAmD,GAAYhC,OAAA,KAAAA,IAAAA,KAAZ,IAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAKuE,OAASvE,EAAKwE,YAAYD,GAC7BE,SAAU,yBACVC,KAAM/E,EAAAc,KAAKC,aAAa,iBACvBV,EAAKuE,UA6CZ,MArDyClB,GAAAkD,EAAAnD,GAWvCmD,EAAA5E,UAAA2B,UAAA,SAAUzD,EAAmBE,GAA7B,GAAAC,GAAA/B,IAGE,IAFAmF,EAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,IAEnBF,EAAO2G,mBAGV,WADAvI,MAAKiI,MAIPjI,MAAKgG,QAAQpC,UAAU,WACjBhC,EAAO2G,qBACT3G,EAAO4G,0BAEHC,SACFA,QAAQC,IAAI,wBAKlB,IAAMC,GAA0B,WAC1B/G,EAAO2G,qBACTxG,EAAK6F,OAEL7F,EAAKkG,QAIHW,EAAwB,WACxBhH,EAAOiH,kBACT9G,EAAKiC,KAELjC,EAAKqF,MAITxF,GAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY6E,iBAAkBH,GACvD/G,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY8E,eAAgBH,GAGrDD,IACAC,KAEJN,GArDyCD,EAAAW,aAA5BxJ,GAAA8I,oBAAAA,yeCRb,IAAAW,GAAAtI,EAAA,eAIAe,EAAAf,EAAA,wBAKAuI,EAAA,SAAA/D,GAEE,QAAA+D,GAAY5C,OAAA,KAAAA,IAAAA,KAAZ,IAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAKuE,OAASvE,EAAKwE,YAAYD,GAC7B6C,YAAa,6BACZpH,EAAKuE,UAgDZ,MAvD2ClB,GAAA8D,EAAA/D,GAUzC+D,EAAAxF,UAAA2B,UAAA,SAAUzD,EAAmBE,GAA7B,GAAAC,GAAA/B,IACEmF,GAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,EAExB,IAAIsH,GAA4B,WAC9BrH,EAAKiB,WAAWpB,EAAOyH,kBAAkB/G,KAGvCgH,EAAuB,WACzB,GAAIC,GAAiB3H,EAAO4H,4BAE5BzH,GAAK0H,aAGL1H,EAAKQ,QAAQ,OAAQb,EAAAc,KAAKC,aAAa,QAGvC,KAAyB,GAAAiH,GAAA,EAAAC,EAAAJ,EAAAG,EAAAC,EAAA1I,OAAAyI,IAAgB,CAApC,GAAIE,GAAYD,EAAAD,EACnB3H,GAAKQ,QAAQqH,EAAatH,GAAIsH,EAAalH,OAI7C0G,IAGFpJ,MAAK2D,eAAeC,UAAU,SAACiG,EAA+B/F,GAC5DlC,EAAOkI,gBAAgBhG,KAIzBlC,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYC,aAAcoF,GAEnD1H,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYE,eAAgBmF,GAErD1H,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYG,eAAgBkF,GAErD1H,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY8F,oBAAqBX,GACrDxH,EAAOpC,QAAQyE,YAAoB+F,oBAGtCpI,EAAOoC,GAAIpC,EAAOpC,QAAQyE,YAAoB+F,kBAAmBV,GACjE1H,EAAOoC,GAAIpC,EAAOpC,QAAQyE,YAAoBgG,oBAAqBX,IAGrExH,EAAUyC,YAAYC,OAAOC,UAAUb,UAAU0F,IAErDJ,GAvD2CD,EAAAiB,UAA9B1K,GAAA0J,sBAAAA,seCTb,IAAAiB,GAAAxJ,EAAA,aAEAyJ,EAAAzJ,EAAA,sBAMA0J,EAAA,SAAAlF,GAAA,QAAAkF,oDAMA,MANuCjF,GAAAiF,EAAAlF,GAErCkF,EAAA3G,UAAA2B,UAAA,SAAUzD,EAAmBE,GAC3BqD,EAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,GACxB,GAAIsI,GAAAzI,wBAAwBC,EAAQ5B,KAAM8B,IAE9CuI,GANuCF,EAAAG,QAA1B9K,GAAA6K,kBAAAA,keCRb,IAAApB,GAAAtI,EAAA,eAGAyJ,EAAAzJ,EAAA,sBAMA4J,EAAA,SAAApF,GAEE,QAAAoF,GAAYjE,OAAA,KAAAA,IAAAA,KAAZ,IAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAKuE,OAASvE,EAAKwE,YAAYD,GAC7B6C,YAAa,2BACZpH,EAAKuE,UAQZ,MAfyClB,GAAAmF,EAAApF,GAUvCoF,EAAA7G,UAAA2B,UAAA,SAAUzD,EAAmBE,GAC3BqD,EAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,GAExB,GAAIsI,GAAAzI,wBAAwBC,EAAQ5B,KAAM8B,IAE9CyI,GAfyCtB,EAAAiB,UAA5B1K,GAAA+K,oBAAAA,oeCTb,IAAAC,GAAA7J,EAAA,eAEA8J,EAAA9J,EAAA,eACA+J,EAAA/J,EAAA,cAkBAgK,EAAA,SAAAxF,GAIE,QAAAwF,GAAYrE,OAAA,KAAAA,IAAAA,KAAZ,IAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAK6I,YACH,GAAIH,GAAAI,WAA6BC,IAAK,MAAOtE,SAAU,mCACvD,GAAIiE,GAAAI,WAA6BC,IAAK,MAAOtE,SAAU,mCACvD,GAAIiE,GAAAI,WAA6BC,IAAK,MAAOtE,SAAU,oCAGzDzE,EAAKuE,OAASvE,EAAKwE,YAAYD,GAC7BE,SAAU,uBACVuE,QAAQ,EACRC,WAAYjJ,EAAK6I,WACjBK,YAAa,KACZlJ,EAAKuE,UAqCZ,MAvDsClB,GAAAuF,EAAAxF,GAqBpCwF,EAAAjH,UAAA2B,UAAA,SAAUzD,EAAmBE,GAA7B,GAAAC,GAAA/B,IACEmF,GAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,EAExB,IAAIwE,GAAStG,KAAKuE,YAEd2G,EAAqB,GAAIR,GAAAS,QAAQ7E,EAAO2E,YAAa,WACvDlJ,EAAK6F,SAGHwD,EAAc,WAChBF,EAAmBG,SAGjBC,EAAc,WAChBJ,EAAmBK,QACnBxJ,EAAKkG,OAGPrG,GAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYuH,aAAcJ,GACnDxJ,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYwH,WAAYH,GACjD1J,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYyH,KAAMN,GAC3CxJ,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY0H,QAASL,GAC9C1J,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY2H,OAAQN,GAC7C1J,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY4H,KAAMT,GAC3CxJ,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY6H,OAAQR,GAC7C1J,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY8H,UAAWX,GAChDxJ,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY+H,YAAaV,GAClD1J,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYE,eAAgBmH,GAGjD1J,EAAOqK,aACTjM,KAAK4H,QAGX+C,GAvDsCH,EAAA0B,UAAzB1M,GAAAmL,iBAAAA,8eCrBb,IAAAF,GAAA9J,EAAA,eACAwL,EAAAxL,EAAA,UACAyL,EAAAzL,EAAA,sBACAe,EAAAf,EAAA,wBAeAyH,EAAA,SAAAjD,GAME,QAAAiD,GAAY9B,GAAZ,GAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WALP+B,GAAAsK,cACNrG,QAAS,GAAIoG,GAAAE,iBAMbvK,EAAKuE,OAASvE,EAAKwE,YAAYD,GAC7BE,SAAU,aACCzE,EAAKuE,UAwCtB,MAnDyDlB,GAAAgD,EAAAjD,GAc7CiD,EAAA1E,UAAA6I,aAAV,WAAA,GAAAxK,GAAA/B,KAEMwM,EAAgB,GAAIL,GAAAM,IAAI,UAC1BC,KAAQ,SACRpK,GAAMtC,KAAKsG,OAAOhE,GAClBqK,MAAS3M,KAAK4M,kBACbC,OAAO,GAAIV,GAAAM,IAAI,QAChBE,MAAS3M,KAAK8M,UAAU,WACvBC,KAAKrL,EAAAc,KAAKsE,oBAAoB9G,KAAKsG,OAAOG,OAO7C,OAJA+F,GAAcxI,GAAG,QAAS,WACxBjC,EAAKiL,iBAGAR,GAOTpE,EAAA1E,UAAAiD,QAAA,SAAQF,GACNzG,KAAKiN,gBAAgBC,KAAK,IAAMlN,KAAK8M,UAAU,UAAUC,KAAKrL,EAAAc,KAAKsE,oBAAoBL,KAG/E2B,EAAA1E,UAAAsJ,aAAV,WACEhN,KAAKqM,aAAarG,QAAQmH,SAASnN,OAOrC2E,OAAAC,eAAIwD,EAAA1E,UAAA,eAAJ,WACE,MAAO1D,MAAKqM,aAAarG,QAAQoH,4CAErChF,GAnDyDqC,EAAAI,UAA5CrL,GAAA4I,OAAAA,2gBClBb,IAAAoC,GAAA7J,EAAA,eACAwF,EAAAxF,EAAA,WAGAe,EAAAf,EAAA,wBAKA0M,EAAA,SAAAlI,GAIE,QAAAkI,GAAY/G,OAAA,KAAAA,IAAAA,KAAZ,IAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAKuL,YAAc,GAAInH,GAAAkB,OAAqBb,SAAU,yBAEtDzE,EAAKuE,OAASvE,EAAKwE,YAAYD,GAC7BE,SAAU,yBACVwE,YAAajJ,EAAKuL,aAClBvC,QAAQ,GACPhJ,EAAKuE,UA0BZ,MAvCuClB,GAAAiI,EAAAlI,GAgBrCkI,EAAA3J,UAAA2B,UAAA,SAAUzD,EAAmBE,GAA7B,GAAAC,GAAA/B,IACEmF,GAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,GAExBF,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYsJ,qBACnC,SAACtL,GACCF,EAAK6F,MAEL,IAAI4F,GAAiBvL,EAAMwL,YAAYC,UACvC3L,GAAKuL,YAAY3G,QAAQjF,EAAAc,KAAKC,aAAa,gBAAkB+K,eAAcA,OAE/E5L,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY0J,YAAa,SAAC1L,GAIjDF,EAAK6F,MACL,IAAI4F,GAAiBvL,EAAMyL,UAC3B3L,GAAKuL,YAAY3G,QAAQjF,EAAAc,KAAKC,aAAa,aAAe+K,eAAcA,OAE1E5L,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY2J,YAAa,SAAC3L,GAEjDF,EAAKkG,UAGXoF,GAvCuC7C,EAAA0B,UAA1B1M,GAAA6N,kBAAAA,ofCTb,IAAAhF,GAAA1H,EAAA,kBAGAe,EAAAf,EAAA,wBAKAkN,EAAA,SAAA1I,GAEE,QAAA0I,GAAYvH,OAAA,KAAAA,IAAAA,KAAZ,IAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAKuE,OAASvE,EAAKwE,YAAYD,GAC7BE,SAAU,sBACVC,KAAM/E,EAAAc,KAAKC,aAAa,eACvBV,EAAKuE,UAgDZ,MAxDsClB,GAAAyI,EAAA1I,GAWpC0I,EAAAnK,UAAA2B,UAAA,SAAUzD,EAAmBE,GAA7B,GAAAC,GAAA/B,IACEmF,GAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,GAExB9B,KAAKgG,QAAQpC,UAAU,WACjBhC,EAAOkM,kBACLlM,EAAOmM,YACTnM,EAAOoM,WAEPpM,EAAOqM,YAGLxF,SACFA,QAAQC,IAAI,qBAKlB,IAAIwF,GAAsB,WACpBtM,EAAOkM,kBACT/L,EAAK6F,OAEL7F,EAAKkG,OAITrG,GAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYkK,cAAeD,GAGpDtM,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYsJ,qBAAsB,WACzDxL,EAAKiC,OAEPpC,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY0J,YAAa,WAEhD5L,EAAKiC,OAEPpC,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY2J,YAAa,WAChD7L,EAAKqF,QAIP8G,IACItM,EAAOmM,aACT/N,KAAKgE,MAGX6J,GAxDsCxF,EAAAW,aAAzBxJ,GAAAqO,iBAAAA,0eCRb,IAAAO,GAAAzN,EAAA,iBAEA+J,EAAA/J,EAAA,cAOA0N,EAAA,SAAAlJ,GAIE,QAAAkJ,GAAY/H,SACVnB,GAAAnE,KAAAhB,KAAMsG,IAAOtG,KAgEjB,MArEqCoF,GAAAiJ,EAAAlJ,GAQnCkJ,EAAA3K,UAAA2B,UAAA,SAAUzD,EAAmBE,GAA7B,GAAAC,GAAA/B,IACEmF,GAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,EAExB,IAAIwE,GAAStG,KAAKuE,YAYd+J,GAAY,EAEZC,EAAS,WACXzM,EAAU0M,eAAerB,SAASpL,GAClCuM,GAAY,EAGdtO,MAAKyO,kBAAoB,GAAI/D,GAAAS,QAAQ7E,EAAOoI,UAAWH,EAEvD,IAAII,GAAS,WACNL,IACHxM,EAAU8M,eAAezB,SAASpL,GAClCuM,GAAY,IAIZO,EAAoB,WACtBF,IACA5M,EAAK0M,kBAAkBlD,SAGrBuD,EAAoB,WACtBH,IACA5M,EAAK0M,kBAAkBpD,SAGrB0D,EAAkB,WAChBnN,EAAOoN,YACTF,IAEAD,IAIJjN,GAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYyH,KAAMoD,GAC3ClN,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY2H,OAAQiD,GAC7CjN,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY4H,KAAMgD,GAC3CjN,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY6H,OAAQiD,GAE7CjN,EAAUyC,YAAYC,OAAOC,UAAUb,UAAUkL,IAGnDT,EAAA3K,UAAAuL,QAAA,WACE9J,EAAAzB,UAAMuL,QAAOjO,KAAAhB,MACbA,KAAKyO,kBAAkBlD,SAE3B8C,GArEqCD,EAAAc,YAAxB1P,GAAA6O,gBAAAA,+dCTb,IAAA/G,GAAA3G,EAAA,YAeAuF,EAAA,SAAAf,GAEE,QAAAe,GAAYI,OAAA,KAAAA,IAAAA,KAAZ,IAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAKuE,OAASvE,EAAKwE,YAAYD,GAC7BE,SAAU,mBACWzE,EAAKuE,UA6BhC,MApCkClB,GAAAc,EAAAf,GAUhCe,EAAAxC,UAAAyL,WAAA,WACEhK,EAAAzB,UAAMyL,WAAUnO,KAAAhB,MAEhBA,KAAKyF,OAA4BzF,KAAKsG,OAAQ8I,IAC9C,IAAIvN,GAAU7B,KAAKiN,eACnBpL,GAAQmC,GAAG,QAAS,WACdnC,EAAQwN,KAAK,QACfxP,OAAOyP,KAAKzN,EAAQwN,KAAK,OAAQ,aASvCnJ,EAAAxC,UAAA6L,OAAA,WACE,MAAOvP,MAAKiN,gBAAgBoC,KAAK,QAGnCnJ,EAAAxC,UAAA+B,OAAA,SAAO2J,OACOI,KAARJ,GAA4B,MAAPA,IACvBA,EAAM,IAERpP,KAAKiN,gBAAgBoC,KAAK,MAAOD,IAErClJ,GApCkCoB,EAAAc,OAArB5I,GAAA0G,aAAAA,0cCfb,IAAAoB,GAAA3G,EAAA,YAkBA8O,EAAA,SAAAtK,GAEE,QAAAsK,GAAYnJ,GAAZ,GAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAKuE,OAASvE,EAAKwE,YAAYD,GAC7BE,SAAU,iBACVC,KAAM,SACgB1E,EAAKuE,UAYjC,MApBiClB,GAAAqK,EAAAtK,GAW/BsK,EAAA/L,UAAA2B,UAAA,SAAUzD,EAAmBE,GAC3BqD,EAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,EAExB,IAAIwE,GAAStG,KAAKuE,WAElBvE,MAAKgG,QAAQpC,UAAU,WACrB0C,EAAOoJ,OAAOzH,UAGpBwH,GApBiCnI,EAAAc,OAApB5I,GAAAiQ,YAAAA,qGClBb,IAAAE,GAAAhP,EAAA,WACAwL,EAAAxL,EAAA,UACAyL,EAAAzL,EAAA,sBA2DAkK,EAAA,WA8GE,QAAAA,GAAYvE,OAAA,KAAAA,IAAAA,MAbJtG,KAAA4P,iBACNC,OAAQ,GAAIzD,GAAAE,gBACZwD,OAAQ,GAAI1D,GAAAE,gBACZyD,eAAgB,GAAI3D,GAAAE,gBACpB0D,UAAW,GAAI5D,GAAAE,gBACf2D,WAAY,GAAI7D,GAAAE,iBAUhBtM,KAAKsG,OAAiBtG,KAAKuG,YAAYD,GACrCwE,IAAK,MACLxI,GAAI,YAAAqN,EAAmBO,KAAAC,OACvBC,UAAW,QACX5J,SAAU,eACV2C,cACA4B,QAAQ,EACRsF,UAAU,OAuUhB,MA3TExF,GAAAnH,UAAAyL,WAAA,WACEnP,KAAK+K,OAAS/K,KAAKsG,OAAOyE,OAC1B/K,KAAKqQ,SAAWrQ,KAAKsG,OAAO+J,SAGxBrQ,KAAKsQ,aACPtQ,KAAK+K,QAAS,EACd/K,KAAKiI,QAIHjI,KAAKuQ,eACPvQ,KAAKqQ,UAAW,EAChBrQ,KAAK8H,YAeT+C,EAAAnH,UAAA2B,UAAA,SAAUzD,EAAmBE,GAA7B,GAAAC,GAAA/B,IACEA,MAAK6P,OAAOjM,UAAU,WACpB9B,EAAU0O,gBAAgBrD,SAASpL,KAErC/B,KAAK8P,OAAOlM,UAAU,WACpB9B,EAAU2O,gBAAgBtD,SAASpL,KAIrC/B,KAAKiN,gBAAgBjJ,GAAG,aAAc,WACpCjC,EAAK2O,qBAAoB,KAE3B1Q,KAAKiN,gBAAgBjJ,GAAG,aAAc,WACpCjC,EAAK2O,qBAAoB,MAW7B7F,EAAAnH,UAAAuL,QAAA,aASUpE,EAAAnH,UAAA6I,aAAV,WAME,MALc,IAAIJ,GAAAM,IAAIzM,KAAKsG,OAAOwE,KAChCxI,GAAMtC,KAAKsG,OAAOhE,GAClBqK,MAAS3M,KAAK4M,mBAalB/B,EAAAnH,UAAAuJ,cAAA,WAKE,MAJKjN,MAAK6B,UACR7B,KAAK6B,QAAU7B,KAAKuM,gBAGfvM,KAAK6B,SAWJgJ,EAAAnH,UAAA6C,YAAV,SAA8BD,EAAgBqK,EAAkBC,GAK9D,MAHajM,QAAOkM,UAAWD,EAAMD,EAAUrK,IAWvCuE,EAAAnH,UAAAkJ,cAAV,WAAA,GAAA7K,GAAA/B,KAEM8Q,GAAkB9Q,KAAKsG,OAAOE,UAAUuK,OAAO/Q,KAAKsG,OAAO6C,WAQ/D,OANA2H,GAAiBA,EAAevN,IAAI,SAACyN,GACnC,MAAOjP,GAAK+K,UAAUkE,KAGFF,EAAeG,KAAK,KAEnBC,QAGfrG,EAAAnH,UAAAoJ,UAAV,SAAoBqE,GAClB,MAAOnR,MAAKsG,OAAO8J,UAAY,IAAMe,GAOhCtG,EAAAnH,UAAAa,UAAP,WACE,MAAOvE,MAAKsG,QAOduE,EAAAnH,UAAAuE,KAAA,WACOjI,KAAK+K,SACR/K,KAAK+K,QAAS,EACd/K,KAAKiN,gBAAgBmE,SAASpR,KAAK8M,UAAUjC,EAAUwG,eACvDrR,KAAKsR,gBAOTzG,EAAAnH,UAAAkE,KAAA,WACM5H,KAAK+K,SACP/K,KAAKiN,gBAAgBsE,YAAYvR,KAAK8M,UAAUjC,EAAUwG,eAC1DrR,KAAK+K,QAAS,EACd/K,KAAKwR,gBAQT3G,EAAAnH,UAAA4M,SAAA,WACE,MAAOtQ,MAAK+K,QAOdF,EAAAnH,UAAA+N,QAAA,WACE,OAAQzR,KAAKsQ,YAMfzF,EAAAnH,UAAAgO,aAAA,WACM1R,KAAKsQ,WACPtQ,KAAK4H,OAEL5H,KAAKiI,QAST4C,EAAAnH,UAAAoE,QAAA,WACO9H,KAAKqQ,WACRrQ,KAAKqQ,UAAW,EAChBrQ,KAAKiN,gBAAgBmE,SAASpR,KAAK8M,UAAUjC,EAAU8G,iBACvD3R,KAAK4R,oBAST/G,EAAAnH,UAAAqE,OAAA,WACM/H,KAAKqQ,WACPrQ,KAAKiN,gBAAgBsE,YAAYvR,KAAK8M,UAAUjC,EAAU8G,iBAC1D3R,KAAKqQ,UAAW,EAChBrQ,KAAK6R,mBAQThH,EAAAnH,UAAA6M,WAAA,WACE,MAAOvQ,MAAKqQ,UAOdxF,EAAAnH,UAAAoO,UAAA,WACE,OAAQ9R,KAAKuQ,cAOf1F,EAAAnH,UAAAqO,UAAA,WACE,MAAO/R,MAAKgS,SAOJnH,EAAAnH,UAAA8N,YAAV,WACExR,KAAK4P,gBAAgBC,OAAO1C,SAASnN,OAO7B6K,EAAAnH,UAAA4N,YAAV,WACEtR,KAAK4P,gBAAgBE,OAAO3C,SAASnN,OAO7B6K,EAAAnH,UAAAmO,eAAV,WACE7R,KAAK4P,gBAAgBI,UAAU7C,SAASnN,OAOhC6K,EAAAnH,UAAAkO,gBAAV,WACE5R,KAAK4P,gBAAgBK,WAAW9C,SAASnN,OAOjC6K,EAAAnH,UAAAgN,oBAAV,SAA8BsB,GAC5BhS,KAAKgS,QAAUA,EACfhS,KAAK4P,gBAAgBG,eAAe5C,SAASnN,MAAQgS,QAASA,KAQhErN,OAAAC,eAAIiG,EAAAnH,UAAA,cAAJ,WACE,MAAO1D,MAAK4P,gBAAgBC,OAAOzC,4CAQrCzI,OAAAC,eAAIiG,EAAAnH,UAAA,cAAJ,WACE,MAAO1D,MAAK4P,gBAAgBE,OAAO1C,4CAQrCzI,OAAAC,eAAIiG,EAAAnH,UAAA,iBAAJ,WACE,MAAO1D,MAAK4P,gBAAgBI,UAAU5C,4CAQxCzI,OAAAC,eAAIiG,EAAAnH,UAAA,kBAAJ,WACE,MAAO1D,MAAK4P,gBAAgBK,WAAW7C,4CAOzCzI,OAAAC,eAAIiG,EAAAnH,UAAA,sBAAJ,WACE,MAAO1D,MAAK4P,gBAAgBG,eAAe3C,4CAtbrBvC,EAAAwG,aAAe,SAMfxG,EAAA8G,eAAiB,WAkb3C9G,IA9barL,GAAAqL,UAAAA,6eC7Db,IAAAJ,GAAA9J,EAAA,eACAwL,EAAAxL,EAAA,UACAsR,EAAAtR,EAAA,iBA+BAuL,EAAA,SAAA/G,GASE,QAAA+G,GAAY5F,GAAZ,GAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAKuE,OAASvE,EAAKwE,YAAYD,GAC7BE,SAAU,eACVwE,eACWjJ,EAAKuE,QAElBvE,EAAKmQ,mBACLnQ,EAAKoQ,wBAsFT,MAxG+D/M,GAAA8G,EAAA/G,GAyB7D+G,EAAAxI,UAAA0O,aAAA,SAAaC,GACXrS,KAAKsG,OAAO0E,WAAWsH,KAAKD,GAC5BrS,KAAKkS,gBAAgBI,KAAKD,IAQ5BnG,EAAAxI,UAAA6O,gBAAA,SAAgBF,GACd,MAA4D,OAAxDJ,EAAA9Q,WAAWC,OAAOpB,KAAKsG,OAAO0E,WAAYqH,KAC5CrS,KAAKmS,mBAAmBG,KAAKD,IACtB,IAUXnG,EAAAxI,UAAA8O,cAAA,WACE,MAAOxS,MAAKsG,OAAO0E,YAMrBkB,EAAAxI,UAAA+O,iBAAA,WACE,IAAsB,GAAA/I,GAAA,EAAAgJ,EAAA1S,KAAKwS,gBAAgBG,QAArBjJ,EAAAgJ,EAAAzR,OAAAyI,IAA8B,CAA/C,GAAI2I,GAASK,EAAAhJ,EAChB1J,MAAKuS,gBAAgBF,KAOfnG,EAAAxI,UAAAkP,iBAAV,WASE,IAFA,GAAIP,GAEGA,EAAYrS,KAAKmS,mBAAmBU,SACzCR,EAAUpF,gBAAgB7L,QAG5B,MAAOiR,EAAYrS,KAAKkS,gBAAgBW,SACtC7S,KAAK8S,sBAAsBjG,OAAOwF,EAAUpF,kBAItCf,EAAAxI,UAAA6I,aAAV,WAEE,GAAIwG,GAAmB,GAAI5G,GAAAM,IAAIzM,KAAKsG,OAAOwE,KACzCxI,GAAMtC,KAAKsG,OAAOhE,GAClBqK,MAAS3M,KAAK4M,kBAIZoG,EAAiB,GAAI7G,GAAAM,IAAIzM,KAAKsG,OAAOwE,KACvC6B,MAAS3M,KAAK8M,UAAU,sBAE1B9M,MAAK8S,sBAAwBE,CAE7B,KAA6B,GAAAtJ,GAAA,EAAAgJ,EAAA1S,KAAKsG,OAAO0E,WAAZtB,EAAAgJ,EAAAzR,OAAAyI,IAAwB,CAAhD,GAAIuJ,GAAgBP,EAAAhJ,EACvB1J,MAAKkS,gBAAgBI,KAAKW,GAM5B,MAJAjT,MAAK4S,mBAELG,EAAiBlG,OAAOmG,GAEjBD,GAEX7G,GAxG+DzB,EAAAI,UAAlDrL,GAAA0M,UAAAA,2eCjCb,IAAA1B,GAAA7J,EAAA,eAiBAuS,EAAA,SAAA/N,GAEE,QAAA+N,GAAY5M,GAAZ,GAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAKuE,OAASvE,EAAKwE,YAAYD,GAC7BE,SAAU,gBACVuE,QAAQ,GACWhJ,EAAKuE,UAc9B,MAtBgClB,GAAA8N,EAAA/N,GAW9B+N,EAAAxP,UAAA2B,UAAA,SAAUzD,EAAmBE,GAA7B,GAAAC,GAAA/B,IACEmF,GAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,GAExBA,EAAU8M,eAAehL,UAAU,WACjC7B,EAAK6F,SAGP9F,EAAU0M,eAAe5K,UAAU,WACjC7B,EAAKkG,UAGXiL,GAtBgC1I,EAAA0B,UAAnB1M,GAAA0T,WAAAA,6cCjBb,IAAA1I,GAAA7J,EAAA,eACAwF,EAAAxF,EAAA,WAEAwS,EAAAxS,EAAA,mBACAyS,EAAAzS,EAAA,iBA2EA0S,EAAA,SAAAlO,GAKE,QAAAkO,GAAY/M,OAAA,KAAAA,IAAAA,KAAZ,IAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAKuR,WAAa,GAAInN,GAAAkB,OAAqBb,SAAU,0BACrDzE,EAAKwR,kBAAoB,GAAIJ,GAAAK,cAE7BzR,EAAKuE,OAASvE,EAAKwE,YAAYD,GAC7BE,SAAU,0BACVwE,YAAajJ,EAAKwR,kBAAmBxR,EAAKuR,YAC1CvI,QAAQ,GACPhJ,EAAKuE,UAkDZ,MAjEyClB,GAAAiO,EAAAlO,GAkBvCkO,EAAA3P,UAAA2B,UAAA,SAAUzD,EAAmBE,GAA7B,GAAAC,GAAA/B,IACEmF,GAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,EAExB,IAAIwE,GAAStG,KAAKuE,WAElB3C,GAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYpD,MAAO,SAACoB,GAC3C,GAAIgF,GAAUmM,EAAAK,WAAWC,8BAA8BzR,GAGnD0R,EAAgB7R,EAAUyC,YAAYoP,eAAiBrN,EAAOsN,QAElE,IAAID,EACF,GAA6B,kBAAlBA,GAET1M,EAAU0M,EAAc1R,OACnB,IAAI0R,EAAc1R,EAAMnB,MAAO,CAEpC,GAAI+S,GAAgBF,EAAc1R,EAAMnB,KAGtCmG,GAD2B,gBAAlB4M,GACCA,EAGAA,EAAc5R,GAK9BF,EAAKuR,WAAW3M,QAAQM,GACxBlF,EAAKwR,kBAAkBlI,QACvBtJ,EAAK6F,SAGPhG,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY6P,aAAc,SAAC7R,GAC9CF,EAAK0P,YACP1P,EAAKwR,kBAAkBQ,OACvBhS,EAAKkG,WAKXoL,EAAA3P,UAAAuL,QAAA,WACE9J,EAAAzB,UAAMuL,QAAOjO,KAAAhB,MAGbA,KAAKuT,kBAAkBQ,QAE3BV,GAjEyC7I,EAAA0B,UAA5B1M,GAAA6T,oBAAAA,kgBC/Eb,IAAAhL,GAAA1H,EAAA,kBAGAe,EAAAf,EAAA,wBAKAqT,EAAA,SAAA7O,GAEE,QAAA6O,GAAY1N,OAAA,KAAAA,IAAAA,KAAZ,IAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAKuE,OAASvE,EAAKwE,YAAYD,GAC7BE,SAAU,4BACVC,KAAM/E,EAAAc,KAAKC,aAAa,eACvBV,EAAKuE,UA2BZ,MAnC4ClB,GAAA4O,EAAA7O,GAW1C6O,EAAAtQ,UAAA2B,UAAA,SAAUzD,EAAmBE,GAA7B,GAAAC,GAAA/B,IACEmF,GAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,EAExB,IAAImS,GAAyB,WACvBrS,EAAOsS,gBAAkBtS,EAAOpC,QAAQ2U,SAASC,WACnDrS,EAAKiC,KAELjC,EAAKqF,MAITxF,GAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYoQ,gBAAiBJ,GAEtDjU,KAAKgG,QAAQpC,UAAU,WACjBhC,EAAOsS,gBAAkBtS,EAAOpC,QAAQ2U,SAASC,WACnDxS,EAAO0S,YAAY1S,EAAOpC,QAAQ2U,SAASI,QAE3C3S,EAAO0S,YAAY1S,EAAOpC,QAAQ2U,SAASC,cAK/CH,KAEJD,GAnC4C3L,EAAAW,aAA/BxJ,GAAAwU,uBAAAA,0eCPb,IAAAQ,GAAA7T,EAAA,0BACAwL,EAAAxL,EAAA,UAGAe,EAAAf,EAAA,wBAKA8T,EAAA,SAAAtP,GAEE,QAAAsP,GAAYnO,OAAA,KAAAA,IAAAA,KAAZ,IAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAKuE,OAASvE,EAAKwE,YAAYD,GAC7BE,SAAU,8BACVC,KAAM/E,EAAAc,KAAKC,aAAa,cACvBV,EAAKuE,UA6JZ,MArK8ClB,GAAAqP,EAAAtP,GAW5CsP,EAAA/Q,UAAA2B,UAAA,SAAUzD,EAAmBE,GAA7B,GAAAC,GAAA/B,IAEEmF,GAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,GAAW,EAEnC,IAAI4S,GAAiB,WACf9S,EAAOoN,aAAejN,EAAK4S,gBAC7B/S,EAAOqE,MAAM,MAEbrE,EAAOgT,KAAK,OAIZC,EAAmB,WACjBjT,EAAOsS,gBAAkBtS,EAAOpC,QAAQ2U,SAASC,WACnDxS,EAAO0S,YAAY1S,EAAOpC,QAAQ2U,SAASI,QAE3C3S,EAAO0S,YAAY1S,EAAOpC,QAAQ2U,SAASC,aAI3CU,GAAY,EACZC,EAAY,EACZC,EAAkB,CAkBtBhV,MAAKgG,QAAQpC,UAAU,WAKrB,GAAIkR,EAMF,WADAJ,IAIF,IAAIO,GAAMC,KAAKD,KAEf,OAAIA,GAAMF,EAAY,KAEpBF,SACAG,EAAkBC,IAETA,EAAMF,EAAY,KAE3BF,IACAH,SACAM,EAAkBC,KAIpBF,EAAYE,MAEZE,YAAW,WACLD,KAAKD,MAAQD,EAAkB,KAEjCN,KAED,QAGL9S,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYyH,KAAM,WAEzCoJ,GAAY,IAGdlT,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYmR,QAAS,SAACnT,GACzCA,EAAMnB,OAASc,EAAOpC,QAAQ6V,YAAYC,gCAE5CR,GAAY,IAIhB,IAAMS,GAAwC,WAE5CxT,EAAKyT,gCAA+B,GAGpCzT,EAAK0T,SAASC,cAAc,WAC1B3T,EAAKyT,gCAA+B,KAKxCD,IAEA,IAAMI,GAAoB/T,EAAO2C,YAAYqR,UAAYC,QAAQjU,EAAO2C,YAAYqR,SAASE,UAIvFC,GAAsBnU,EAAOoU,aAAeL,GAG9C/T,EAAOoN,aAAe+G,KAExB/V,KAAKgE,KAELuR,IAGA3T,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYmR,QAAS,SAACnT,GACzCA,EAAMnB,OAASc,EAAOpC,QAAQ6V,YAAYC,+BAC5CC,QAMEd,EAAA/Q,UAAA6I,aAAV,WACE,GAAIC,GAAgBrH,EAAAzB,UAAM6I,aAAYvL,KAAAhB,KAUtC,OAJAwM,GAAcK,OAAO,GAAIV,GAAAM,IAAI,OAC3BE,MAAS3M,KAAK8M,UAAU,YAGnBN,GAQCiI,EAAA/Q,UAAA8R,+BAAV,SAAyCS,GACvC,GAAMC,GAA8BlW,KAAK8M,UAAU;gDAE/CmJ,GACFjW,KAAKiN,gBAAgBsE,YAAY2E,GACvBlW,KAAKiN,gBAAgBkJ,SAASD,IACxClW,KAAKiN,gBAAgBmE,SAAS8E,IAGpCzB,GArK8CD,EAAA4B,qBAAjC5W,GAAAiV,yBAAAA,8fCVb,IAAAnN,GAAA3G,EAAA,YACAwL,EAAAxL,EAAA,UAGAe,EAAAf,EAAA,wBAKA0V,EAAA,SAAAlR,GAEE,QAAAkR,GAAY/P,OAAA,KAAAA,IAAAA,KAAZ,IAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAKuE,OAASvE,EAAKwE,YAAYD,GAC7BE,SAAU,sBACVC,KAAM/E,EAAAc,KAAKC,aAAa,WACvBV,EAAKuE,UAwBZ,MAhCsClB,GAAAiR,EAAAlR,GAWpCkR,EAAA3S,UAAA2B,UAAA,SAAUzD,EAAmBE,GAC3BqD,EAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,GAExB9B,KAAKgG,QAAQpC,UAAU,WACrBhC,EAAOgT,KAAK,SAINyB,EAAA3S,UAAA6I,aAAV,WACE,GAAIC,GAAgBrH,EAAAzB,UAAM6I,aAAYvL,KAAAhB,KAUtC,OAJAwM,GAAcK,OAAO,GAAIV,GAAAM,IAAI,OAC3BE,MAAS3M,KAAK8M,UAAU,YAGnBN,GAEX6J,GAhCsC/O,EAAAc,OAAzB5I,GAAA6W,iBAAAA,gfCTb,IAAAC,GAAA3V,EAAA,kBACAwL,EAAAxL,EAAA,UACAe,EAAAf,EAAA,wBAEA4V,EAAA,SAAApR,GAME,QAAAoR,GAAYjQ,OAAA,KAAAA,IAAAA,KAAZ,IAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAKuE,OAASvE,EAAKwE,YAAYD,GAC7BwE,IAAK,KACLtE,SAAU,wBACTzE,EAAKuE,UAwFZ,MApGuClB,GAAAmR,EAAApR,GAe3BoR,EAAA7S,UAAA8S,SAAV,WACE,MAAOxW,MAAKyW,MAAMxV,OAAS,GAGnBsV,EAAA7S,UAAA6I,aAAV,WACE,GAAInK,GAAc,GAAI+J,GAAAM,IAAI,MACxBnK,GAAMtC,KAAKsG,OAAOhE,GAClBqK,MAAS3M,KAAK4M,iBAMhB,OAHA5M,MAAKoC,YAAcA,EACnBpC,KAAK0W,iBAEEtU,GAGCmU,EAAA7S,UAAAgT,eAAV,SAAyBC,GAAzB,GAAA5U,GAAA/B,SAAyB,KAAA2W,IAAAA,EAAA,MAEvB3W,KAAKoC,YAAYwU,OAYjB,KAAiB,GAVbC,GAAwB,KAEtB7T,EAAa,SAAC8T,GAClBA,EAAS1F,SAASrP,EAAK+K,UAAUyJ,EAAkBQ,kBAG/CC,EAAe,SAACF,GACpBA,EAASvF,YAAYxP,EAAK+K,UAAUyJ,EAAkBQ,yBAGvCrN,EAAA,EAAAgJ,EAAA1S,KAAKyW,MAAL/M,EAAAgJ,EAAAzR,OAAAyI,IAAU,CAAtB,GAAIpI,GAAIoR,EAAAhJ,aAAJpI,GACP,GAAIwV,GAAW,GAAI3K,GAAAM,IAAI,MACrBC,KAAQ,KACRC,MAASsK,EAAKnK,UAAU,0BACvBD,OAAO,GAAIV,GAAAM,IAAI,QACfM,KAAKrL,EAAAc,KAAKsE,oBAAoBxF,EAAKoB,QAEjCmU,KACkB,MAAjBF,EACFE,EAAmBC,EACVI,OAAOP,KAAmBrV,EAAK+B,MACxCwT,EAAmBC,IAKvBA,EAAS9S,GAAG,QAAS,WAEf6S,GACFG,EAAaH,GAIfA,EAAmBC,EACnB9T,EAAW8T,GAGX/U,EAAKoV,oBAAoB7V,EAAK+B,KAAK,KAIjCwT,GACF7T,EAAW6T,GAGbI,EAAK7U,YAAYyK,OAAOiK,IAnCjBxV,KAuCDiV,EAAA7S,UAAA0T,iBAAV,SAA2BtT,GACzBqB,EAAAzB,UAAM0T,iBAAgBpW,KAAAhB,KAAC8D,GACvB9D,KAAK0W,eAAe1W,KAAKqX,eAGjBd,EAAA7S,UAAA4T,mBAAV,SAA6BxT,GAC3BqB,EAAAzB,UAAM4T,mBAAkBtW,KAAAhB,KAAC8D,GACzB9D,KAAK0W,eAAe1W,KAAKqX,eAGjBd,EAAA7S,UAAAyT,oBAAV,SAA8BrT,EAAe4S,OAAA,KAAAA,IAAAA,GAAA,GAC3CvR,EAAAzB,UAAMyT,oBAAmBnW,KAAAhB,KAAC8D,GACtB4S,GACF1W,KAAK0W,eAAe5S,IA/FAyS,EAAAQ,eAAiB,WAkG3CR,GApGuCD,EAAAiB,aAA1B/X,GAAA+W,kBAAAA,sfCJb,IAAA9L,GAAA9J,EAAA,eACAwL,EAAAxL,EAAA,UACAyL,EAAAzL,EAAA,sBACAe,EAAAf,EAAA,wBAoBA0G,EAAA,SAAAlC,GASE,QAAAkC,GAAYf,OAAA,KAAAA,IAAAA,KAAZ,IAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WANP+B,GAAAyV,aACNxR,QAAS,GAAIoG,GAAAE,gBACbmL,cAAe,GAAIrL,GAAAE,iBAMnBvK,EAAKuE,OAASvE,EAAKwE,YAAYD,GAC7BE,SAAU,YACCzE,EAAKuE,QAClBvE,EAAK0E,KAAO1E,EAAKuE,OAAOG,OAwF5B,MAvGuDrB,GAAAiC,EAAAlC,GAkB3CkC,EAAA3D,UAAA6I,aAAV,WAAA,GAAAxK,GAAA/B,KACM0X,EAAe,GAAIvL,GAAAM,IAAI,QACzBnK,GAAMtC,KAAKsG,OAAOhE,GAClBqK,MAAS3M,KAAK4M,kBACbG,KAAKrL,EAAAc,KAAKsE,oBAAoB9G,KAAKyG,MAMtC,OAJAiR,GAAa1T,GAAG,QAAS,WACvBjC,EAAKiL,iBAGA0K,GAOTrQ,EAAA3D,UAAAiD,QAAA,SAAQF,GACN,GAAIA,IAASzG,KAAKyG,KAAlB,CAIAzG,KAAKyG,KAAOA,CACZ,IAAMkR,GAAgBjW,EAAAc,KAAKsE,oBAAoBL,EAC/CzG,MAAKiN,gBAAgBF,KAAK4K,GAC1B3X,KAAK4X,mBAAmBD,KAO1BtQ,EAAA3D,UAAAmU,QAAA,WACE,MAAOnW,GAAAc,KAAKsE,oBAAoB9G,KAAKyG,OAMvCY,EAAA3D,UAAAoU,UAAA,WACE9X,KAAKiN,gBAAgBF,KAAK,IAC1B/M,KAAK4X,mBAAmB,OAO1BvQ,EAAA3D,UAAAqU,QAAA,WACE,OAAQ/X,KAAKyG,MAQLY,EAAA3D,UAAAsJ,aAAV,WACEhN,KAAKwX,YAAYxR,QAAQmH,SAASnN,OAQ1BqH,EAAA3D,UAAAkU,mBAAV,SAA6BnR,GAC3BzG,KAAKwX,YAAYC,cAActK,SAASnN,KAAMyG,IAOhD9B,OAAAC,eAAIyC,EAAA3D,UAAA,eAAJ,WACE,MAAO1D,MAAKwX,YAAYxR,QAAQoH,4CAOlCzI,OAAAC,eAAIyC,EAAA3D,UAAA,qBAAJ,WACE,MAAO1D,MAAKwX,YAAYC,cAAcrK,4CAE1C/F,GAvGuDoD,EAAAI,UAA1CrL,GAAA6H,MAAAA,2gBCvBb,IAAAgB,GAAA1H,EAAA,kBACA2V,EAAA3V,EAAA,kBACAwL,EAAAxL,EAAA,UAGAsR,EAAAtR,EAAA,iBAgBA2J,EAAA,SAAAnF,GAIE,QAAAmF,GAAYhE,OAAA,KAAAA,IAAAA,KAAZ,IAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAHP+B,GAAAiJ,cA2CAjJ,EAAAiW,qBAAuB,SAACnU,EAAYR,GAC1C,GAAMgP,GAAYtQ,EAAKkW,mBAAmB5U,EACtCgP,KACFA,EAAUpF,gBAAgB7L,SAC1B6Q,EAAA9Q,WAAWC,OAAOW,EAAKiJ,WAAYqH,KAI/BtQ,EAAAmW,kBAAoB,SAACrU,EAAYR,GACvC,GAAMgP,GAAYtQ,EAAKkW,mBAAmB5U,GACpC8U,EAAUpW,EAAKqW,cAAc/U,EACnC,IAAIgP,EAEFA,EAAU1L,QAAQwR,EAAQzV,WACrB,CACL,GAAM2V,GAAoBtW,EAAKuW,uBAAuBH,EAEtDE,GAAkBrS,QAAQpC,UAAU,WAClC7B,EAAKwW,sBAAsBF,KAG7BtW,EAAKiJ,WAAWsH,KAAK+F,GACrBtW,EAAKyW,eAAe3L,OAAOwL,EAAkBpL,mBAIzClL,EAAA0W,oBAAsB,WAO5B,IAAiB,GAAA/O,GAAA,EAAAgJ,EAAA3Q,EAAK0U,MAAL/M,EAAAgJ,EAAAzR,OAAAyI,IAAY,CAAxB,GAAIpI,GAAIoR,EAAAhJ,GACL2I,EAAYtQ,EAAKkW,mBAAmB3W,EAAK+B,IAC3CgP,KACF6E,OAAO7E,EAAUhP,OAAS6T,OAAOnV,EAAKsV,cAAgBhF,EAAUrO,KAAOqO,EAAUjL,SAgB/ErF,EAAAwW,sBAAwB,SAAC1O,GAC/B9H,EAAKoV,oBAAoBtN,EAAOxG,MA3FhCtB,EAAKuE,OAASvE,EAAKwE,YAAYD,GAC7BE,SAAU,cACazE,EAAKuE,UA2FlC,MApG6BlB,GAAAkF,EAAAnF,GAYpBmF,EAAA5G,UAAA2B,UAAP,SAAiBzD,EAAmBE,GAElC9B,KAAK0Y,YAAY9U,UAAU5D,KAAKkY,mBAChClY,KAAK2Y,cAAc/U,UAAU5D,KAAKgY,sBAClChY,KAAK2D,eAAeC,UAAU5D,KAAKyY,qBAEnCtT,EAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,IAGhBwI,EAAA5G,UAAA6I,aAAV,WACE,GAAIiM,GAAiB,GAAIrM,GAAAM,IAAI,OAC3BnK,GAAMtC,KAAKsG,OAAOhE,GAClBqK,MAAS3M,KAAK4M,iBAOhB,OAJA5M,MAAKwY,eAAiBA,EACtBxY,KAAK4Y,wBACL5Y,KAAKyY,sBAEED,GAGDlO,EAAA5G,UAAAkV,sBAAR,WAEE5Y,KAAKwY,eAAe5B,QACpB5W,KAAKgL,aAGL,KAAiB,GAAAtB,GAAA,EAAAgJ,EAAA1S,KAAKyW,MAAL/M,EAAAgJ,EAAAzR,OAAAyI,IAAY,CAAxB,GAAIpI,GAAIoR,EAAAhJ,EACX1J,MAAKkY,kBAAkBlY,KAAMsB,EAAK+B,OA6C9BiH,EAAA5G,UAAA4U,uBAAR,SAA+BxB,GAC7B,MAAO,IAAI+B,IACTxV,IAAKyT,EAASzT,IACdoD,KAAMqQ,EAASpU,SAIX4H,EAAA5G,UAAAuU,mBAAR,SAA2B5U,GACzB,MAAOrD,MAAKgL,WAAWkC,KAAK,SAAC4L,GAAM,MAAAzV,KAAQyV,EAAEzV,OAMjDiH,GApG6BgM,EAAAiB,aAAhB/X,GAAA8K,QAAAA,CA6Gb,IAAAuO,GAAA,SAAA1T,GAEE,QAAA0T,GAAYvS,GAAZ,GAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAKuE,OAASvE,EAAKwE,YAAYD,GAC7BE,SAAU,oBACVuS,QAAS,WACTC,SAAU,IACkBjX,EAAKuE,UAMvC,MAfgClB,GAAAyT,EAAA1T,GAY9BR,OAAAC,eAAIiU,EAAAnV,UAAA,WAAJ,WACE,MAAQ1D,MAAKsG,OAAmCjD,qCAEpDwV,GAfgCxQ,EAAAW,8gBClIhC,IAAAyB,GAAA9J,EAAA,eACAyL,EAAAzL,EAAA,sBACAsR,EAAAtR,EAAA,iBACAe,EAAAf,EAAA,wBAiDA4W,EAAA,SAAApS,GAWE,QAAAoS,GAAYjR,OAAA,KAAAA,IAAAA,KAAZ,IAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAPP+B,GAAAkX,oBACNP,YAAa,GAAItM,GAAAE,gBACjBqM,cAAe,GAAIvM,GAAAE,gBACnB3I,eAAgB,GAAIyI,GAAAE,iBAMpBvK,EAAKuE,OAASvE,EAAKwE,YAAYD,GAC7BmQ,SACAjQ,SAAU,mBACTzE,EAAKuE,QAERvE,EAAK0U,MAAQ1U,EAAKuE,OAAOmQ,QA2L7B,MA9M8ErR,GAAAmS,EAAApS,GAsBpEoS,EAAA7T,UAAAwV,aAAR,SAAqB7V,GACnB,IAAK,GAAI9B,KAASvB,MAAKyW,MACrB,GAAIpT,IAAQrD,KAAKyW,MAAMlV,GAAO8B,IAC5B,MAAO8V,UAAS5X,EAGpB,QAAQ,GAOVgW,EAAA7T,UAAA0V,SAAA,WACE,MAAOpZ,MAAKyW,OAQdc,EAAA7T,UAAArB,QAAA,SAAQgB,GACN,MAAOrD,MAAKkZ,aAAa7V,IAAQ,GASnCkU,EAAA7T,UAAAnB,QAAA,SAAQc,EAAaX,GACnB,GAAMoU,IAAazT,IAAKA,EAAKX,MAAOhB,EAAAc,KAAKsE,oBAAoBpE,GAGzD1C,MAAKsG,OAAO+S,SAAWrZ,KAAKsG,OAAO+S,OAAOvC,KAK1C9W,KAAKsG,OAAOgT,aACdxC,EAASpU,MAAQ1C,KAAKsG,OAAOgT,WAAWxC,IAI1C9W,KAAK4C,WAAWS,GAEhBrD,KAAKyW,MAAMnE,KAAKwE,GAChB9W,KAAKoX,iBAAiB/T,KAQxBkU,EAAA7T,UAAAd,WAAA,SAAWS,GACT,GAAI9B,GAAQvB,KAAKkZ,aAAa7V,EAC9B,OAAI9B,IAAS,IACX0Q,EAAA9Q,WAAWC,OAAOpB,KAAKyW,MAAOzW,KAAKyW,MAAMlV,IACzCvB,KAAKsX,mBAAmBjU,IACjB,IAWXkU,EAAA7T,UAAAV,WAAA,SAAWK,GACT,MAAIA,KAAQrD,KAAKqX,cAKLrX,KAAKkZ,aAAa7V,IAEjB,IACXrD,KAAKqX,aAAehU,EACpBrD,KAAKmX,oBAAoB9T,IAClB,IAUXkU,EAAA7T,UAAA6V,gBAAA,WACE,MAAOvZ,MAAKqX,cAQdE,EAAA7T,UAAA0U,cAAA,SAAc/U,GACZ,MAAOrD,MAAKyW,MAAMvJ,KAAK,SAAC5L,GAAS,MAAAA,GAAK+B,MAAQA,KAShDkU,EAAA7T,UAAAJ,iBAAA,SAAiBkW,GAAjB,GAAAzX,GAAA/B,IACEwZ,GACGH,OAAO,SAAC/X,GAAS,OAACS,EAAKM,QAAQf,EAAK+B,OACpCoW,QAAQ,SAACnY,GAAS,MAAAS,GAAKQ,QAAQjB,EAAK+B,IAAK/B,EAAKoB,SAEjD1C,KAAKyW,MACF4C,OAAO,SAAC/X,GAAS,MAAsD,KAAtDkY,EAASH,OAAO,SAACzY,GAAM,MAAAA,GAAEyC,MAAQ/B,EAAK+B,MAAKpC,SAC5DwY,QAAQ,SAACnY,GAAS,MAAAS,GAAKa,WAAWtB,EAAK+B,QAM5CkU,EAAA7T,UAAA+F,WAAA,WAEE,GAAIgN,GAAQzW,KAAKyW,KAEjBzW,MAAKyW,SAGLzW,KAAKqX,aAAe,IAGpB,KAAiB,GAAA3N,GAAA,EAAAgQ,EAAAjD,EAAA/M,EAAAgQ,EAAAzY,OAAAyI,IAAO,CAAnB,GAAIpI,GAAIoY,EAAAhQ,EACX1J,MAAKsX,mBAAmBhW,EAAK+B,OAQjCkU,EAAA7T,UAAAiW,UAAA,WACE,MAAOhV,QAAOiV,KAAK5Z,KAAKyW,OAAOxV,QAGvBsW,EAAA7T,UAAA0T,iBAAV,SAA2B/T,GACzBrD,KAAKiZ,mBAAmBP,YAAYvL,SAASnN,KAAMqD,IAG3CkU,EAAA7T,UAAA4T,mBAAV,SAA6BjU,GAC3BrD,KAAKiZ,mBAAmBN,cAAcxL,SAASnN,KAAMqD,IAG7CkU,EAAA7T,UAAAyT,oBAAV,SAA8B9T,GAC5BrD,KAAKiZ,mBAAmBtV,eAAewJ,SAASnN,KAAMqD,IAOxDsB,OAAAC,eAAI2S,EAAA7T,UAAA,mBAAJ,WACE,MAAO1D,MAAKiZ,mBAAmBP,YAAYtL,4CAO7CzI,OAAAC,eAAI2S,EAAA7T,UAAA,qBAAJ,WACE,MAAO1D,MAAKiZ,mBAAmBN,cAAcvL,4CAO/CzI,OAAAC,eAAI2S,EAAA7T,UAAA,sBAAJ,WACE,MAAO1D,MAAKiZ,mBAAmBtV,eAAeyJ,4CAElDmK,GA9M8E9M,EAAAI,UAAxDrL,GAAA+X,aAAAA,ihBCpDtB,IAOYsC,GAPZ1T,EAAAxF,EAAA,YAOA,SAAYkZ,GAIVA,EAAAA,EAAA,MAAA,GAAA,QAIAA,EAAAA,EAAA,YAAA,GAAA,eARUA,EAAAra,EAAAqa,uBAAAra,EAAAqa,yBAwBZ,IAAAC,GAAA,SAAA3U,GAEE,QAAA2U,GAAYxT,GAAZ,GAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAKuE,OAASvE,EAAKwE,YAAYD,GAC7B6C,YAAa,iBAAkB,kBAAoB0Q,EAAqBvT,EAAOyT,SAASC,gBAChEjY,EAAKuE,UA+BnC,MAtCmClB,GAAA0U,EAAA3U,GAUjC2U,EAAApW,UAAA2B,UAAA,SAAUzD,EAAmBE,GAA7B,GAAAC,GAAA/B,IACEmF,GAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,EAExB,IAAIwE,GAAStG,KAAKuE,YACd0V,EAAWnY,EAAUyC,YAErB2V,EAAO,WACT,OAAQ5T,EAAOyT,SACb,IAAKF,GAAqBM,MACxBpY,EAAK4E,QAAQsT,EAASG,SAASC,MAC/B,MACF,KAAKR,GAAqBS,YACxBvY,EAAK4E,QAAQsT,EAASG,SAASG,eAKjCC,EAAS,WACXzY,EAAK4E,QAAQ,MAIfuT,KAEAtY,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYE,eAAgBqW,GAErD1Y,EAAUyC,YAAYC,OAAOC,UAAUb,UAAUsW,IAErDJ,GAtCmC3T,EAAAkB,MAAtB7H,GAAAsa,cAAAA,ycC/Bb,IAAAzR,GAAA1H,EAAA,kBAGAe,EAAAf,EAAA,wBAKA8Z,EAAA,SAAAtV,GAEE,QAAAsV,GAAYnU,OAAA,KAAAA,IAAAA,KAAZ,IAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAKuE,OAASvE,EAAKwE,YAAYD,GAC7BE,SAAU,qBACVC,KAAM/E,EAAAc,KAAKC,aAAa,qBACvBV,EAAKuE,UA6CZ,MArDkDlB,GAAAqV,EAAAtV,GAWhDsV,EAAA/W,UAAA2B,UAAA,SAAUzD,EAAmBE,GAA7B,GAAAC,GAAA/B,IACEmF,GAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,GAExB9B,KAAKgG,QAAQpC,UAAU,WACjBhC,EAAO8Y,oBAAoB9Y,EAAOpC,QAAQ2U,SAASwG,kBACjD/Y,EAAOsS,gBAAkBtS,EAAOpC,QAAQ2U,SAASwG,iBACnD/Y,EAAO0S,YAAY1S,EAAOpC,QAAQ2U,SAASI,QAE3C3S,EAAO0S,YAAY1S,EAAOpC,QAAQ2U,SAASwG,kBAGzClS,SACFA,QAAQC,IAAI,oBAKlB,IAAIkS,GAAqB,WACnBhZ,EAAO8Y,oBAAoB9Y,EAAOpC,QAAQ2U,SAASwG,kBACrD5Y,EAAK6F,OAEL7F,EAAKkG,OAITnG,GAAUyC,YAAYC,OAAOC,UAAUb,UAAUgX,GAGjDhZ,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYoQ,gBAAiB,WAChDzS,EAAOsS,gBAAkBtS,EAAOpC,QAAQ2U,SAASwG,iBACnD5Y,EAAKiC,KAELjC,EAAKqF,QAKTwT,IACIhZ,EAAOsS,gBAAkBtS,EAAOpC,QAAQ2U,SAASwG,kBACnD3a,KAAKgE,MAGXyW,GArDkDpS,EAAAW,aAArCxJ,GAAAib,6BAAAA,0eCRb,IAAAxR,GAAAtI,EAAA,eAIAe,EAAAf,EAAA,wBAKAka,EAAA,SAAA1V,GAGE,QAAA0V,GAAYvU,OAAA,KAAAA,IAAAA,KAAZ,IAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WACb+B,GAAK+Y,uBAAyB,IAAM,GAAK,IAAM,EAAG,KAAM,IAAK,GAE7D/Y,EAAKuE,OAASvE,EAAKwE,YAAYD,GAC7B6C,YAAa,8BACZpH,EAAKuE,UA+CZ,MAxD4ClB,GAAAyV,EAAA1V,GAY1C0V,EAAAnX,UAAA2B,UAAA,SAAUzD,EAAmBE,GAA7B,GAAAC,GAAA/B,IACEmF,GAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,GAExB9B,KAAK+a,kBAEL/a,KAAK2D,eAAeC,UAAU,SAACiG,EAAgC/F,GAC7DlC,EAAOoZ,iBAAiBC,WAAWnX,IACnC/B,EAAKiB,WAAWc,IAGlB,IAAMoX,GAAkB,WACtB,GAAMC,GAAgBvZ,EAAOwZ,kBAC7BrZ,GAAKsZ,SAASF,GAGhBvZ,GAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYqX,qBAAsBJ,GAC3DpZ,EAAUyC,YAAYC,OAAOC,UAAUb,UAAUsX,IAGnDL,EAAAnX,UAAA2X,SAAA,SAASE,GACFvb,KAAKgD,WAAWkU,OAAOqE,MAE1Bvb,KAAKyJ,aACLzJ,KAAK+a,iBAAiBQ,IACtBvb,KAAKgD,WAAWkU,OAAOqE,MAI3BV,EAAAnX,UAAAqX,gBAAA,SAAgBS,GAAhB,GAAAzZ,GAAA/B,SAAgB,KAAAwb,IAAAA,MACOxb,KAAK8a,sBAAsB/J,OAAOyK,GAAaC,OAEvDhC,QAAQ,SAAA5X,GACH,IAAZA,EACFE,EAAKQ,QAAQ2U,OAAOrV,GAAaA,EAAO,KAExCE,EAAKQ,QAAQ2U,OAAOrV,GAAUH,EAAAc,KAAKC,aAAa,cAKtDoY,EAAAnX,UAAA+F,WAAA,WACEzJ,KAAKyW,SACLzW,KAAKqX,aAAe,MAExBwD,GAxD4C5R,EAAAiB,UAA/B1K,GAAAqb,uBAAAA,ueCTb,IAQYa,GARZvV,EAAAxF,EAAA,WAGAgb,EAAAhb,EAAA,kBACAyF,EAAAzF,EAAA,kBAEAe,EAAAf,EAAA,yBAEA,SAAY+a,GAIVA,EAAAA,EAAA,YAAA,GAAA,cAIAA,EAAAA,EAAA,UAAA,GAAA,YAKAA,EAAAA,EAAA,oBAAA,GAAA,sBAIAA,EAAAA,EAAA,cAAA,GAAA,iBAjBUA,EAAAlc,EAAAkc,wBAAAlc,EAAAkc,0BAoCZ,IAAAE,GAAA,SAAAzW,GAIE,QAAAyW,GAAYtV,OAAA,KAAAA,IAAAA,KAAZ,IAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAKuE,OAASvE,EAAKwE,YAAYD,GAC7BE,SAAU,uBACVqV,cAAeH,EAAsBI,oBACrCC,oBAAoB,GACnBha,EAAKuE,UA4IZ,MAvJuClB,GAAAwW,EAAAzW,GAcrCyW,EAAAlY,UAAA2B,UAAA,SAAUzD,EAAmBE,GAA7B,GAAAC,GAAA/B,IACEmF,GAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,EAExB,IAAIwE,GAAStG,KAAKuE,YACdyX,GAAO,EACPC,EAAejc,KAAK8M,UAAU,6BAC9BoP,EAAmBlc,KAAK8M,UAAU,kCAClCqP,EAAW,EAEXC,EAAmB,WACrBxa,EAAOya,UAAU,IAGfC,EAAkB,WAEpBN,EAAOpa,EAAO2a,SAGVP,GACFja,EAAKkL,gBAAgBmE,SAAS6K,GAC9Bla,EAAK4E,QAAQjF,EAAAc,KAAKC,aAAa,SAC3B6D,EAAOyV,oBACTha,EAAKkG,OAEPlG,EAAKiE,QAAQpC,UAAUwY,GACvBI,MAEAza,EAAKkL,gBAAgBsE,YAAY0K,GACjCla,EAAKkL,gBAAgBsE,YAAY2K,GACjCna,EAAK6F,OACL7F,EAAKiE,QAAQyW,YAAYL,KAIzBI,EAA2B,WAC7B,GAAKR,EAAL,CASA,GAAMU,GAAgB9a,EAAO+a,eAAiB,EACxCC,EAAuBhb,EAAOib,kBAAoB,CACnDH,IAAmB9a,EAAOkb,YAAeF,EAG5C7a,EAAKkL,gBAAgBsE,YAAY2K,GAFjCna,EAAKkL,gBAAgBmE,SAAS8K,KAM9Ba,EAAqB,GAAIpB,GAAAqB,YAAYC,mBAAmBrb,EAAQE,EACpEib,GAAmBG,cAActZ,UAAU,SAACiG,EAAQsT,GAClDnB,EAAOmB,EAAKnB,KACZM,MAEFS,EAAmBK,QAEnB,IAAIC,GAAsB,WACnBrB,GAAQpa,EAAO0b,gBAAkBC,EAAAA,GACpCxb,EAAKyb,QAAQ7B,EAAAqB,YAAYS,sCAAsC7b,GAASA,EAAO0b,cAKjF,IAAII,GAAQ3b,EAAKkL,gBAAgByQ,OAC7BA,GAAQvB,IACVA,EAAWuB,EACX3b,EAAKkL,gBAAgB+D,KACnB2M,YAAaxB,EAAW,QAK9Bva,GAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYiD,YAAamW,GAClDzb,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY6H,OAAQuR,GAE7Czb,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY8H,UAAWyQ,GAChD5a,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY+H,YAAawQ,GAClD5a,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY0H,QAAS6Q,GAC9C5a,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY2H,OAAQ4Q,EAE7C,IAAItC,GAAO,WAGTiC,EAAW,EACXpa,EAAKkL,gBAAgB+D,KACnB2M,YAAa,OAIf5b,EAAK6b,WAAaC,KAAKC,IAAIlc,EAAO2a,SAAW3a,EAAOib,kBAAoBjb,EAAO0b,gBAAkB,KAC/FlX,EAAAQ,YAAYmX,cAAgB3X,EAAAQ,YAAYoX,YAG1CX,IAEFvb,GAAUyC,YAAYC,OAAOC,UAAUb,UAAUsW,GAEjDA,KAQF0B,EAAAlY,UAAA8Z,QAAA,SAAQS,EAAyBC,GAC/B,GAAIC,GAAc/X,EAAAQ,YAAYwX,cAAcH,EAAiBje,KAAK4d,YAC9DS,EAAYjY,EAAAQ,YAAYwX,cAAcF,EAAiBle,KAAK4d,WAEhE,QAAkC5d,KAAKsG,OAAQuV,eAC7C,IAAKH,GAAsB4C,YACzBte,KAAK2G,QAAQ,GAAGwX,EAChB,MACF,KAAKzC,GAAsB6C,UACzBve,KAAK2G,QAAQ,GAAG0X,EAChB,MACF,KAAK3C,GAAsBI,oBACzB9b,KAAK2G,QAAWwX,EAAW,MAAME,EACjC,MACF,KAAK3C,GAAsB8C,cACzB,GAAIC,GAAgBrY,EAAAQ,YAAYwX,cAAcF,EAAkBD,EAAiBje,KAAK4d,WACtF5d,MAAK2G,QAAQ,GAAG8X,KASZ7C,EAAAlY,UAAAgb,cAAV,SAAwBd,GACtB5d,KAAK4d,WAAaA,GAEtBhC,GAvJuCzV,EAAAkB,MAA1B7H,GAAAoc,kBAAAA,2gBC5Cb,IAAAvT,GAAA1H,EAAA,kBAEAgb,EAAAhb,EAAA,kBAEAe,EAAAf,EAAA,wBAKAyV,EAAA,SAAAjR,GAKE,QAAAiR,GAAY9P,OAAA,KAAAA,IAAAA,KAAZ,IAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAKuE,OAASvE,EAAKwE,YAAYD,GAC7BE,SAAU,0BACVC,KAAM/E,EAAAc,KAAKC,aAAa,cACvBV,EAAKuE,QAERvE,EAAK4S,iBAAkB,IAmG3B,MAhH0CvP,GAAAgR,EAAAjR,GAgBxCiR,EAAA1S,UAAA2B,UAAA,SAAUzD,EAAmBE,EAA8B6c,GAA3D,GAAA5c,GAAA/B,SAA2D,KAAA2e,IAAAA,GAAA,GACzDxZ,EAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,EAExB,IAAI8c,IAAY,EAGZC,EAAuB,WAGrBD,IAIAhd,EAAOoN,aAAejN,EAAK4S,gBAC7B5S,EAAKiC,KAELjC,EAAKqF,OAKTxF,GAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYyH,KAAM,SAACvL,GAC1C4B,EAAK4S,iBAAkB,EACvBkK,MAGFjd,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY2H,OAAQ,SAACzL,GAC5C4B,EAAK4S,iBAAkB,EACvBkK,MAGFjd,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY0H,QAAS,SAACxL,GAC7C4B,EAAK4S,iBAAkB,EACvBkK,MAGFjd,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY6P,aAAc+K,GACnD/c,EAAUyC,YAAYC,OAAOC,UAAUb,UAAUib,GACjDjd,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYE,eAAgB0a,GAErDjd,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY6a,iBAAkBD,GACvDjd,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY0J,YAAakR,GAIlDjd,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYmR,QAAS,SAACnT,GACzCA,EAAMnB,OAASc,EAAOpC,QAAQ6V,YAAYC,gCAC5CvT,EAAK4S,iBAAkB,EACvB5S,EAAKqF,QAIT,IAAMkV,GAAkB,WACC1a,EAAO2a,WAAaZ,EAAAqB,YAAY+B,qBAAqBnd,GAG1EG,EAAKkL,gBAAgBmE,SAASrP,EAAK+K,UAAUsJ,EAAqB4I,mBAElEjd,EAAKkL,gBAAgBsE,YAAYxP,EAAK+K,UAAUsJ,EAAqB4I,oBAKrEC,EAAoB,GAAItD,GAAAqB,YAAYkC,8BAA8Btd,GAClEmb,EAAqB,GAAIpB,GAAAqB,YAAYC,mBAAmBrb,EAAQE,EAEpEmd,GAAkBE,+BAA+Bvb,UAAU,WAAM,MAAA0Y,OACjES,EAAmBG,cAActZ,UAAU,WAAM,MAAA0Y,OAEjD2C,EAAkB7B,SAClBL,EAAmBK,SAEfuB,GAIF3e,KAAKgG,QAAQpC,UAAU,WACjBhC,EAAOoN,aAAejN,EAAK4S,gBAC7B/S,EAAOqE,MAAM,MAEbrE,EAAOgT,KAAK,QAMlB9S,EAAUsd,OAAOxb,UAAU,WACzBgb,GAAY,IAEd9c,EAAUud,SAASzb,UAAU,WAC3Bgb,GAAY,IAIdC,KA5GsBzI,EAAA4I,iBAAmB,aA8G7C5I,GAhH0C/N,EAAAW,aAA7BxJ,GAAA4W,qBAAAA,8fCTb,IAAA5L,GAAA7J,EAAA,eACA2e,EAAA3e,EAAA,8BAKA4e,EAAA,SAAApa,GAIE,QAAAoa,GAAYjZ,OAAA,KAAAA,IAAAA,KAAZ,IAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAKyd,qBAAuB,GAAIF,GAAA7K,yBAEhC1S,EAAKuE,OAASvE,EAAKwE,YAAYD,GAC7BE,SAAU,4BACVwE,YAAajJ,EAAKyd,uBACjBzd,EAAKuE,UAEZ,MAd2ClB,GAAAma,EAAApa,GAc3Coa,GAd2C/U,EAAA0B,UAA9B1M,GAAA+f,sBAAAA,6eCNb,IAAA/U,GAAA7J,EAAA,eACA8J,EAAA9J,EAAA,eACAwL,EAAAxL,EAAA,UAEAyF,EAAAzF,EAAA,kBACA8e,EAAA9e,EAAA,sBAOA+e,EAAA,SAAAva,GAIE,QAAAua,GAAYpZ,OAAA,KAAAA,IAAAA,KAAZ,IAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAK4d,aAAe,GAAIF,GAAApJ,iBAExBtU,EAAKuE,OAASvE,EAAKwE,YAAYD,GAC7BE,SAAU,4BACVuE,QAAQ,EACRC,YAAajJ,EAAK4d,eACjB5d,EAAKuE,UAqDZ,MAlE2ClB,GAAAsa,EAAAva,GAgBzCua,EAAAhc,UAAA2B,UAAA,SAAUzD,EAAmBE,GAA7B,GAAAC,GAAA/B,IACEmF,GAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,EAExB,IAAI8d,GAAuB,WACzB,IAAsB,GAAAlW,GAAA,EAAAgJ,EAAA3Q,EAAKyQ,gBAAgBG,QAArBjJ,EAAAgJ,EAAAzR,OAAAyI,IAA8B,CAA/C,GAAI2I,GAASK,EAAAhJ,EACZ2I,aAAqBwN,IACvB9d,EAAKwQ,gBAAgBF,GAGzBtQ,EAAK6Q,mBACL7Q,EAAKkL,gBAAgBsE,YAAYxP,EAAK+K,UAAU,qBAG9CgT,EAAuB,WACzBF,GAEA,IAAMG,GAAkBje,EAAUyC,YAAYwb,eAE9C,IAAIA,EAAgB9e,OAAS,EAAG,CAE9B,IAAiB,GADbM,GAAQ,EACKmI,EAAA,EAAAsW,EAAAD,EAAArW,EAAAsW,EAAA/e,OAAAyI,IAAiB,CAA7B,GAAIpI,GAAI0e,EAAAtW,EACX3H,GAAKqQ,aAAa,GAAIyN,IACpBI,WAAY3e,EACZ6H,YAAa,uBAA0B5H,QAG3CQ,EAAK6Q,mBAEL7Q,EAAKkL,gBAAgBmE,SAASrP,EAAK+K,UAAU,qBAIjDhL,GAAUyC,YAAYC,OAAOC,UAAUb,UAAUkc,GAEjDle,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYE,eAAgB,WACnDyb,IACA7d,EAAKkG,SAGPrG,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY6a,iBAAkB,WACrD/c,EAAK6F,SAGPhG,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYyH,KAAM,WACzC3J,EAAKkG,SAIP6X,KAEJJ,GAlE2ClV,EAAA0B,UAA9B1M,GAAAkgB,sBAAAA,CA8Eb,IAAAG,GAAA,SAAA1a,GAEE,QAAA0a,GAAYvZ,GAAZ,GAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAKuE,OAASvE,EAAKwE,YAAYD,GAC7BE,SAAU,yBACVyZ,WAAY,MACXle,EAAKuE,UAiCZ,MAzCiClB,GAAAya,EAAA1a,GAWrB0a,EAAAnc,UAAA6I,aAAV,WACE,GAAIjG,GAAStG,KAAKsG,OAAO2Z,WAErBC,EAAc,GAAI/T,GAAAM,IAAI,KACxBnK,GAAMtC,KAAKsG,OAAOhE,GAClBqK,MAAS3M,KAAK4M,gBACduT,KAAQ7Z,EAAO8I,MACd4B,KAAMoP,mBAAoB,OAAO9Z,EAAO+Z,UAAS,MAEhDC,EAAY,GAAInU,GAAAM,IAAI,OACtBE,MAAS3M,KAAK8M,UAAU,eAE1BoT,GAAYrT,OAAOyT,EAEnB,IAAIC,GAAe,GAAIpU,GAAAM,IAAI,QACzBE,MAAS3M,KAAK8M,UAAU,WACvBD,OAAO,GAAIV,GAAAM,IAAI,QAChBE,MAAS3M,KAAK8M,UAAU,gBACvBC,KAAKzG,EAAO+T,OACf6F,GAAYrT,OAAO0T,EAEnB,IAAIC,GAAc,GAAIrU,GAAAM,IAAI,QACxBE,MAAS3M,KAAK8M,UAAU,cACvBD,OAAO,GAAIV,GAAAM,IAAI,QAChBE,MAAS3M,KAAK8M,UAAU,mBACvBC,KAAKzG,EAAOma,SAAWra,EAAAQ,YAAYwX,cAAc9X,EAAOma,UAAY,IAGvE,OAFAP,GAAYrT,OAAO2T,GAEZN,GAEXL,GAzCiCpV,EAAAI,+hBC1FjC,IAAAJ,GAAA9J,EAAA,eACAwL,EAAAxL,EAAA,UACAyL,EAAAzL,EAAA,sBAGA+J,EAAA/J,EAAA,cACAgb,EAAAhb,EAAA,kBAqDA+f,EAAA,SAAAvb,GAmDE,QAAAub,GAAYpa,OAAA,KAAAA,IAAAA,KAAZ,IAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAxBP+B,GAAA4e,2BAA6B,EAM7B5e,EAAA6e,eAAkB,gBAAkB/gB,QAEpCkC,EAAA8e,eAINzB,OAAQ,GAAIhT,GAAAE,gBAIZwU,cAAe,GAAI1U,GAAAE,gBAInB+S,SAAU,GAAIjT,GAAAE,iBA0ORvK,EAAAgf,mBAAqB,SAAClX,EAAiBsT,GACzCA,EAAK6D,WACPjf,EAAKkf,KAAK9D,EAAK+D,WAIXnf,EAAAkf,KAAO,SAACE,GACd,GAAIpf,EAAKH,OAAO2a,SAAU,CACxB,GAAM6E,GAAerf,EAAKH,OAAOib,iBACjC9a,GAAKH,OAAOya,UAAU+E,EAAgBA,GAAgBD,EAAa,KAAO,UACrE,CACL,GAAME,GAAqB1F,EAAAqB,YAAYsE,sBAAsBvf,EAAKH,OAAQ,GACpE2f,EAAqBxf,EAAKH,OAAO0b,eAAiB6D,EAAa,KAC/DK,EAAqBD,EAAqBF,CAChDtf,GAAKH,OAAOqf,KAAKO,EAAoB,QAlPvCzf,EAAKuE,OAASvE,EAAKwE,YAAYD,GAC7BE,SAAU,aACVib,UAAU,EACVC,uCAAwC,IACvC3f,EAAKuE,QAERvE,EAAKW,MAAQX,EAAKuE,OAAO5D,MACzBX,EAAK4f,qBAg3BT,MA76B6Bvc,GAAAsb,EAAAvb,GAgE3Bub,EAAAhd,UAAAyL,WAAA,WACEhK,EAAAzB,UAAMyL,WAAUnO,KAAAhB,MAEZA,KAAK4hB,YACP5hB,KAAK6hB,WAAW1S,cAIpBuR,EAAAhd,UAAA2B,UAAA,SAAUzD,EAAmBE,EAA8BggB,GAA3D,GAAA/f,GAAA/B,IASE,QATyD,KAAA8hB,IAAAA,GAAA,GACzD3c,EAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,GAExB9B,KAAK4B,OAASA,EAId5B,KAAK+hB,YAAY/hB,KAAKgiB,gBAAiB,KAElCF,EAAL,CAQA,GAAI9S,IAAY,EACZiT,GAAgB,EAChBC,GAAkB,EAGlBC,EAA0B,SAAClgB,EAA+BmgB,GAC5D,OAD6B,KAAAngB,IAAAA,EAAA,UAA+B,KAAAmgB,IAAAA,GAAA,IACxDH,EAKJ,GAAIrgB,EAAO2a,SAAU,CACnB,GAAiC,IAA7B3a,EAAOib,kBAET9a,EAAKsgB,oBAAoB,SACpB,CACL,GAAI1B,GAA6B,IAAO,IAAM/e,EAAOib,kBAAoBjb,EAAO+a,cAChF5a,GAAKsgB,oBAAoB1B,GAI3B5e,EAAKugB,kBAAkB,SAClB,CACL,GAAI3B,GAA6B,IAAM/e,EAAO0b,cAAgBvb,EAAKwgB,yBAE/DC,EAAoB5gB,EAAO6gB,uBAC3BC,EAAoB9gB,EAAO+gB,uBAI3BC,EAAe/E,KAAKgF,IACD,MAArBL,EAA4BA,EAAoBM,OAAOC,UAClC,MAArBL,EAA4BA,EAAoBI,OAAOC,UAErDH,KAAiBE,OAAOC,YAC1BH,EAAe,EAGjB,IAAII,GAAmB,IAAMphB,EAAO0b,cAAgBsF,GAIhD7gB,EAAKuE,OAAOob,yCAA2ChB,EAAQuC,0CAC9Db,GAAexgB,EAAOkb,YAAelb,EAAOkb,aAAelb,EAAOoN,cACrEjN,EAAKsgB,oBAAoB1B,GAG3B5e,EAAKugB,kBAAkB3B,EAA6BqC,IAMxDphB,GAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYif,MAAOf,GAE5CvgB,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYiD,YAAaib,GAElDvgB,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYwH,WAAY0W,GAEjDvgB,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY6H,OAAQqW,GAE7CvgB,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY+H,YAAamW,GAElDvgB,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYkf,uBAAwBhB,GAE7DniB,KAAKojB,oCAAoCxhB,EAAQE,EAAWqgB,EAG5D,IAAIkB,GAAe,WACjBnB,GAAkB,EAClBngB,EAAKuhB,YAAW,IAGdC,EAAiB,WACnBrB,GAAkB,EAClBngB,EAAKuhB,YAAW,IAGdE,EAAsB,WAEpBxU,GAEFpN,EAAOgT,KAAK,WAIhBhT,GAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY4H,KAAMwX,GAC3CzhB,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY6H,OAAQyX,GAC7C3hB,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY8H,UAAWsX,GAChDzhB,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY+H,YAAauX,GAElDvjB,KAAKof,OAAOxb,UAAU,SAACiG,GACrBoY,GAAgB,EAGhBngB,EAAUsd,OAAOjS,SAAStD,GAGrBqY,IACHlT,EAAYpN,EAAOoN,cAKjBpN,EAAOqE,MAAM,aAKnBjG,KAAK8gB,cAAcld,UAAU,SAACiG,EAAiBsT,GAE7Crb,EAAUgf,cAAc3T,SAAStD,EAAQsT,KAI3Cnd,KAAK8gB,cAAc2C,qBAAqBzjB,KAAK+gB,mBAAoB,KACjE/gB,KAAKqf,SAASzb,UAAU,SAACiG,EAAQsX,GAC/Bc,GAAgB,EAGhBlgB,EAAKkf,KAAKE,GAGVrf,EAAUud,SAASlS,SAAStD,GAG5B2Z,MAGExjB,KAAK4hB,YAEP5hB,KAAK6hB,WAAWxc,UAAUzD,EAAQE,EAIpC,IAAIya,IAAS,EACTmH,GAAe,EACfC,EAAmB,SAACpH,EAAiBmH,GACnCnH,IAAWmH,EACb3hB,EAAKkG,OAELlG,EAAK6F,OAEPua,EAAwB,MAAM,GAC9BpgB,EAAK6hB,2BAEH7G,EAAqB,GAAIpB,GAAAqB,YAAYC,mBAAmBrb,EAAQE,EACpEib,GAAmBG,cAActZ,UAAU,SAACiG,EAAQsT,GAClDZ,EAASY,EAAKnB,KACVO,GAAgD,MAAtCxa,EAAK8hB,+BACjB9hB,EAAK8hB,8BAA8BtY,QAErCoY,EAAiBpH,EAAQmH,IAE3B,IAAIzE,GAAoB,GAAItD,GAAAqB,YAAYkC,8BAA8Btd,EACtEqd,GAAkBE,+BAA+Bvb,UAAU,SAACiG,EAAQsT,GAChEuG,EAAevG,EAAK2G,mBACpBH,EAAiBpH,EAAQmH,KAI7B3G,EAAmBK,SACnB6B,EAAkB7B,SAIlBxb,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY8f,cAAe,WAClDhiB,EAAK6hB,4BAIP9hB,EAAUkiB,aAAapgB,UAAU,WAC/B7B,EAAK6hB,4BAGPhiB,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY6P,aAAc,WACjD/R,EAAK6hB,4BAGP9hB,EAAUyC,YAAYC,OAAOC,UAAUb,UAAU,WAC/Cue,MAIFA,IACAniB,KAAKsiB,kBAAkB,GACvBtiB,KAAKikB,gBAAgB,GACjBjkB,KAAKsG,OAAOob,yCAA2ChB,EAAQuC,0CACjEjjB,KAAKkkB,uCAAuCtiB,EAAQE,GAEtD9B,KAAKmkB,iBAAiBviB,EAAQE,KAyBxB4e,EAAAhd,UAAA0f,oCAAR,SACExhB,EACAE,EACAqgB,GAHF,GAAApgB,GAAA/B,IAMEA,MAAKokB,uBAAyB,GAAI1Z,GAAAS,QAAQ,IAAMgX,GAAyB,GAGzEvgB,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY2H,OAAQ,WACvChK,EAAO2a,UAAY3a,EAAOib,kBAAoB,GAChD9a,EAAKqiB,uBAAuB/Y,UAKhCzJ,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYyH,KAAM,WAAM,MAAA3J,GAAKqiB,uBAAuB7Y,WAGvEmV,EAAAhd,UAAAwgB,uCAAR,SAA+CtiB,EAAmBE,GAAlE,GAAAC,GAAA/B,KASMqkB,EAAqB,EACrBC,EAAoB,CAIxBtkB,MAAK6jB,8BAAgC,GAAInZ,GAAAS,QAHlB,GAG4C,WACjEkZ,GAH+BE,GAK/B,KACED,EAAoBviB,EAAKwgB,yBACzB,MAAOiC,GAOP,YALIA,YAAiB5iB,GAAOpC,QAAQilB,4BAClC1iB,EAAK8hB,8BAA8BtY,SAQvC,GAAImZ,GAAmBL,EAAqBC,CAGxCzG,MAAKC,IAAI4G,GAAoB,EAC/BL,EAAqBC,EAIdI,IA1BsBH,IA2B7BF,GA3B6BE,IA+BtBG,GA/BsBH,MAgC7BF,GAhC6BE,IAmC/B,IAAI5D,GAA6B,IAAM/e,EAAO0b,cAAgB+G,CAC9DtiB,GAAKsgB,oBAAoB1B,KACxB,EAEH,IAAIgE,GAAqC,WAClC/iB,EAAO2a,WACV8H,EAAqBtiB,EAAKwgB,yBAC1BxgB,EAAK8hB,8BAA8BxY,UAInCuZ,EAAoC,WACtC7iB,EAAK8hB,8BAA8BtY,QAGrC3J,GAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYyH,KAAMiZ,GAC3C/iB,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY0H,QAASgZ,GAC9C/iB,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY2H,OAAQgZ,GAC7ChjB,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY6a,iBAAkB8F,GACvDhjB,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY6H,OAAQ,WAC3CuY,EAAqBtiB,EAAKwgB,2BAE5B3gB,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYE,eAAgBygB,GAEjDhjB,EAAOoN,aACT2V,KAIIjE,EAAAhd,UAAA6e,uBAAR,WACE,MAAO5G,GAAAqB,YAAYS,sCAAsCzd,KAAK4B,SAGxD8e,EAAAhd,UAAAygB,iBAAR,SAAyBviB,EAAmBE,GAA5C,GAAAC,GAAA/B,KACM6kB,EAAe,WACjB9iB,EAAK4f,mBACL5f,EAAK+iB,iBAGHC,EAAe,WACjBF,GAEA,IAAMpE,GAAW7e,EAAO0b,aAExB,IAAImD,IAAalD,EAAAA,EAAjB,CAMA,IAAmB,GAAA7T,GAAA,EAAAgJ,EAAA5Q,EAAUyC,YAAY6V,SAAS4K,QAA/Btb,EAAAgJ,EAAAzR,OAAAyI,IAAwC,CAAtD,GAAIub,GAAMvS,EAAAhJ,GACPwb,EAAiB,IAAMzE,EAAWwE,EAAOE,KACzCC,EAAiB,IAAM3E,EAAWwE,EAAOxE,QAC/C1e,GAAK4f,gBAAgBrP,MAAO2S,OAAMA,EAAE/D,SAAUgE,EAAgBzE,SAAU2E,IAI1ErjB,EAAK+iB,iBAIPljB,GAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYE,eAAgB0gB,GAErDjjB,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY8f,cAAe,WAAM,MAAAhiB,GAAK+iB,kBAC/DhjB,EAAUyC,YAAYC,OAAOC,UAAUb,UAAUmhB,GACjDjjB,EAAUujB,UAAUzhB,UAAU,WAAM,MAAA9B,GAAUyC,YAAYC,OAAOC,UAAUgY,YAAYsI,KAGvFA,KAGFrE,EAAAhd,UAAAuL,QAAA,WACE9J,EAAAzB,UAAMuL,QAAOjO,KAAAhB,MAETA,KAAK6jB,+BACP7jB,KAAK6jB,8BAA8BtY,QAGjCvL,KAAKokB,wBACPpkB,KAAKokB,uBAAuB7Y,QAG9BvL,KAAK8gB,cAAcrE,YAAYzc,KAAK+gB,qBAG5BL,EAAAhd,UAAA6I,aAAV,WAAA,GAAAxK,GAAA/B,IACMA,MAAKsG,OAAOmb,UACdzhB,KAAKsG,OAAO6C,WAAWmJ,KAAK,WAG9B,IAAIgT,GAAmB,GAAInZ,GAAAM,IAAI,OAC7BnK,GAAMtC,KAAKsG,OAAOhE,GAClBqK,MAAS3M,KAAK4M,kBAGZ2Y,EAAU,GAAIpZ,GAAAM,IAAI,OACpBE,MAAS3M,KAAK8M,UAAU,YAE1B9M,MAAKulB,QAAUA,CAGf,IAAIC,GAAqB,GAAIrZ,GAAAM,IAAI,OAC/BE,MAAS3M,KAAK8M,UAAU,wBAE1B9M,MAAKylB,sBAAwBD,CAG7B,IAAIE,GAA0B,GAAIvZ,GAAAM,IAAI,OACpCE,MAAS3M,KAAK8M,UAAU,6BAE1B9M,MAAK0lB,wBAA0BA,CAG/B,IAAIC,GAAgC,GAAIxZ,GAAAM,IAAI,OAC1CE,MAAS3M,KAAK8M,UAAU,oCAE1B9M,MAAK2lB,8BAAgCA,CAGrC,IAAIC,GAAsB,GAAIzZ,GAAAM,IAAI,OAChCE,MAAS3M,KAAK8M,UAAU,yBAE1B9M,MAAK4lB,oBAAsBA,CAG3B,IAAI5D,GAAkB,GAAI7V,GAAAM,IAAI,OAC5BE,MAAS3M,KAAK8M,UAAU,qBAE1B9M,MAAKgiB,gBAAkBA,CAEvB,IAAI6D,GAAiC,GAAI1Z,GAAAM,IAAI,OAC3CE,MAAS3M,KAAK8M,UAAU,oBAE1B9M,MAAK8lB,wBAA0BD,EAE/BN,EAAQ1Y,OAAO7M,KAAKgiB,gBAAiBhiB,KAAKylB,sBAAuBzlB,KAAK4lB,oBACpE5lB,KAAK0lB,wBAAyB1lB,KAAK8lB,wBAAyB9lB,KAAK2lB,8BAEnE,IAAII,IAAU,EAGVC,EAAwB,SAAC7lB,GAC3BA,EAAE8lB,iBAEF9lB,EAAE+lB,iBAEF,IAAIC,GAAmB,IAAMpkB,EAAKqkB,UAAUjmB,EAC5C4B,GAAKkiB,gBAAgBkC,GACrBpkB,EAAKsgB,oBAAoB8D,GACzBpkB,EAAKskB,mBAAmBF,GAAkB,IAExCG,EAAsB,SAACnmB,GACzBA,EAAE8lB,iBAGF,GAAI9Z,GAAAM,IAAI8Z,UAAUnf,IAAI,sBAAuB4e,GAC7C,GAAI7Z,GAAAM,IAAI8Z,UAAUnf,IAAI,mBAAoBkf,EAE1C,IAAIH,GAAmB,IAAMpkB,EAAKqkB,UAAUjmB,GACxCqmB,EAAiBzkB,EAAK0kB,oBAAoBN,EAE9CpkB,GAAKuhB,YAAW,GAChByC,GAAU,EAGVhkB,EAAK2kB,cAAcF,EAAiBA,EAAetF,SAAWiF,GAiEhE,OAzDAZ,GAAQvhB,GAAG,uBAAwB,SAAC7D,GAClC,GAAIwmB,GAAe5kB,EAAK6e,gBAAkBzgB,YAAaymB,WAGvDzmB,GAAE8lB,iBAEF9lB,EAAE+lB,kBAEFnkB,EAAKuhB,YAAW,GAChByC,GAAU,EAGVhkB,EAAK8kB,cAGL,GAAI1a,GAAAM,IAAI8Z,UAAUviB,GAAG2iB,EAAe,YAAc,YAAaX,GAC/D,GAAI7Z,GAAAM,IAAI8Z,UAAUviB,GAAG2iB,EAAe,WAAa,UAAWL;mDAI9Df,EAAQvhB,GAAG,sBAAuB,SAAC7D,GACjCA,EAAE8lB,iBAEEF,IAGF5lB,EAAE+lB,kBAEFF,EAAsB7lB,GAGxB,IAAI+gB,GAAW,IAAMnf,EAAKqkB,UAAUjmB,EACpC4B,GAAKkiB,gBAAgB/C,GACrBnf,EAAKskB,mBAAmBnF,GAAU,GAE9Bnf,EAAK6f,YAAc7f,EAAK8f,WAAWvR,YACrCvO,EAAK8f,WAAWja,SAKpB2d,EAAQvhB,GAAG,sBAAuB,SAAC7D,GACjCA,EAAE8lB,iBAEFlkB,EAAKkiB,gBAAgB,GAEjBliB,EAAK6f,YACP7f,EAAK8f,WAAW5Z,SAIpBqd,EAAiBzY,OAAO0Y,GAEpBvlB,KAAK0C,OACP4iB,EAAiBzY,OAAO7M,KAAK0C,MAAMuK,iBAG9BqY,GAGC5E,EAAAhd,UAAAohB,cAAV,WAAA,GAAA/iB,GAAA/B,IACEA,MAAK8lB,wBAAwBlP,OAI7B,KAAmB,GAFbkQ,GAAiB9mB,KAAKulB,QAAQ7H,QAEjBhU,EAAA,EAAAgJ,EAAA1S,KAAK2hB,gBAALjY,EAAAgJ,EAAAzR,OAAAyI,IAAsB,CAApC,GAAIub,GAAMvS,EAAAhJ,GACPqd,GAAiB,kBAAkBhW,OAAOkU,EAAOA,OAAO9b,gBAC3D5F,IAAI,SAAAiD,GAAY,MAAAzE,GAAK+K,UAAUtG,KAE5BwgB,GACJtJ,MAASuH,EAAO/D,SAAW,IAG7B,IAAI+D,EAAOxE,SAAW,EAAG,CACvB,GAAMwG,GAAgBpJ,KAAKqJ,MAAMJ,EAAiB,IAAM7B,EAAOxE,SAC/DuG,GAAc,sBAAwBC,EAAgB,KACtDD,EAAc,eAAiB,IAGjChnB,KAAK8lB,wBAAwBjZ,OAAO,GAAIV,GAAAM,IAAI,OAC1CE,MAASoa,EAAc9V,KAAK,KAC5BkW,mBAAoBjQ,OAAO+N,EAAOA,OAAOE,MACzCiC,oBAAqBlQ,OAAO+N,EAAOA,OAAO5K,SACzCrJ,IAAIgW,MAIDtG,EAAAhd,UAAA+iB,oBAAV,SAA8BtF,GAG5B,GAAInhB,KAAK2hB,gBAAgB1gB,OAAS,EAChC,IAAmB,GAAAyI,GAAA,EAAAgJ,EAAA1S,KAAK2hB,gBAALjY,EAAAgJ,EAAAzR,OAAAyI,IAAsB,CAApC,GAAIub,GAAMvS,EAAAhJ,EAEb,IAAIub,EAAOxE,SAAW,GACjBU,GAAc8D,EAAO/D,SANR,GAObC,GAAc8D,EAAO/D,SAAW+D,EAAOxE,SAP1B,EAQhB,MAAOwE,EAGJ,IAAI9D,GAAc8D,EAAO/D,SAXZ,GAYbC,GAAc8D,EAAO/D,SAZR,EAahB,MAAO+D,GAKb,MAAO,OAQDvE,EAAAhd,UAAA2jB,oBAAR,SAA4BC,GAC1B,GAAIC,GAAkBvnB,KAAKulB,QAAQiC,SAASC,KACxCC,EAAU1nB,KAAKulB,QAAQ7H,QACvBiK,EAAWL,EAAaC,EACxBC,EAAS,EAAIE,EAAUC,CAE3B,OAAO3nB,MAAK4nB,eAAeJ,IAQrB9G,EAAAhd,UAAAmkB,kBAAR,SAA0BC,GACxB,GAAIP,GAAkBvnB,KAAKulB,QAAQiC,SAASO,IACxCL,EAAU1nB,KAAKulB,QAAQyC,SACvBL,EAAWG,EAAaP,EACxBC,EAAS,EAAIE,EAAUC,CAE3B,OAAO,GAAI3nB,KAAK4nB,eAAeJ,IAUzB9G,EAAAhd,UAAA0iB,UAAR,SAAkBjmB,GAChB,MAAIH,MAAK4gB,gBAAkBzgB,YAAaymB,YAClC5mB,KAAKsG,OAAOmb,SACPzhB,KAAK6nB,kBAA6B,aAAX1nB,EAAEuM,KAAsBvM,EAAE8nB,eAAe,GAAGC,MAAQ/nB,EAAEgoB,QAAQ,GAAGD,OAExFloB,KAAKqnB,oBAA+B,aAAXlnB,EAAEuM,KAAsBvM,EAAE8nB,eAAe,GAAGG,MAAQjoB,EAAEgoB,QAAQ,GAAGC,OAG5FjoB,YAAakoB,YAChBroB,KAAKsG,OAAOmb,SACPzhB,KAAK6nB,kBAAkB1nB,EAAE+nB,OAEzBloB,KAAKqnB,oBAAoBlnB,EAAEioB,QAIhC3f,SACFA,QAAQ6f,KAAK,iBAER,IAcH5H,EAAAhd,UAAAkkB,eAAR,SAAuBJ,GASrB,MANIA,GAAS,EACXA,EAAS,EACAA,EAAS,IAClBA,EAAS,GAGJA,GAOT9G,EAAAhd,UAAA2e,oBAAA,SAAoBkG,GAClBvoB,KAAK2gB,2BAA6B4H,EAGlCvoB,KAAK+hB,YAAY/hB,KAAK0lB,wBAAyB6C,EAG/C,IAAIC,GAAaxoB,KAAKsG,OAAOmb,SAAYzhB,KAAKulB,QAAQyC,SAAWhoB,KAAK2lB,8BAA8BqC,SAAYhoB,KAAKulB,QAAQ7H,QACzH+K,EAAK,EAAc,IAAMF,CACzBvoB,MAAKsG,OAAOmb,WACdgH,EAAKzoB,KAAKulB,QAAQyC,SAAWS,EAAKzoB,KAAK2lB,8BAA8BqC,SAGvE,IAAIU,GAAQ1oB,KAAKsG,OAAOmb,UAIpBkH,UAAa,cAAgBF,EAAK,MAClCG,gBAAiB,cAAgBH,EAAK,MACtCI,oBAAqB,cAAgBJ,EAAK,QAG1CE,UAAa,cAAgBF,EAAK,MAClCG,gBAAiB,cAAgBH,EAAK,MACtCI,oBAAqB,cAAgBJ,EAAK,MAE9CzoB,MAAK2lB,8BAA8B3U,IAAI0X,IAO/BhI,EAAAhd,UAAAkgB,wBAAV,WACE5jB,KAAKqiB,oBAAoBriB,KAAK2gB,6BAOhCD,EAAAhd,UAAA4e,kBAAA,SAAkBiG,GAChBvoB,KAAK+hB,YAAY/hB,KAAKylB,sBAAuB8C,IAO/C7H,EAAAhd,UAAAugB,gBAAA,SAAgBsE,GACdvoB,KAAK+hB,YAAY/hB,KAAK4lB,oBAAqB2C,IAQrC7H,EAAAhd,UAAAqe,YAAR,SAAoBlgB,EAAc0mB,GAChC,GAAIO,GAAQP,EAAU,GAQlBO,IAAS,QAAWA,GAAS,UAC/BA,EAAQ,OAGV,IAAIJ,GAAQ1oB,KAAKsG,OAAOmb,UAIpBkH,UAAa,UAAYG,EAAQ,IACjCF,gBAAiB,UAAYE,EAAQ,IACrCD,oBAAqB,UAAYC,EAAQ,MAGzCH,UAAa,UAAYG,EAAQ,IACjCF,gBAAiB,UAAYE,EAAQ,IACrCD,oBAAqB,UAAYC,EAAQ,IAE7CjnB,GAAQmP,IAAI0X,IASdhI,EAAAhd,UAAA4f,WAAA,SAAWyC,GACLA,EACF/lB,KAAKiN,gBAAgBmE,SAASpR,KAAK8M,UAAU4T,EAAQqI,gBAErD/oB,KAAKiN,gBAAgBsE,YAAYvR,KAAK8M,UAAU4T,EAAQqI,iBAQ5DrI,EAAAhd,UAAAkb,UAAA,WACE,MAAO5e,MAAKiN,gBAAgBkJ,SAASnW,KAAK8M,UAAU4T,EAAQqI,iBAO9DrI,EAAAhd,UAAAke,SAAA,WACE,MAAqB,OAAd5hB,KAAK0C,OAOdge,EAAAhd,UAAAme,SAAA,WACE,MAAO7hB,MAAK0C,OAGJge,EAAAhd,UAAAmjB,YAAV,WACE7mB,KAAK6gB,cAAczB,OAAOjS,SAASnN,OAG3B0gB,EAAAhd,UAAA2iB,mBAAV,SAA6BlF,EAAoBH,GAC/C,GAAIgI,GAAgBhpB,KAAKymB,oBAAoBtF,GAEzC8H,EAAyB9H,CAEzB6H,KACEA,EAAcvI,SAAW,EACvBU,EAAa6H,EAAc9H,SAI7B+H,EAAyBD,EAAc9H,SAC9BC,EAAa6H,EAAc9H,SAAW8H,EAAcvI,WAE7DwI,EAAyBD,EAAc9H,SAAW8H,EAAcvI,UAIlEwI,EAAyBD,EAAc9H,UAIvClhB,KAAK0C,OACP1C,KAAK0C,MAAMuK,gBAAgB+D,KACzByW,KAAQwB,EAAyB,MAIrCjpB,KAAK6gB,cAAcC,cAAc3T,SAASnN,MACxCghB,UAAWA,EACXE,SAAU+H,EACVhE,OAAQ+D,KAIFtI,EAAAhd,UAAAgjB,cAAV,SAAwBvF,GACtBnhB,KAAK6gB,cAAcxB,SAASlS,SAASnN,KAAMmhB,IAO7Cxc,OAAAC,eAAI8b,EAAAhd,UAAA,cAAJ,WACE,MAAO1D,MAAK6gB,cAAczB,OAAOhS,4CASnCzI,OAAAC,eAAI8b,EAAAhd,UAAA,qBAAJ,WACE,MAAO1D,MAAK6gB,cAAcC,cAAc1T,4CAO1CzI,OAAAC,eAAI8b,EAAAhd,UAAA,gBAAJ,WACE,MAAO1D,MAAK6gB,cAAcxB,SAASjS,4CAI3BsT,EAAAhd,UAAA8N,YAAV,WACErM,EAAAzB,UAAM8N,YAAWxQ,KAAAhB,MAOjBA,KAAK4jB,2BAz6BgBlD,EAAAuC,0CAA4C,EAK3CvC,EAAAqI,cAAgB,UAs6B1CrI,GA76B6BjW,EAAAI,UAAhBrL,GAAAkhB,QAAAA,qhBC3Db,IAAAlW,GAAA7J,EAAA,eACAwF,EAAAxF,EAAA,WACA8J,EAAA9J,EAAA,eAEAyF,EAAAzF,EAAA,kBACAuoB,EAAAvoB,EAAA,kBAIAgb,EAAAhb,EAAA,kBAYAwoB,EAAA,SAAAhkB,GAcE,QAAAgkB,GAAY7iB,OAAA,KAAAA,IAAAA,KAAZ,IAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WALP+B,GAAAqnB,2BA+CArnB,EAAAsnB,kBAAoB,SAACxf,EAAiBsT,GAC5C,GAAIpb,EAAKH,OAAO2a,SAAU,CACxB,GAAI6E,GAAerf,EAAKH,OAAOib,kBAC3ByM,EAAmBlI,EAAeA,GAAgBjE,EAAK+D,SAAW,IAEtEnf,GAAKyb,QAAQ8L,EAIb,IAQMC,GARyC,SAACC,GAC9C,GAAMC,GAAmB1nB,EAAKH,OAAO+a,cAIrC,OAHoB5a,GAAKH,OAAOiG,iBAEc4hB,EACbD,GAG0BF,EAC7DvnB,GAAK2nB,aAAa3nB,EAAKH,OAAO+nB,aAAaJ,QAEtC,CACDpM,EAAK8H,OACPljB,EAAK6nB,aAAazM,EAAK8H,OAAOA,OAAO5K,OAErCtY,EAAK6nB,aAAa,KAEpB,IAAIzE,GAAOpjB,EAAKH,OAAO0b,eAAiBH,EAAK+D,SAAW,IACxDnf,GAAKyb,QAAQ2H,EAEb,IAAM9D,GAAqB1F,EAAAqB,YAAYsE,sBAAsBvf,EAAKH,OAAQ,GACpE4f,EAAqB2D,EAAO9D,CAClCtf,GAAK2nB,aAAa3nB,EAAKH,OAAO+nB,aAAanI,IAU7C,GANIzf,EAAKqnB,wBAAwBnoB,OAAS,IACxCc,EAAKkL,gBAAgBsE,YAAYxP,EAAKqnB,wBAAwBnY,KAAK,MACnElP,EAAKqnB,4BAIHjM,EAAK8H,OAAQ,CACf,GAAM9b,IAAcgU,EAAK8H,OAAOA,OAAO9b,gBAAkB5F,IAAI,SAAAiD,GAAY,MAAAzE,GAAK+K,UAAUtG,IACxFzE,GAAKkL,gBAAgBmE,SAASjI,EAAW8H,KAAK,MAC9ClP,EAAKqnB,wBAA0BjgB,IApFjCpH,EAAK8nB,UAAY,GAAI1jB,GAAAkB,OAAQ8B,YAAa,wBAC1CpH,EAAK+nB,WAAa,GAAI3jB,GAAAkB,OAAQ8B,YAAa,yBAC3CpH,EAAKse,UAAY,GAAI5V,GAAAI,WAAY1B,YAAa,uBAC9CpH,EAAKgoB,qBAAuB,GAAIb,GAAAc,YAEhCjoB,EAAKuE,OAASvE,EAAKwE,YAAYD,GAC7BE,SAAU,mBACVwE,YAAa,GAAIR,GAAA0B,WACflB,YACEjJ,EAAKse,UACL,GAAI7V,GAAA0B,WACFlB,YAAajJ,EAAK+nB,WAAY/nB,EAAK8nB,WACnCrjB,SAAU,4BAEdA,SAAU,yBAEZuE,QAAQ,GACPhJ,EAAKuE,UAyKZ,MA3MkClB,GAAA+jB,EAAAhkB,GAqChCgkB,EAAAzlB,UAAA2B,UAAA,SAAUzD,EAAmBE,GAA7B,GAAAC,GAAA/B,IACEmF,GAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,GAExB9B,KAAK4B,OAASA,EACd5B,KAAKiqB,UAAYnoB,EACjBA,EAAUgf,cAAc2C,qBAAqBzjB,KAAKqpB,kBAAmB,IAErE,IAAInP,GAAO,WAETnY,EAAK6b,WAAaC,KAAKC,IAAIlc,EAAO2a,SAAW3a,EAAOib,kBAAoBjb,EAAO0b,gBAAkB,KAC/FlX,EAAAQ,YAAYmX,cAAgB3X,EAAAQ,YAAYoX,YAE1Cjc,EAAK6nB,aAAa,MAClB7nB,EAAK2nB,aAAa,MAGpB5nB,GAAUyC,YAAYC,OAAOC,UAAUb,UAAUsW,GACjDA,KAuDFiP,EAAAzlB,UAAAiD,QAAA,SAAQF,GACNzG,KAAK6pB,UAAUljB,QAAQF,IAOzB0iB,EAAAzlB,UAAA8Z,QAAA,SAAQ0M,GACNlqB,KAAK2G,QAAQP,EAAAQ,YAAYwX,cAAc8L,EAASlqB,KAAK4d,cAOvDuL,EAAAzlB,UAAAkmB,aAAA,SAAanjB,GACXzG,KAAK8pB,WAAWnjB,QAAQF,IAO1B0iB,EAAAzlB,UAAAgmB,aAAA,SAAarJ,GAAb,GAAAte,GAAA/B,SAAa,KAAAqgB,IAAAA,EAAA,KACX,IAAI8J,GAAmBnqB,KAAKqgB,UAAUpT,eAErB,OAAboT,EACF8J,EAAiBnZ,KACfoP,mBAAoB,KACpBgK,QAAW,KACX1M,MAAS,KACTsK,OAAU,OAMZhoB,KAAK+pB,qBAAqBM,KAAKhK,EAAUjR,IAAK,SAACA,EAAKsO,EAAOsK,OAGrCxY,KAAhB6Q,EAAUiK,EACZH,EAAiBnZ,IAAIjP,EAAKwoB,mBAAmBlK,EAAW3C,EAAOsK,IAE/DmC,EAAiBnZ,IAAIjP,EAAKyoB,wBAAwBnK,EAAW3C,EAAOsK,OAMpEmB,EAAAzlB,UAAA6mB,mBAAR,SAA2BlK,EAAsB3C,EAAesK,GAC9D,GAAIyC,GAAkB/M,EAAQ2C,EAAU3C,MACpCgN,EAAkB1C,EAAS3H,EAAU2H,OAErC2C,EAAkBtK,EAAUiK,EAAIjK,EAAU3C,MAC1CkN,EAAkBvK,EAAUwK,EAAIxK,EAAU2H,OAE1C8C,EAAQ,IAAML,EACdM,EAAQ,IAAML,EAEdM,EAAU,IAAML,EAChBM,EAAU,IAAML,EAEhBM,EAAc,EAAI7K,EAAU3C,MAAQ2C,EAAU2H,MAKlD,QACEoC,QAAW,UACXhK,mBAAoB,OAAOC,EAAUjR,IAAG,IACxC+b,iBAAqB,IAAMD,EAAW,IACtCE,kBAAsBN,EAAK,KAAKC,EAAK,IACrCM,sBAAuB,IAAIL,EAAO,MAAMC,EAAO,MAI3C9B,EAAAzlB,UAAA8mB,wBAAR,SAAgCnK,EAAsB3C,EAAesK,GACnE,GAAIkD,GAAc,EAAIxN,EAAQsK,CAE9B,QACEoC,QAAW,UACXhK,mBAAoB,OAAOC,EAAUjR,IAAG,IACxC+b,iBAAqB,IAAMD,EAAW,IACtCE,kBAAmB,YACnBC,sBAAuB,QAI3BlC,EAAAzlB,UAAAuL,QAAA,WACE9J,EAAAzB,UAAMuL,QAAOjO,KAAAhB,MAEbA,KAAKiqB,UAAUnJ,cAAcrE,YAAYzc,KAAKqpB,oBAElDF,GA3MkC3e,EAAA0B,UAArB1M,GAAA2pB,aAAAA,uiBCrBb,IAAA7S,GAAA3V,EAAA,kBACAwL,EAAAxL,EAAA,UACAe,EAAAf,EAAA,wBAaAuJ,EAAA,SAAA/E,GAIE,QAAA+E,GAAY5D,OAAA,KAAAA,IAAAA,KAAZ,IAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAKuE,OAASvE,EAAKwE,YAAYD,GAC7BE,SAAU,gBACTzE,EAAKuE,UAsDZ,MA/D+BlB,GAAA8E,EAAA/E,GAYnB+E,EAAAxG,UAAA6I,aAAV,WAAA,GAAAxK,GAAA/B,KACMsrB,EAAgB,GAAInf,GAAAM,IAAI,UAC1BnK,GAAMtC,KAAKsG,OAAOhE,GAClBqK,MAAS3M,KAAK4M,iBAWhB,OARA5M,MAAKsrB,cAAgBA,EACrBtrB,KAAK0W,iBAEL4U,EAActnB,GAAG,SAAU,WACzB,GAAIF,GAAQwnB,EAAcC,KAC1BxpB,GAAKoV,oBAAoBrT,GAAO,KAG3BwnB,GAGCphB,EAAAxG,UAAAgT,eAAV,SAAyBC,OAAA,KAAAA,IAAAA,EAAA,MAEvB3W,KAAKsrB,cAAc1U,OAGnB,KAAiB,GAAAlN,GAAA,EAAAgJ,EAAA1S,KAAKyW,MAAL/M,EAAAgJ,EAAAzR,OAAAyI,IAAY,CAAxB,GAAIpI,GAAIoR,EAAAhJ,GACP8hB,EAAgB,GAAIrf,GAAAM,IAAI,UAC1B3I,MAASoT,OAAO5V,EAAK+B,OACpB0J,KAAKrL,EAAAc,KAAKsE,oBAAoBxF,EAAKoB,OAElCpB,GAAK+B,MAAQ6T,OAAOP,IACtB6U,EAAcC,KAAK,WAAY,YAGjCzrB,KAAKsrB,cAAcze,OAAO2e,KAIpBthB,EAAAxG,UAAA0T,iBAAV,SAA2BtT,GACzBqB,EAAAzB,UAAM0T,iBAAgBpW,KAAAhB,KAAC8D,GACvB9D,KAAK0W,eAAe1W,KAAKqX,eAGjBnN,EAAAxG,UAAA4T,mBAAV,SAA6BxT,GAC3BqB,EAAAzB,UAAM4T,mBAAkBtW,KAAAhB,KAAC8D,GACzB9D,KAAK0W,eAAe1W,KAAKqX,eAGjBnN,EAAAxG,UAAAyT,oBAAV,SAA8BrT,EAAe4S,OAAA,KAAAA,IAAAA,GAAA,GAC3CvR,EAAAzB,UAAMyT,oBAAmBnW,KAAAhB,KAAC8D,GACtB4S,GACF1W,KAAK0W,eAAe5S,IAG1BoG,GA/D+BoM,EAAAiB,aAAlB/X,GAAA0K,UAAAA,sfCfb,IA4BKwhB,GA5BLlhB,EAAA7J,EAAA,eACAsI,EAAAtI,EAAA,eAEA+J,EAAA/J,EAAA,cACAyL,EAAAzL,EAAA,sBACAgrB,EAAAhrB,EAAA,wBAuBA,SAAK+qB,GACHA,EAAAA,EAAA,SAAA,GAAA,WACAA,EAAAA,EAAA,UAAA,GAAA,aAFGA,IAAAA,MA4BL,IAAAE,GAAA,SAAAzmB,GAcE,QAAAymB,GAAYtlB,GAAZ,GAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WATP+B,GAAA8pB,mBAEA9pB,EAAA+pB,qBACNC,uBAAwB,GAAI3f,GAAAE,iBAQ5BvK,EAAKuE,OAASvE,EAAKwE,YAAYD,GAC7BE,SAAU,oBACVkI,UAAW,IACXsd,yBAAyB,GACDjqB,EAAKuE,QAE/BvE,EAAKkqB,WAAalqB,EAAKmqB,gBAqT3B,MA5UmC9mB,GAAAwmB,EAAAzmB,GA0BjCymB,EAAAloB,UAAA2B,UAAA,SAAUzD,EAAmBE,GAA7B,GAAAC,GAAA/B,IACEmF,GAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,EAExB,IAAIwE,GAAStG,KAAKuE,WAElBzC,GAAU0M,eAAe5K,UAAU,WAAM,MAAA7B,GAAKoqB,2BAE1C7lB,EAAOoI,WAAa,IACtB1O,KAAKosB,YAAc,GAAI1hB,GAAAS,QAAQ7E,EAAOoI,UAAW,WAC/C3M,EAAKkG,OACLlG,EAAKoqB,2BAGPnsB,KAAK6P,OAAOjM,UAAU,WAEpB7B,EAAKsqB,iBAAgB,GAGrBtqB,EAAKkqB,WAAWK,gBAEhBvqB,EAAKqqB,YAAY/gB,UAEnBrL,KAAKiN,gBAAgBjJ,GAAG,aAAc,WAEpCjC,EAAKqqB,YAAY7gB,UAEnBvL,KAAKiN,gBAAgBjJ,GAAG,aAAc,WAEpCjC,EAAKqqB,YAAYG,UAEnBvsB,KAAK8P,OAAOlM,UAAU,WAEpB7B,EAAKqqB,YAAY7gB,QAGjBxJ,EAAKkqB,WAAWO,qBAKpBxsB,KAAKksB,cAAcH,uBAAuBnoB,UAAU,WAClD7B,EAAK0qB,gCAGPzsB,KAAK0sB,yBAOPd,EAAAloB,UAAAipB,cAAA,WACE,MAAO3sB,MAAKisB,YAQdL,EAAAloB,UAAAkpB,mBAAA,SAAmBrrB,GACjBvB,KAAK6sB,cAAc7sB,KAAK8sB,WAAWvrB,KAUrCqqB,EAAAloB,UAAAmpB,cAAA,SAAcE,GACZ,GAAIA,IAAe/sB,KAAK2sB,gBAEtB,WADAlkB,SAAQ6f,KAAK,0DAIftoB,MAAKgtB,eACHD,EACA/sB,KAAK2sB,gBACLjB,EAAoBuB,UAClBjtB,KAAKsG,OAA+B0lB,0BAO1CJ,EAAAloB,UAAAwpB,2BAAA,WACEltB,KAAKqsB,gBAAiBrsB,KAAKsG,OAA+B0lB,0BAO5DJ,EAAAloB,UAAAypB,qBAAA,WACE,GAAoC,IAAhCntB,KAAK6rB,gBAAgB5qB,OAEvB,WADAwH,SAAQ6f,KAAK,mDAIf,IAAIyE,GAAa/sB,KAAK6rB,gBAAgB7rB,KAAK6rB,gBAAgB5qB,OAAS,EAE/D8rB,KACHA,EAAa/sB,KAAKksB,eAGpBlsB,KAAKgtB,eACHD,EACA/sB,KAAKisB,WACLP,EAAoB0B,WAClBptB,KAAKsG,OAA+B0lB,0BAS1CJ,EAAAloB,UAAA2pB,0BAAA,WACE,MAAOrtB,MAAKksB,cAAcoB,qBAO5B1B,EAAAloB,UAAAopB,SAAA,WACE,MAA4B9sB,MAAKsG,OAAO0E,WAAWqO,OAAO,SAAAhH,GAAa,MAAAA,aAAqBsZ,GAAA4B,qBAG9F5oB,OAAAC,eAAIgnB,EAAAloB,UAAA,8BAAJ,WACE,MAAO1D,MAAK8rB,oBAAoBC,uBAAuB3e,4CAGzDwe,EAAAloB,UAAAuL,QAAA,WACE9J,EAAAzB,UAAMuL,QAAOjO,KAAAhB,MACTA,KAAKosB,aACPpsB,KAAKosB,YAAY7gB,SAKrBqgB,EAAAloB,UAAA0O,aAAA,SAAaC,GACoB,IAA3BrS,KAAK8sB,WAAW7rB,QAAgBoR,YAAqBsZ,GAAA4B,oBACvDvtB,KAAKisB,WAAa5Z,GAEpBlN,EAAAzB,UAAM0O,aAAYpR,KAAAhB,KAACqS,IAGbuZ,EAAAloB,UAAAgpB,sBAAR,WAAA,GAAA3qB,GAAA/B,IACEA,MAAK8sB,WAAWrT,QAAQ,SAAC+T,GACnBA,IAASzrB,EAAKkqB,WAChBuB,EAAKvgB,gBAAgBmE,SAASrP,EAAK+K,UAAU8e,EAAc6B,oBAE3DD,EAAKvgB,gBAAgBsE,YAAYxP,EAAK+K,UAAU8e,EAAc6B,uBAK5D7B,EAAAloB,UAAA2oB,gBAAR,SAAwBqB,GACtB,GAAMC,GAAa3tB,KAAK2sB,gBAClBiB,EAAW5tB,KAAKksB,aAClByB,KAEGD,GACHC,EAAWnB,mBAGfxsB,KAAK6rB,mBACL7rB,KAAK6tB,kBAAkBD,EAAUD,EAAYD,GAC7C1tB,KAAKisB,WAAa2B,EAClB5tB,KAAK0sB,yBAGCd,EAAAloB,UAAAspB,eAAR,SACED,EACAY,EACAG,EACAC,GAEA/tB,KAAKisB,WAAac,EAEde,IAAcpC,EAAoBuB,SACpCjtB,KAAK6rB,gBAAgBvZ,KAAKya,GAE1B/sB,KAAK6rB,gBAAgBmC,MAGvBhuB,KAAK6tB,kBAAkBd,EAAYY,EAAYI,GAE/C/tB,KAAK0sB,wBACLK,EAAWT,gBACXqB,EAAWnB,mBAWLZ,EAAAloB,UAAAmqB,kBAAR,SAA0Bd,EAA+BY,EAA+BI,GACtF,GAAM/tB,KAAKsG,OAA+B0lB,wBAA1C,CAIA,GAAMiC,GAA0BjuB,KAAKiN,gBAC/BihB,EAA2BluB,KAAKiN,gBAAgBkhB,IAAI,GAGpDC,EAAqBF,EAAyBG,YAC9CC,EAAsBJ,EAAyBK,YAGrDZ,GAAW1gB,gBAAgB+D,IAAI,UAAW,QAC1ChR,KAAKiN,gBAAgB+D,KAAM0M,MAAO,GAAIsK,OAAQ,IAE9C,IAAMwG,GAAwBzB,EAAW9f,gBAAgBkhB,IAAI,GAGvDM,EAAQD,EAAsBE,WAAU,EAErBF,GAAsBG,WAC9BC,YAAYH,GAE7BA,EAAM/F,MAAM0B,QAAU,OAGtB,IAAMyE,GAA2BX,EAAyBG,YACpDS,EAA4BZ,EAAyBK,YAG3DE,GAAMM,cAAcC,YAAYP,GAChCd,EAAW1gB,gBAAgB+D,IAAI,UAAW,IAG1Cid,EAAwBjd,KACtB0M,MAAO0Q,EAAqB,KAC5BpG,OAAQsG,EAAsB,OAG3BP,GAEH/tB,KAAKivB,qBAIPhB,EAAwBjd,KACtB0M,MAAOmR,EAA2B,KAClC7G,OAAQ8G,EAA4B,SAIhClD,EAAAloB,UAAAurB,mBAAR,WAGEjvB,KAAKiN,gBAAgBkhB,IAAI,GAAGe,YAQtBtD,EAAAloB,UAAAyoB,uBAAR,WACEnsB,KAAKmvB,mBAAmB1V,QAAQ,SAACnY,GAC/B,GAAIA,EAAKkV,YAAelV,EAAa8tB,kBAAmBnmB,GAAAiB,UAAW,CACjE,GAAMmlB,GAAa/tB,EAAa8tB,QAC1BE,EAAaD,EAAUpiB,gBAAgB+D,IAAI,UAGjDqe,GAAUpiB,gBAAgB+D,IAAI,UAAW,QACrCnR,OAAO0vB,sBACTA,sBAAsB,WACpBF,EAAUpiB,gBAAgB+D,IAAI,UAAWse,KAK3CD,EAAUpiB,gBAAgB+D,IAAI,UAAWse,OAOzC1D,EAAAloB,UAAAyrB,iBAAR,WAEE,IAAiB,GADXK,MACW9lB,EAAA,EAAAgJ,EAAA1S,KAAK8sB,WAALpjB,EAAAgJ,EAAAzR,OAAAyI,IAAiB,CAA7B,GAAI8jB,GAAI9a,EAAAhJ,EACX8lB,GAASld,KAAImd,MAAbD,EAAiBhC,EAAKpU,YAExB,MAAOoW,IAGD5D,EAAAloB,UAAAwoB,YAAR,WACE,MAAOlsB,MAAK8sB,WAAW,IAGflB,EAAAloB,UAAA+oB,4BAAV,WACEzsB,KAAK8rB,oBAAoBC,uBAAuB5e,SAASnN,OAxUnC4rB,EAAA6B,kBAAoB,SA0U9C7B,GA5UmCphB,EAAA0B,UAAtB1M,GAAAosB,cAAAA,+hBCxDb,IAAAphB,GAAA7J,EAAA,eACA8J,EAAA9J,EAAA,eACAyL,EAAAzL,EAAA,sBACAwF,EAAAxF,EAAA,WAEAsI,EAAAtI,EAAA,eACAwJ,EAAAxJ,EAAA,aACA+uB,EAAA/uB,EAAA,2BACAgvB,EAAAhvB,EAAA,2BACAivB,EAAAjvB,EAAA,4BASAkvB,EAAA,SAAA1qB,GASE,QAAA0qB,GAAYntB,EAAqD0sB,EAAqC9oB,OAAA,KAAAA,IAAAA,KAAtG,IAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WALP+B,GAAA+tB,yBACNC,gBAAiB,GAAI3jB,GAAAE,iBAMrBvK,EAAKqtB,QAAUA,EAEfrtB,EAAKuE,OAASvE,EAAKwE,YAAYD,GAC7BE,SAAU,0BACTzE,EAAKuE,QAEM,OAAV5D,IACEA,YAAiB+H,GAAAI,UACnB9I,EAAKW,MAAQA,EAEbX,EAAKW,MAAQ,GAAIyD,GAAAkB,OAAOZ,KAAM/D,IAEhCX,EAAKqQ,aAAarQ,EAAKW,QAGzBX,EAAKqQ,aAAarQ,EAAKqtB,WA+D3B,MA1FuChqB,GAAAyqB,EAAA1qB,GA8BrC0qB,EAAAnsB,UAAA2B,UAAA,SAAUzD,EAAmBE,GAA7B,GAAAC,GAAA/B,IACE,IAAIA,KAAKovB,kBAAmBnmB,GAAAiB,WAAalK,KAAKovB,kBAAmBjlB,GAAAG,QAAS,CACxE,GAAI0lB,GAA0B,WAC5B,GAAMjuB,EAAKqtB,kBAAmBnmB,GAAAiB,WAAgBnI,EAAKqtB,kBAAmBjlB,GAAAG,QAAtE,CAKA,GAAI2lB,GAAoB,GAGnBluB,EAAKqtB,kBAAmBM,GAAAQ,uBAAyBnuB,EAAKqtB,QAAQe,eAC9DpuB,EAAKqtB,kBAAmBO,GAAAzmB,yBAC3B+mB,EAAoB,GAGlBluB,EAAKqtB,QAAQzV,YAAcsW,EAE7BluB,EAAKkG,OACIlG,EAAKqtB,kBAAmBQ,GAAA/U,yBAC7B/Y,EAAUyC,YAAY6rB,8BAE1BruB,EAAKkG,OAELlG,EAAK6F,OAKP7F,EAAKsuB,wBAGPrwB,MAAKovB,QAAQ1W,YAAY9U,UAAUosB,GACnChwB,KAAKovB,QAAQzW,cAAc/U,UAAUosB,GAGrCA,MAQJH,EAAAnsB,UAAA8S,SAAA,WACE,MAAOxW,MAAKyR,WAGJoe,EAAAnsB,UAAA2sB,qBAAV,WACErwB,KAAK8vB,wBAAwBC,gBAAgB5iB,SAASnN,OAQxD2E,OAAAC,eAAIirB,EAAAnsB,UAAA,uBAAJ,WACE,MAAO1D,MAAK8vB,wBAAwBC,gBAAgB3iB,4CAExDyiB,GA1FuCrlB,EAAA0B,UAA1B1M,GAAAqwB,kBAAAA,0nBClBb,IAAArlB,GAAA7J,EAAA,eACA2vB,EAAA3vB,EAAA,uBAEAyL,EAAAzL,EAAA,sBAMA4sB,EAAA,SAAApoB,GAUE,QAAAooB,GAAYjnB,GAAZ,GAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAPP+B,GAAAwuB,yBACNxE,uBAAwB,GAAI3f,GAAAE,gBAC5BkkB,SAAU,GAAIpkB,GAAAE,gBACdmkB,WAAY,GAAIrkB,GAAAE,iBAMhBvK,EAAKuE,OAASvE,EAAKwE,YAA6BD,GAC9CE,SAAU,0BACTzE,EAAKuE,UAgEZ,MA/EuClB,GAAAmoB,EAAApoB,GAkBrCooB,EAAA7pB,UAAA2B,UAAA,SAAUzD,EAAmBE,GAA7B,GAAAC,GAAA/B,IACEmF,GAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,EAkBxB,KAAsB,GAflB4uB,GAA8B,WAChC3uB,EAAK0qB,6BAIL,KAAsB,GADlBkE,GAAgB,KACEjnB,EAAA,EAAAgJ,EAAA3Q,EAAKqX,WAAL1P,EAAAgJ,EAAAzR,OAAAyI,IAAiB,CAAlC,GAAI2I,GAASK,EAAAhJ,EAChB2I,GAAUpF,gBAAgBsE,YAAYxP,EAAK+K,UAAUygB,EAAkBqD,aACnEve,EAAUZ,YACZkf,EAAgBte,GAGhBse,GACFA,EAAc1jB,gBAAgBmE,SAASrP,EAAK+K,UAAUygB,EAAkBqD,cAGtDlnB,EAAA,EAAAgJ,EAAA1S,KAAKoZ,WAAL1P,EAAAgJ,EAAAzR,OAAAyI,IAAiB,CAArBgJ,EAAAhJ,GACNqmB,gBAAgBnsB,UAAU8sB,KAIxCnD,EAAA7pB,UAAA4pB,kBAAA,WACE,IAAsB,GAAA5jB,GAAA,EAAAgJ,EAAA1S,KAAKoZ,WAAL1P,EAAAgJ,EAAAzR,OAAAyI,IAAiB,CACrC,GADgBgJ,EAAAhJ,GACF8M,WACZ,OAAO,EAIX,OAAO,GAGT+W,EAAA7pB,UAAA0V,SAAA,WACE,MAA4BpZ,MAAKsG,OAAO0E,WAAWqO,OAAO,SAAAhH,GAAa,MAAAA,aAAqBie,GAAAT,qBAG9FtC,EAAA7pB,UAAA+oB,4BAAA,WACEzsB,KAAKuwB,wBAAwBxE,uBAAuB5e,SAASnN,OAG/D2E,OAAAC,eAAI2oB,EAAA7pB,UAAA,8BAAJ,WACE,MAAO1D,MAAKuwB,wBAAwBxE,uBAAuB3e,4CAG7DmgB,EAAA7pB,UAAA4oB,cAAA,WACEtsB,KAAKuwB,wBAAwBC,SAASrjB,SAASnN,OAGjD2E,OAAAC,eAAI2oB,EAAA7pB,UAAA,gBAAJ,WACE,MAAO1D,MAAKuwB,wBAAwBC,SAASpjB,4CAG/CmgB,EAAA7pB,UAAA8oB,gBAAA,WACExsB,KAAKuwB,wBAAwBE,WAAWtjB,SAASnN,OAGnD2E,OAAAC,eAAI2oB,EAAA7pB,UAAA,kBAAJ,WACE,MAAO1D,MAAKuwB,wBAAwBE,WAAWrjB,4CA3EzBmgB,EAAAqD,WAAa,OA6EvCrD,GA/EuC/iB,EAAA0B,UAA1B1M,GAAA+tB,kBAAAA,8fCRb,IAAAsD,GAAAlwB,EAAA,sCAGAmwB,EAAA,SAAA3rB,GAEE,QAAA2rB,GAAYxqB,GAAZ,GAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAKuE,OAASvE,EAAKwE,YAAYD,GAC7BE,SAAU,iCACVC,KAAM,QAC+B1E,EAAKuE,UAUhD,MAlBiDlB,GAAA0rB,EAAA3rB,GAW/C2rB,EAAAptB,UAAA2B,UAAA,SAAUzD,EAAmBE,GAA7B,GAAAC,GAAA/B,IACEmF,GAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,GAExB9B,KAAKgG,QAAQpC,UAAU,WACrB7B,EAAKgvB,aAGXD,GAlBiDD,EAAAG,iCAApCxxB,GAAAsxB,4BAAAA,oeCJb,IAAAxpB,GAAA3G,EAAA,YAgCAqwB,EAAA,SAAA7rB,GAIE,QAAA6rB,GAAY1qB,GAAZ,GAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WACb+B,GAAKuE,OAASvE,EAAKwE,YAAYD,KAAgDvE,EAAKuE,QAEpFvE,EAAKkvB,UAAalvB,EAAKuE,OAA4C2qB,UACnElvB,EAAKgrB,WAAchrB,EAAKuE,OAA4CymB,aAgBxE,MAzBsD3nB,GAAA4rB,EAAA7rB,GAepD6rB,EAAAttB,UAAAqtB,QAAA,WACE/wB,KAAKixB,UAAU9D,wBAMjB6D,EAAAttB,UAAAwtB,eAAA,WACElxB,KAAKixB,UAAUpE,cAAc7sB,KAAK+sB,aAEtCiE,GAzBsD1pB,EAAAc,OAAzC5I,GAAAwxB,iCAAAA,0cC/Bb,IAAAH,GAAAlwB,EAAA,sCAEAe,EAAAf,EAAA,wBAEAwwB,EAAA,SAAAhsB,GACE,QAAAgsB,GAAY7qB,GAAZ,GAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAKuE,OAASvE,EAAKwE,YAAYD,GAC7BE,SAAU,iCACVC,KAAM/E,EAAAc,KAAKC,aAAa,SACaV,EAAKuE,UAUhD,MAjBiDlB,GAAA+rB,EAAAhsB,GAU/CgsB,EAAAztB,UAAA2B,UAAA,SAAUzD,EAAmBE,GAA7B,GAAAC,GAAA/B,IACEmF,GAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,GAExB9B,KAAKgG,QAAQpC,UAAU,WACrB7B,EAAKmvB,oBAGXC,GAjBiDN,EAAAG,iCAApCxxB,GAAA2xB,4BAAAA,8fCLb,IAAA9oB,GAAA1H,EAAA,kBACAywB,EAAAzwB,EAAA,mBAGAsR,EAAAtR,EAAA,iBAEAe,EAAAf,EAAA,wBAqBA0wB,EAAA,SAAAlsB,GAIE,QAAAksB,GAAY/qB,GAAZ,GAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,IAEb,IALM+B,EAAAuvB,0BAKDhrB,EAAOirB,cACV,KAAM,IAAI1wB,OAAM,2CAGlBkB,GAAKuE,OAASvE,EAAKwE,YAAYD,GAC7BE,SAAU,0BACVC,KAAM/E,EAAAc,KAAKC,aAAa,YACxB8uB,cAAe,KACfC,8BAA8B,GACDzvB,EAAKuE,UAyDxC,MAzE0ClB,GAAAisB,EAAAlsB,GAmBxCksB,EAAA3tB,UAAA2B,UAAA,SAAUzD,EAAmBE,GAA7B,GAAAC,GAAA/B,IACEmF,GAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,EAExB,IAAIwE,GAAStG,KAAKuE,YACdgtB,EAAgBjrB,EAAOirB,aA+B3B,IA7BAvxB,KAAKgG,QAAQpC,UAAU,WAEhB2tB,EAAc9f,WAIjB1P,EAAKuvB,sBAAsB3e,QAAQ8G,QAAQ,SAAA8X,GAAiB,MAAAA,GAActpB,SAE5EspB,EAAc7f,iBAEhB6f,EAAc1hB,OAAOjM,UAAU,WAE7B7B,EAAKiC,OAEPutB,EAAczhB,OAAOlM,UAAU,WAE7B7B,EAAKqF,QAKPtF,EAAU0O,gBAAgB5M,UAAU,SAACiG,GAC/BA,YAAkBunB,GAAAxF,gBACpB7pB,EAAKuvB,sBAAsBhf,KAAKzI,GAChCA,EAAOiG,OAAO4F,cAAc,WAAM,MAAAzD,GAAA9Q,WAAWC,OAAOW,EAAKuvB,sBAAuBznB,QAKhFvD,EAAOkrB,6BAA8B,CAEvC,GAAIC,GAAmC,WACjCF,EAAclE,4BACZtrB,EAAKuO,YACPvO,EAAK6F,OAGH7F,EAAK0P,WACP1P,EAAKkG,OAKXspB,GAAcxF,uBAAuBnoB,UAAU6tB,GAE/CA,MAGNJ,GAzE0ChpB,EAAAW,aAA7BxJ,GAAA6xB,qBAAAA,ihBC3Bb,IAAA5mB,GAAA9J,EAAA,eAKA+wB,EAAA,SAAAvsB,GAEE,QAAAusB,GAAYprB,OAAA,KAAAA,IAAAA,KAAZ,IAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAKuE,OAASvE,EAAKwE,YAAYD,GAC7BE,SAAU,aACTzE,EAAKuE,UAeZ,MAtB4BlB,GAAAssB,EAAAvsB,GAWhBusB,EAAAhuB,UAAA8N,YAAV,aAIUkgB,EAAAhuB,UAAA4N,YAAV,aAIUogB,EAAAhuB,UAAAgN,oBAAV,SAA8BsB,KAGhC0f,GAtB4BjnB,EAAAI,UAAfrL,GAAAkyB,OAAAA,6cCLb,IAAAvnB,GAAAxJ,EAAA,aAEAgxB,EAAAhxB,EAAA,oBAMAixB,EAAA,SAAAzsB,GAAA,QAAAysB,oDAOA,MAPqCxsB,GAAAwsB,EAAAzsB,GAEnCysB,EAAAluB,UAAA2B,UAAA,SAAUzD,EAAmBE,GAC3BqD,EAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,GAExB,GAAI6vB,GAAAE,sBAAsBjwB,EAAQ5B,KAAM8B,IAE5C8vB,GAPqCznB,EAAAG,QAAxB9K,GAAAoyB,gBAAAA,ieCRb,IAAApnB,GAAA7J,EAAA,eAEAwF,EAAAxF,EAAA,WAEAmxB,EAAAnxB,EAAA,gBACAyL,EAAAzL,EAAA,sBACAwL,EAAAxL,EAAA,UAEAe,EAAAf,EAAA,wBAKAoxB,EAAA,SAAA5sB,GAqBE,QAAA4sB,GAAYzrB,OAAA,KAAAA,IAAAA,KAAZ,IAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAhBP+B,GAAAiwB,6BAA+B,GAAI5lB,GAAAE,gBAkBzCvK,EAAKkwB,uBAAwB,EAC7BlwB,EAAKmwB,gBAAkB,GAAIC,IAAgB1rB,KAAM/E,EAAAc,KAAKC,aAAa,sBAEnEV,EAAKuE,OAASvE,EAAKwE,YAAYD,GAC7BE,SAAU,uBACTzE,EAAKuE,UAkOZ,MA/PqClB,GAAA2sB,EAAA5sB,GAgCnC4sB,EAAAruB,UAAA2B,UAAA,SAAUzD,EAAmBE,GAA7B,GAAAC,GAAA/B,IACEmF,GAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,EAExB,IAAIswB,GAAkB,GAAIC,EAC1BryB,MAAKoyB,gBAAkBA,EAEvBpyB,KAAKsyB,yBAA2B,GAAIC,GAA+BvyB,MAEnE4B,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYuuB,SAAU,SAACvwB,GAE1CA,EAAMif,WAERjf,EAAMif,SAASuR,IAAMxwB,EAAMif,SAASuR,KAAO,EAC3CxwB,EAAMif,SAASwR,OAASzwB,EAAMif,SAASwR,QAAU,EAGnD,IAAIC,GAAaP,EAAgBQ,SAAS3wB,EAE1CF,GAAKiwB,6BAA6B7kB,SAASlL,EAAO0wB,GAE9C5wB,EAAKkwB,uBACPlwB,EAAKuwB,yBAAyBO,YAAY9wB,EAAKmwB,iBAGjDnwB,EAAKuwB,yBAAyBQ,SAASH,GACvC5wB,EAAK6Q,mBACL7Q,EAAK6F,SAGPhG,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY8uB,QAAS,SAAC9wB,GAC7C,GAAI+wB,GAAgBZ,EAAgBa,QAAQhxB,EAExC+wB,KACFjxB,EAAKuwB,yBAAyBO,YAAYG,GAC1CjxB,EAAK6Q,oBAGFwf,EAAgBc,UACdnxB,EAAKkwB,uBAGRlwB,EAAKuwB,yBAAyBQ,SAAS/wB,EAAKmwB,iBAC5CnwB,EAAK6Q,oBAHL7Q,EAAKkG,SAQX,IAAIkrB,GAAuB,WACzBpxB,EAAKkG,OACLlG,EAAKuwB,yBAAyB/mB,QAC9B6mB,EAAgB7mB,QAChBxJ,EAAK0Q,mBACL1Q,EAAK6Q,mBAGPhR,GAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYC,aAAcivB,GACnDvxB,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYmvB,gBAAiBD,GACtDvxB,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYovB,iBAAkBF,GACvDvxB,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY4H,KAAMsnB,GAC3CvxB,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY8H,UAAWonB,GAChDvxB,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY6a,iBAAkBqU,GACvDvxB,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYE,eAAgBgvB,GAErDrxB,EAAU0O,gBAAgB5M,UAAU,SAACyO,GAC/BA,YAAqByf,GAAA5e,YACvBnR,EAAKkL,gBAAgBmE,SAASrP,EAAK+K,UAAUilB,EAAgBuB,6BAGjExxB,EAAU2O,gBAAgB7M,UAAU,SAACyO,GAC/BA,YAAqByf,GAAA5e,YACvBnR,EAAKkL,gBAAgBsE,YAAYxP,EAAK+K,UAAUilB,EAAgBuB,6BAIpEtzB,KAAKuzB,wBAAwB3xB,EAAQE,GAErCqxB,KAGFpB,EAAAruB,UAAA6vB,wBAAA,SAAwB3xB,EAAmBE,GAA3C,GAAAC,GAAA/B,KAEMwzB,EAAW,EAEXC,EAAoB,EAEpBC,GAA8B,EAE9Bzd,GAAU,EAER0d,EAAuB,WAC3B,GAAMC,GAAa,GAAIzB,IAAgB1rB,KAAM,KAC7CmtB,GAAW3mB,gBAAgB+D,KAGzB6iB,YAAa,QACbC,cAAe,QACfC,WAAc,WAEhBhyB,EAAKqQ,aAAawhB,GAClB7xB,EAAK6Q,mBACL7Q,EAAK6F,MAEL,IAAMosB,GAAsBJ,EAAW3mB,gBAAgByQ,QACjDuW,EAAuBL,EAAW3mB,gBAAgB+a,SAClDkM,EAAgBF,EAAsBC,CAE5ClyB,GAAKwQ,gBAAgBqhB,GACrB7xB,EAAK6Q,mBACA7Q,EAAKqwB,gBAAgBc,SACxBnxB,EAAKkG,MAQP,IAAMksB,GAAuBpyB,EAAKkL,gBAAgByQ,QAAU,GACtD0W,EAAwBryB,EAAKkL,gBAAgB+a,QAQnD,IAFiCmM,EAAuBC,EAH7BJ,EAAsBjC,EAAgBsC,oBAC9DJ,EAAuBlC,EAAgBuC,iBAIQ,CAGhDd,EAAWY,EAAwBrC,EAAgBuC,eAGnD,IAAMC,GAAgBJ,EAAuBpC,EAAgBsC,kBAE7DZ,GAAoBc,EADEf,EAAWU,MAMjCV,GAAWW,EAAuBpC,EAAgBsC,mBAAqBH,EACvET,EAAoB,CAItB,KAAkB,GAAA/pB,GAAA,EAAAgJ,EAAA3Q,EAAKyQ,gBAAL9I,EAAAgJ,EAAAzR,OAAAyI,IAAsB,CAAnC,GAAIhH,GAAKgQ,EAAAhJ,EACRhH,aAAiByvB,IACnBzvB,EAAMuK,gBAAgB+D,KACpB6iB,YAAgBL,EAAQ,KACxBgB,iBAAqBf,EAAiB,QAM9C7xB,GAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY8f,cAAe,WAC9C9N,EACF0d,IAEAD,GAA8B,IAIlC1zB,KAAKgyB,6BAA6BpuB,UAAU,SAAC3B,EAAyBS,GACjC,MAAlBT,EAAMif,WAMlBjL,IACHA,GAAU,EACVlU,EAAKkL,gBAAgBmE,SAASrP,EAAK+K,UAAUilB,EAAgB0C,gBAMzDf,IACFC,IACAD,GAA8B,IAIlChxB,EAAMuK,gBAAgB+D,KACpByW,KAAWxlB,EAAMif,SAASwR,OAASX,EAAgB2C,qBAAoB,IACvE3M,IAAU9lB,EAAMif,SAASuR,IAAMV,EAAgB4C,kBAAiB,IAChEd,YAAgBL,EAAQ,KACxBgB,iBAAqBf,EAAiB,SAI1C,IAAMlH,GAAQ,WACZxqB,EAAKkL,gBAAgBsE,YAAYxP,EAAK+K,UAAUilB,EAAgB0C,gBAChExe,GAAU,EAGZrU,GAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY8uB,QAAS,WACvChxB,EAAKqwB,gBAAgBc,SAGxB3G,MAIJ3qB,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYE,eAAgBooB,GACrD3qB,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYmvB,gBAAiB7G,GACtD3qB,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYovB,iBAAkB9G,IAGzDwF,EAAAruB,UAAAkxB,2BAAA,WACE50B,KAAKiyB,uBAAwB,EACxBjyB,KAAKoyB,gBAAgBc,UACxBlzB,KAAKsyB,yBAAyBQ,SAAS9yB,KAAKkyB,iBAC5ClyB,KAAK4S,mBACL5S,KAAK4H,SAITmqB,EAAAruB,UAAAmxB,2BAAA,WACE70B,KAAKiyB,uBAAwB,EAC7BjyB,KAAKsyB,yBAAyBO,YAAY7yB,KAAKkyB,iBAC/ClyB,KAAK4S,oBApPiBmf,EAAAuB,yBAA2B,qBAC3BvB,EAAA0C,cAAgB,SAGhB1C,EAAAuC,gBAAkB,GAElBvC,EAAAsC,mBAAqB,GAErBtC,EAAA4C,kBAAoB,IAAM5C,EAAgBuC,gBAE1CvC,EAAA2C,qBAAuB,IAAM3C,EAAgBsC,mBA4OvEtC,GA/PqCvnB,EAAA0B,UAAxB1M,GAAAuyB,gBAAAA,CA+Qb,IAAAI,GAAA,SAAAhtB,GAEE,QAAAgtB,GAAY7rB,OAAA,KAAAA,IAAAA,KAAZ,IAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAKuE,OAASvE,EAAKwE,YAAYD,GAC7BE,SAAU,qBACTzE,EAAKuE,UAUZ,MAjB4BlB,GAAA+sB,EAAAhtB,GAU1BR,OAAAC,eAAIutB,EAAAzuB,UAAA,cAAJ,WACE,MAAO1D,MAAKsG,OAAOwuB,wCAGrBnwB,OAAAC,eAAIutB,EAAAzuB,UAAA,mBAAJ,WACE,MAAO1D,MAAKsG,OAAOyuB,6CAEvB5C,GAjB4BhsB,EAAAkB,OAmB5BgrB,EAAA,WAKE,QAAAA,KACEryB,KAAKg1B,wBACLh1B,KAAKi1B,uBAAyB,EAgIlC,MAnHiB5C,GAAA6C,YAAf,SAA2BjzB,GACzB,GAAIK,GAAKL,EAAMoJ,MAAQ,IAAMpJ,EAAMwE,IAMnC,OAJIxE,GAAMif,WACR5e,GAAM,IAAML,EAAMif,SAASuR,IAAM,IAAMxwB,EAAMif,SAASwR,QAGjDpwB,GAQT+vB,EAAA3uB,UAAAkvB,SAAA,SAAS3wB,GACP,GAAIK,GAAK+vB,EAAsB6C,YAAYjzB,GAEvCS,EAAQ,GAAIyvB,IAGd1rB,KAAMxE,EAAM8K,MAAQslB,EAAsB8C,qBAAqBlzB,EAAMmzB,QAAUnzB,EAAMwE,KACrFquB,OAAQ7yB,EAAM6yB,OACdC,YAAa9yB,EAAM8yB,aAUrB,OANA/0B,MAAKg1B,qBAAqB1yB,GAAMtC,KAAKg1B,qBAAqB1yB,OAG1DtC,KAAKg1B,qBAAqB1yB,GAAIgQ,MAAOrQ,MAAKA,EAAES,MAAKA,IACjD1C,KAAKi1B,yBAEEvyB,GAGM2vB,EAAA8C,qBAAf,SAAoCE,GAClC,GAAKA,EAAL,CAIA,GAAMC,GAAS,GAAInpB,GAAAM,IAAI,OACrB8oB,IAAKF,GAGP,OADAC,GAAOtkB,IAAI,QAAS,QACbskB,EAAOnH,IAAI,GAAGqH,YAQvBnD,EAAA3uB,UAAA+xB,QAAA,SAAQxzB,GACN,GAAIK,GAAK+vB,EAAsB6C,YAAYjzB,GACvCyzB,EAAqB11B,KAAKg1B,qBAAqB1yB,EACnD,OAAIozB,IAAsBA,EAAmBz0B,OAAS,EAC7Cy0B,EAAmBnyB,IAAI,SAACoyB,GAAQ,MAAAA,GAAIjzB,QAEpC,MAUX2vB,EAAA3uB,UAAAuvB,QAAA,SAAQhxB,GACN,GAAIK,GAAK+vB,EAAsB6C,YAAYjzB,GACvCyzB,EAAqB11B,KAAKg1B,qBAAqB1yB;qDAEnD,IAAIozB,GAAsBA,EAAmBz0B,OAAS,EAAG,CASvD,GAAI20B,GAAoBF,EAAmB7iB,OAG3C,OAFA7S,MAAKi1B,yBAEEW,EAAkBlzB,MAEzB,MAAO,OAQXiC,OAAAC,eAAIytB,EAAA3uB,UAAA,gBAAJ,WAEE,MAAO1D,MAAKi1B,wDAOdtwB,OAAAC,eAAIytB,EAAA3uB,UAAA,eAAJ,WACE,MAAO1D,MAAK61B,SAAW,mCAMzBxD,EAAA3uB,UAAA6H,MAAA,WACEvL,KAAKg1B,wBACLh1B,KAAKi1B,uBAAyB,GAElC5C,KAEAE,EAAA,WAME,QAAAA,GAAoBuD,GAAA91B,KAAA81B,gBAAAA,EALZ91B,KAAA+1B,4BAMN/1B,KAAK81B,gBAAkBA,EA0D3B,MAlDEvD,GAAA7uB,UAAAovB,SAAA,SAASpwB,GACP,GAAMszB,GAAatzB,EAAMoyB,QAAU,SACnC,KAAK90B,KAAK+1B,yBAAyBC,GAAa,CAC9C,GAAMC,GAAkB,GAAIC,IAC1B1vB,SAAU,qBAAqBwvB,GAGjCh2B,MAAK+1B,yBAAyBC,GAAcC,EAExCvzB,EAAMqyB,YACRkB,EAAgBhpB,gBAAgBwe,KAAK,QAAS/oB,EAAMqyB,aAGpDkB,EAAgBhpB,eAGlB,KAAK,GAAMkpB,KAAcn2B,MAAK+1B,yBAC5B/1B,KAAK81B,gBAAgB1jB,aAAapS,KAAK+1B,yBAAyBI,IAIpEn2B,KAAK+1B,yBAAyBC,GAAYlD,SAASpwB,IAMrD6vB,EAAA7uB,UAAAmvB,YAAA,SAAYnwB,GACV,GAAMoyB,GAASpyB,EAAMoyB,QAAU,SAC/B,KAAK,GAAMkB,KAAch2B,MAAK+1B,yBAC5B/1B,KAAK+1B,yBAAyBC,GAAYnD,YAAYnwB,EAIpD1C,MAAK+1B,yBAAyBjB,GAAQ/c,YACxC/X,KAAK81B,gBAAgBvjB,gBAAgBvS,KAAK+1B,yBAAyBjB,UAC5D90B,MAAK+1B,yBAAyBjB,KAOzCvC,EAAA7uB,UAAA6H,MAAA,WACE,IAAK,GAAMyqB,KAAch2B,MAAK+1B,yBAC5B/1B,KAAK81B,gBAAgBvjB,gBAAgBvS,KAAK+1B,yBAAyBC,GAGrEh2B,MAAK+1B,6BAETxD,IAjEa/yB,GAAA+yB,+BAAAA,CAmEb,IAAA2D,GAAA,SAAA/wB,GAGE,QAAA+wB,GAAY5vB,OAAA,KAAAA,IAAAA,KAAZ,IAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAHP+B,GAAAq0B,WAAa,EAKnBr0B,EAAKuE,OAASvE,EAAKwE,YAAYD,GAC7B6C,YAAa,8BACZpH,EAAKuE,UAkBZ,MA1BsClB,GAAA8wB,EAAA/wB,GAWpC+wB,EAAAxyB,UAAAovB,SAAA,SAASH,GACP3yB,KAAKo2B,aACLp2B,KAAKoS,aAAaugB,GAClB3yB,KAAK4S,oBAGPsjB,EAAAxyB,UAAAmvB,YAAA,SAAYG,GACVhzB,KAAKo2B,aACLp2B,KAAKuS,gBAAgBygB,GACrBhzB,KAAK4S,oBAGAsjB,EAAAxyB,UAAAqU,QAAP,WACE,MAA2B,KAApB/X,KAAKo2B,YAEhBF,GA1BsC1rB,EAAA0B,mjBC3ftC,IAAAjD,GAAAtI,EAAA,eAGAgxB,EAAAhxB,EAAA,oBAMA01B,EAAA,SAAAlxB,GAEE,QAAAkxB,GAAY/vB,OAAA,KAAAA,IAAAA,KAAZ,IAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAKuE,OAASvE,EAAKwE,YAAYD,GAC7B6C,YAAa,yBACZpH,EAAKuE,UAQZ,MAfuClB,GAAAixB,EAAAlxB,GAUrCkxB,EAAA3yB,UAAA2B,UAAA,SAAUzD,EAAmBE,GAC3BqD,EAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,GAExB,GAAI6vB,GAAAE,sBAAsBjwB,EAAQ5B,KAAM8B,IAE5Cu0B,GAfuCptB,EAAAiB,UAA1B1K,GAAA62B,kBAAAA,meCTb,IAAAC,GAAA31B,EAAA,8BAGAe,EAAAf,EAAA,2BAKA41B,EAAA,SAAApxB,GAEE,QAAAoxB,GAAYjwB,GAAZ,GAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAKuE,OAASvE,EAAKwE,YAAYD,GAC7B6C,YAAa,gDACZpH,EAAKuE,UAmDZ,MA1D8ClB,GAAAmxB,EAAApxB,GAU5CoxB,EAAA7yB,UAAA2B,UAAA,SAAUzD,EAAmBE,GAA7B,GAAAC,GAAA/B,IACEmF,GAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,GAExB9B,KAAKuC,QAAQ,KAAMb,EAAAc,KAAKC,aAAa,YACrCzC,KAAKuC,QAAQ,QAASb,EAAAc,KAAKC,aAAa,iBACxCzC,KAAKuC,QAAQ,QAASb,EAAAc,KAAKC,aAAa,iBACxCzC,KAAKuC,QAAQ,MAAOb,EAAAc,KAAKC,aAAa,eACtCzC,KAAKuC,QAAQ,QAASb,EAAAc,KAAKC,aAAa,iBACxCzC,KAAKuC,QAAQ,OAAQb,EAAAc,KAAKC,aAAa,gBACvCzC,KAAKuC,QAAQ,OAAQb,EAAAc,KAAKC,aAAa,gBACvCzC,KAAKuC,QAAQ,SAAUb,EAAAc,KAAKC,aAAa,kBACzCzC,KAAKuC,QAAQ,UAAWb,EAAAc,KAAKC,aAAa,kBAE1C,IAAI+zB,GAAqB,WACnBz0B,EAAK00B,gBAAgBC,gBAAgBC,SAAW50B,EAAK00B,gBAAgBG,kBAAkBD,QACzF50B,EAAK80B,mBACH,WAAa90B,EAAK00B,gBAAgBC,gBAAgB5yB,MAAQ/B,EAAK00B,gBAAgBG,kBAAkB9yB,OAEnG/B,EAAK80B,mBAAmB,MAI5B72B,MAAK2D,eAAeC,UAAU,SAACiG,EAAQxG,GACrCtB,EAAK00B,gBAAgBC,gBAAgB5yB,MAAQT,IAG/CrD,KAAKy2B,gBAAgBC,gBAAgBI,UAAUlzB,UAAU,SAACiG,EAAQktB,GAE3Dh1B,EAAK00B,gBAAgBC,gBAAgBC,QAG9B50B,EAAK00B,gBAAgBG,kBAAkBD,UAEjD50B,EAAK00B,gBAAgBG,kBAAkB9yB,MAAQ,OAH/C/B,EAAK00B,gBAAgBG,kBAAkBrrB,QAKzCxJ,EAAKiB,WAAW+zB,EAASjzB,OACzB0yB,MAGFx2B,KAAKy2B,gBAAgBG,kBAAkBE,UAAUlzB,UAAU,WACzD4yB,MAIEx2B,KAAKy2B,gBAAgBC,gBAAgBC,SACvC32B,KAAKgD,WAAWhD,KAAKy2B,gBAAgBC,gBAAgB5yB,QAG3DyyB,GA1D8CD,EAAAU,yBAAjCx3B,GAAA+2B,yBAAAA,yfCRb,IAAAD,GAAA31B,EAAA,8BAGAe,EAAAf,EAAA,2BAKAs2B,EAAA,SAAA9xB,GAEE,QAAA8xB,GAAY3wB,GAAZ,GAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAKuE,OAASvE,EAAKwE,YAAYD,GAC7B6C,YAAa,kDACZpH,EAAKuE,UAoCZ,MA3CgDlB,GAAA6xB,EAAA9xB,GAU9C8xB,EAAAvzB,UAAA2B,UAAA,SAAUzD,EAAmBE,GAA7B,GAAAC,GAAA/B,IACEmF,GAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,GAExB9B,KAAKuC,QAAQ,KAAMb,EAAAc,KAAKC,aAAa,YACrCzC,KAAKuC,QAAQ,MAAOb,EAAAc,KAAKC,aAAa,WAAaqB,MAAO,OAC1D9D,KAAKuC,QAAQ,KAAMb,EAAAc,KAAKC,aAAa,WAAaqB,MAAO,MACzD9D,KAAKuC,QAAQ,KAAMb,EAAAc,KAAKC,aAAa,WAAaqB,MAAO,MACzD9D,KAAKuC,QAAQ,KAAMb,EAAAc,KAAKC,aAAa,WAAaqB,MAAO,MACzD9D,KAAKuC,QAAQ,IAAKb,EAAAc,KAAKC,aAAa,WAAaqB,MAAO,KAExD9D,KAAK2D,eAAeC,UAAU,SAACiG,EAAQxG,GACrCtB,EAAK00B,gBAAgBG,kBAAkB9yB,MAAQT,EAG1CtB,EAAK00B,gBAAgBG,kBAAkBD,QAGhC50B,EAAK00B,gBAAgBC,gBAAgBC,UAE/C50B,EAAK00B,gBAAgBC,gBAAgB5yB,MAAQ,SAH7C/B,EAAK00B,gBAAgBC,gBAAgBnrB,UAQzCvL,KAAKy2B,gBAAgBG,kBAAkBE,UAAUlzB,UAAU,SAACiG,EAAQktB,GAClEh1B,EAAKiB,WAAW+zB,EAASjzB,SAIvB9D,KAAKy2B,gBAAgBG,kBAAkBD,SACzC32B,KAAKgD,WAAWhD,KAAKy2B,gBAAgBG,kBAAkB9yB,QAG7DmzB,GA3CgDX,EAAAU,yBAAnCx3B,GAAAy3B,2BAAAA,yfCRb,IAAAX,GAAA31B,EAAA,8BAGAe,EAAAf,EAAA,2BAKAu2B,EAAA,SAAA/xB,GAEE,QAAA+xB,GAAY5wB,GAAZ,GAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAKuE,OAASvE,EAAKwE,YAAYD,GAC7B6C,YAAa,8CACZpH,EAAKuE,UAgCZ,MAvC4ClB,GAAA8xB,EAAA/xB,GAU1C+xB,EAAAxzB,UAAA2B,UAAA,SAAUzD,EAAmBE,GAA7B,GAAAC,GAAA/B,IACEmF,GAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,GAExB9B,KAAKuC,QAAQ,KAAMb,EAAAc,KAAKC,aAAa,YACrCzC,KAAKuC,QAAQ,SAAUb,EAAAc,KAAKC,aAAa,4CACzCzC,KAAKuC,QAAQ,YAAab,EAAAc,KAAKC,aAAa,+CAC5CzC,KAAKuC,QAAQ,UAAWb,EAAAc,KAAKC,aAAa,6CAC1CzC,KAAKuC,QAAQ,eAAgBb,EAAAc,KAAKC,aAAa,kDAE/CzC,KAAKy2B,gBAAgBU,cAAcL,UAAUlzB,UAAU,SAACiG,EAAQktB,GAC1DA,EAASJ,QACX50B,EAAK80B,mBAAmB,iBAAmBE,EAASjzB,OAEpD/B,EAAK80B,mBAAmB,MAI1B90B,EAAKiB,WAAW+zB,EAASjzB,SAG3B9D,KAAK2D,eAAeC,UAAU,SAACiG,EAAQxG,GACrCtB,EAAK00B,gBAAgBU,cAAcrzB,MAAQT,IAIzCrD,KAAKy2B,gBAAgBU,cAAcR,SACrC32B,KAAKgD,WAAWhD,KAAKy2B,gBAAgBU,cAAcrzB,QAGzDozB,GAvC4CZ,EAAAU,yBAA/Bx3B,GAAA03B,uBAAAA,yfCRb,IAAAZ,GAAA31B,EAAA,8BAGAe,EAAAf,EAAA,2BAKAy2B,EAAA,SAAAjyB,GAEE,QAAAiyB,GAAY9wB,GAAZ,GAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAKuE,OAASvE,EAAKwE,YAAYD,GAC7B6C,YAAa,0CACZpH,EAAKuE,UAmDZ,MA1DwClB,GAAAgyB,EAAAjyB,GAUtCiyB,EAAA1zB,UAAA2B,UAAA,SAAUzD,EAAmBE,GAA7B,GAAAC,GAAA/B,IACEmF,GAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,GAExB9B,KAAKuC,QAAQ,KAAMb,EAAAc,KAAKC,aAAa,YACrCzC,KAAKuC,QAAQ,QAASb,EAAAc,KAAKC,aAAa,iBACxCzC,KAAKuC,QAAQ,QAASb,EAAAc,KAAKC,aAAa,iBACxCzC,KAAKuC,QAAQ,MAAOb,EAAAc,KAAKC,aAAa,eACtCzC,KAAKuC,QAAQ,QAASb,EAAAc,KAAKC,aAAa,iBACxCzC,KAAKuC,QAAQ,OAAQb,EAAAc,KAAKC,aAAa,gBACvCzC,KAAKuC,QAAQ,OAAQb,EAAAc,KAAKC,aAAa,gBACvCzC,KAAKuC,QAAQ,SAAUb,EAAAc,KAAKC,aAAa,kBACzCzC,KAAKuC,QAAQ,UAAWb,EAAAc,KAAKC,aAAa,kBAE1C,IAAI+zB,GAAqB,WACnBz0B,EAAK00B,gBAAgBY,UAAUV,SAAW50B,EAAK00B,gBAAgBa,YAAYX,QAC7E50B,EAAK80B,mBACH,aAAe90B,EAAK00B,gBAAgBY,UAAUvzB,MAAQ/B,EAAK00B,gBAAgBa,YAAYxzB,OAEzF/B,EAAK80B,mBAAmB,MAI5B72B,MAAK2D,eAAeC,UAAU,SAACiG,EAAQxG,GACrCtB,EAAK00B,gBAAgBY,UAAUvzB,MAAQT,IAGzCrD,KAAKy2B,gBAAgBY,UAAUP,UAAUlzB,UAAU,SAACiG,EAAQktB,GAErDh1B,EAAK00B,gBAAgBY,UAAUV,QAGxB50B,EAAK00B,gBAAgBa,YAAYX,UAE3C50B,EAAK00B,gBAAgBa,YAAYxzB,MAAQ,OAHzC/B,EAAK00B,gBAAgBa,YAAY/rB,QAKnCxJ,EAAKiB,WAAW+zB,EAASjzB,OACzB0yB,MAGFx2B,KAAKy2B,gBAAgBa,YAAYR,UAAUlzB,UAAU,WACnD4yB,MAIEx2B,KAAKy2B,gBAAgBY,UAAUV,SACjC32B,KAAKgD,WAAWhD,KAAKy2B,gBAAgBY,UAAUvzB,QAGrDszB,GA1DwCd,EAAAU,yBAA3Bx3B,GAAA43B,mBAAAA,yfCRb,IAAAd,GAAA31B,EAAA,8BAGAe,EAAAf,EAAA,2BAKA42B,EAAA,SAAApyB,GAEE,QAAAoyB,GAAYjxB,GAAZ,GAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAKuE,OAASvE,EAAKwE,YAAYD,GAC7B6C,YAAa,2CACZpH,EAAKuE,UAmCZ,MA1CyClB,GAAAmyB,EAAApyB,GAUvCoyB,EAAA7zB,UAAA2B,UAAA,SAAUzD,EAAmBE,GAA7B,GAAAC,GAAA/B,IACEmF,GAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,GAExB9B,KAAKuC,QAAQ,KAAMb,EAAAc,KAAKC,aAAa,YACrCzC,KAAKuC,QAAQ,kBAAmBb,EAAAc,KAAKC,aAAa,mDAClDzC,KAAKuC,QAAQ,oBAAqBb,EAAAc,KAAKC,aAAa,qDACpDzC,KAAKuC,QAAQ,sBAAuBb,EAAAc,KAAKC,aAAa,uDACtDzC,KAAKuC,QAAQ,wBAAyBb,EAAAc,KAAKC,aAAa,qDACxDzC,KAAKuC,QAAQ,SAAUb,EAAAc,KAAKC,aAAa,0CACzCzC,KAAKuC,QAAQ,UAAWb,EAAAc,KAAKC,aAAa,2CAC1CzC,KAAKuC,QAAQ,eAAgBb,EAAAc,KAAKC,aAAa,gDAE/CzC,KAAKy2B,gBAAgBe,WAAWV,UAAUlzB,UAAU,SAACiG,EAAQktB,GACvDA,EAASJ,QACX50B,EAAK80B,mBAAmB,cAAgBE,EAASjzB,OAEjD/B,EAAK80B,mBAAmB,MAI1B90B,EAAKiB,WAAW+zB,EAASjzB,SAG3B9D,KAAK2D,eAAeC,UAAU,SAACiG,EAAQxG,GACrCtB,EAAK00B,gBAAgBe,WAAW1zB,MAAQT,IAItCrD,KAAKy2B,gBAAgBe,WAAWb,SAClC32B,KAAKgD,WAAWhD,KAAKy2B,gBAAgBe,WAAW1zB,QAGtDyzB,GA1CyCjB,EAAAU,yBAA5Bx3B,GAAA+3B,oBAAAA,yfCRb,IAAAjB,GAAA31B,EAAA,8BAGAe,EAAAf,EAAA,2BAKA82B,EAAA,SAAAtyB,GAEE,QAAAsyB,GAAYnxB,GAAZ,GAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAKuE,OAASvE,EAAKwE,YAAYD,GAC7B6C,YAAa,4CACZpH,EAAKuE,UAmCZ,MA1C0ClB,GAAAqyB,EAAAtyB,GAUxCsyB,EAAA/zB,UAAA2B,UAAA,SAAUzD,EAAmBE,GAA7B,GAAAC,GAAA/B,IACEmF,GAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,GAExB9B,KAAKuC,QAAQ,KAAMb,EAAAc,KAAKC,aAAa,YACrCzC,KAAKuC,QAAQ,MAAOb,EAAAc,KAAKC,aAAa,WAAaqB,MAAO,OAC1D9D,KAAKuC,QAAQ,KAAMb,EAAAc,KAAKC,aAAa,WAAaqB,MAAO,MACzD9D,KAAKuC,QAAQ,KAAMb,EAAAc,KAAKC,aAAa,WAAaqB,MAAO,MACzD9D,KAAKuC,QAAQ,KAAMb,EAAAc,KAAKC,aAAa,WAAaqB,MAAO,MAEzD9D,KAAK2D,eAAeC,UAAU,SAACiG,EAAQxG,GACrCtB,EAAK00B,gBAAgBa,YAAYxzB,MAAQT,EAGpCtB,EAAK00B,gBAAgBa,YAAYX,QAG1B50B,EAAK00B,gBAAgBY,UAAUV,UAEzC50B,EAAK00B,gBAAgBY,UAAUvzB,MAAQ,SAHvC/B,EAAK00B,gBAAgBY,UAAU9rB,UAQnCvL,KAAKy2B,gBAAgBa,YAAYR,UAAUlzB,UAAU,SAACiG,EAAQktB,GAC5Dh1B,EAAKiB,WAAW+zB,EAASjzB,SAIvB9D,KAAKy2B,gBAAgBa,YAAYX,SACnC32B,KAAKgD,WAAWhD,KAAKy2B,gBAAgBa,YAAYxzB,QAGvD2zB,GA1C0CnB,EAAAU,yBAA7Bx3B,GAAAi4B,qBAAAA,yfCRb,IAAAnB,GAAA31B,EAAA,8BAGAe,EAAAf,EAAA,2BAKA+2B,EAAA,SAAAvyB,GAEE,QAAAuyB,GAAYpxB,GAAZ,GAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAKuE,OAASvE,EAAKwE,YAAYD,GAC7B6C,YAAa,yCACZpH,EAAKuE,UAmCZ,MA1CuClB,GAAAsyB,EAAAvyB,GAUrCuyB,EAAAh0B,UAAA2B,UAAA,SAAUzD,EAAmBE,GAA7B,GAAAC,GAAA/B,IACEmF,GAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,GAExB9B,KAAKuC,QAAQ,KAAMb,EAAAc,KAAKC,aAAa,YACrCzC,KAAKuC,QAAQ,KAAMb,EAAAc,KAAKC,aAAa,WAAaqB,MAAO,MACzD9D,KAAKuC,QAAQ,KAAMb,EAAAc,KAAKC,aAAa,WAAaqB,MAAO,MACzD9D,KAAKuC,QAAQ,MAAOb,EAAAc,KAAKC,aAAa,WAAaqB,MAAO,OAC1D9D,KAAKuC,QAAQ,MAAOb,EAAAc,KAAKC,aAAa,WAAaqB,MAAO,OAC1D9D,KAAKuC,QAAQ,MAAOb,EAAAc,KAAKC,aAAa,WAAaqB,MAAO,OAC1D9D,KAAKuC,QAAQ,MAAOb,EAAAc,KAAKC,aAAa,WAAaqB,MAAO,OAC1D9D,KAAKuC,QAAQ,MAAOb,EAAAc,KAAKC,aAAa,WAAaqB,MAAO,OAE1D9D,KAAKy2B,gBAAgBjD,SAASsD,UAAUlzB,UAAU,SAACiG,EAAQktB,GACrDA,EAASJ,QACX50B,EAAK80B,mBAAmB,YAAcE,EAASjzB,OAE/C/B,EAAK80B,mBAAmB,MAI1B90B,EAAKiB,WAAW+zB,EAASjzB,SAG3B9D,KAAK2D,eAAeC,UAAU,SAACiG,EAAQxG,GACrCtB,EAAK00B,gBAAgBjD,SAAS1vB,MAAQT,IAIpCrD,KAAKy2B,gBAAgBjD,SAASmD,SAChC32B,KAAKgD,WAAWhD,KAAKy2B,gBAAgBjD,SAAS1vB,QAGpD4zB,GA1CuCpB,EAAAU,yBAA1Bx3B,GAAAk4B,kBAAAA,yfCNb,IAAAzuB,GAAAtI,EAAA,gBAWAq2B,EAAA,SAAA7xB,GAME,QAAA6xB,GAAY1wB,GAAZ,GAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAK00B,gBAAkBnwB,EAAOmwB,gBAC9B10B,EAAK41B,QAAUrxB,EAAOqxB,UAoB1B,MA9B8CvyB,GAAA4xB,EAAA7xB,GAiBlC6xB,EAAAtzB,UAAAmzB,mBAAV,SAA6BrwB,GAEvBxG,KAAK43B,kBACP53B,KAAK23B,QAAQ1qB,gBAAgBsE,YAAYvR,KAAK43B,iBAC9C53B,KAAK43B,gBAAkB,MAIrBpxB,IACFxG,KAAK43B,gBAAkB53B,KAAK8M,UAAUtG,GACtCxG,KAAK23B,QAAQ1qB,gBAAgBmE,SAASpR,KAAK43B,mBAGjDZ,GA9B8C/tB,EAAAiB,UAAjC1K,GAAAw3B,yBAAAA,8cCZb,IAAAxsB,GAAA7J,EAAA,gBACAwL,EAAAxL,EAAA,aAEAe,EAAAf,EAAA,2BAMAk3B,EAAA,SAAA1yB,GAME,QAAA0yB,GAAYvxB,GAAZ,GAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAK+1B,OAASxxB,EAAOwxB,OACrB/1B,EAAK0E,KAAOH,EAAOG,KAEnB1E,EAAKuE,OAASvE,EAAKwE,YAA6BD,GAC9CE,SAAU,WACVwE,YACEjJ,EAAK+1B,SAEN/1B,EAAKuE,UAcZ,MA/B2ClB,GAAAyyB,EAAA1yB,GAoB/B0yB,EAAAn0B,UAAA6I,aAAV,WASE,MARmB,IAAIJ,GAAAM,IAAI,QACzBnK,GAAMtC,KAAKsG,OAAOhE,GAClBqK,MAAS3M,KAAK4M,kBACbC,OACD,GAAIV,GAAAM,IAAI,WAAYM,KAAKrL,EAAAc,KAAKsE,oBAAoB9G,KAAKyG,OACvDzG,KAAK83B,OAAO7qB,kBAKlB4qB,GA/B2CrtB,EAAA0B,UAA9B1M,GAAAq4B,sBAAAA,0fCVb,IAAAE,GAAAp3B,EAAA,sBACA8J,EAAA9J,EAAA,gBACAyL,EAAAzL,EAAA,yBAkBAq3B,EAAA,WAiBE,QAAAA,KAAA,GAAAj2B,GAAA/B,IAZQA,MAAAi4B,aACNZ,UAAW,GAAIa,GAAiCl4B,MAChDs3B,YAAa,GAAIY,GAAiCl4B,MAClDw3B,WAAY,GAAIU,GAAiCl4B,MACjDwzB,SAAU,GAAI0E,GAAiCl4B,MAC/Cm3B,cAAe,GAAIe,GAAiCl4B,MACpD02B,gBAAiB,GAAIwB,GAAiCl4B,MACtD42B,kBAAmB,GAAIsB,GAAiCl4B,MACxDm4B,YAAa,GAAID,GAAiCl4B,MAClDo4B,cAAe,GAAIF,GAAiCl4B,OAIpDA,KAAKq4B,gBACLr4B,KAAKs4B,gBAAkBC,EAAeC,WAAW1rB,UAAU,8BAE3D,KAAK,GAAI2rB,KAAgBz4B,MAAKi4B,sBAArBQ,GACPxhB,EAAKghB,YAAYQ,GAAc3B,UAAUlzB,UAAU,SAACiG,EAAQktB,GACtDA,EAASJ,QACL50B,EAAKs2B,aAAcI,GAAgB1B,EAASjzB,YAGrC/B,GAAKs2B,aAAcI,GAIlC12B,EAAK22B,UAVAD,EAcTz4B,MAAKqqB,OA+DT,MA5DS2N,GAAAt0B,UAAA6oB,MAAP,WACE,IAAK,GAAIkM,KAAgBz4B,MAAKi4B,YAC5Bj4B,KAAKi4B,YAAYQ,GAAcltB,SAInC5G,OAAAC,eAAWozB,EAAAt0B,UAAA,iBAAX,WACE,MAAO1D,MAAKi4B,YAAYZ,2CAG1B1yB,OAAAC,eAAWozB,EAAAt0B,UAAA,mBAAX,WACE,MAAO1D,MAAKi4B,YAAYX,6CAG1B3yB,OAAAC,eAAWozB,EAAAt0B,UAAA,kBAAX,WACE,MAAO1D,MAAKi4B,YAAYT,4CAG1B7yB,OAAAC,eAAWozB,EAAAt0B,UAAA,gBAAX,WACE,MAAO1D,MAAKi4B,YAAYzE,0CAG1B7uB,OAAAC,eAAWozB,EAAAt0B,UAAA,qBAAX,WACE,MAAO1D,MAAKi4B,YAAYd,+CAG1BxyB,OAAAC,eAAWozB,EAAAt0B,UAAA,uBAAX,WACE,MAAO1D,MAAKi4B,YAAYvB,iDAG1B/xB,OAAAC,eAAWozB,EAAAt0B,UAAA,yBAAX,WACE,MAAO1D,MAAKi4B,YAAYrB,mDAG1BjyB,OAAAC,eAAWozB,EAAAt0B,UAAA,mBAAX,WACE,MAAO1D,MAAKi4B,YAAYE,6CAG1BxzB,OAAAC,eAAWozB,EAAAt0B,UAAA,qBAAX,WACE,MAAO1D,MAAKi4B,YAAYG,+CAMnBJ,EAAAt0B,UAAAg1B,KAAP,WACEX,EAAAY,aAAaC,UAAU54B,KAAKs4B,gBAAiBt4B,KAAKq4B,eAM7CL,EAAAt0B,UAAA2mB,KAAP,WACErqB,KAAKq4B,aAAeN,EAAAY,aAAaE,UAA4B74B,KAAKs4B,oBAGlE,KAAK,GAAIvB,KAAY/2B,MAAKq4B,aACxBr4B,KAAKi4B,YAAYlB,GAAUjzB,MAAc9D,KAAKq4B,aAActB,IAGlEiB,IAlGax4B,GAAAw4B,wBAAAA,CAwGb,IAAAO,GAAA,SAAApzB,GAAA,QAAAozB,oDAeA,MAf6BnzB,GAAAmzB,EAAApzB,GAIbozB,EAAAC,SAAd,WAKE,MAJKD,GAAeO,YAClBP,EAAeO,UAAY,GAAIP,IAG1BA,EAAeO,WAGjBP,EAAA70B,UAAAoJ,UAAP,SAAiBqE,GACf,MAAOhM,GAAAzB,UAAMoJ,UAAS9L,KAAAhB,KAACmR,IAE3BonB,GAf6B9tB,EAAAI,WAiB7BqtB,EAAA,WAME,QAAAA,GAAYa,GACV/4B,KAAKg5B,SAAWD,EAChB/4B,KAAKi5B,WAAa,GAAI7sB,GAAAE,gBAgC1B,MA7BS4rB,GAAAx0B,UAAAizB,MAAP,WACE,MAAsB,OAAf32B,KAAKk5B,QAGPhB,EAAAx0B,UAAA6H,MAAP,WACEvL,KAAKk5B,OAAS,KACdl5B,KAAKm5B,eAAe,OAGtBx0B,OAAAC,eAAWszB,EAAAx0B,UAAA,aAAX,WACE,MAAO1D,MAAKk5B,YAGd,SAAiBp1B,GACM,gBAAVA,IAAgC,SAAVA,IAC/BA,EAAQ,MAGV9D,KAAKk5B,OAASp1B,EACd9D,KAAKm5B,eAAer1B,oCAGZo0B,EAAAx0B,UAAAy1B,eAAV,SAAyBr1B,GACvB9D,KAAKi5B,WAAW9rB,SAASnN,KAAKg5B,SAAUh5B,OAG1C2E,OAAAC,eAAWszB,EAAAx0B,UAAA,iBAAX,WACE,MAAO1D,MAAKi5B,WAAW7rB,4CAE3B8qB,IAxCa14B,GAAA04B,yBAAAA,igBC7Ib,IAAAvM,GAAAhrB,EAAA,wBAIAy4B,EAAAz4B,EAAA,6BAEA04B,EAAA14B,EAAA,uBACA24B,EAAA34B,EAAA,yBACA44B,EAAA54B,EAAA,wBACA64B,EAAA74B,EAAA,0BACA84B,EAAA94B,EAAA,4BACA+4B,EAAA/4B,EAAA,8BACAg5B,EAAAh5B,EAAA,gCACAi5B,EAAAj5B,EAAA,0BACAk5B,EAAAl5B,EAAA,4BACAm5B,EAAAn5B,EAAA,iCAEAo5B,EAAAp5B,EAAA,kCACA2vB,EAAA3vB,EAAA,wBAEAe,EAAAf,EAAA,2BAOAq5B,EAAA,SAAA70B,GAKE,QAAA60B,GAAY1zB,GAAZ,GAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,IAEb+B,GAAK41B,QAAUrxB,EAAOqxB,QACtB51B,EAAKwvB,cAAgBjrB,EAAOirB,aAE5B,IAAIwH,GAAU,GAAIK,GAAApB,8BAElBj2B,GAAKuE,OAASvE,EAAKwE,YAAYD,GAC7B0E,YACE,GAAIslB,GAAAT,kBAAkBnuB,EAAAc,KAAKC,aAAa,gCAAiC,GAAI42B,GAAA3B,mBAC3EC,QAAS51B,EAAK41B,QAASlB,gBAAiBsC,KAE1C,GAAIzI,GAAAT,kBAAkBnuB,EAAAc,KAAKC,aAAa,kCAAmC,GAAI62B,GAAA/B,qBAC7EI,QAAS51B,EAAK41B,QAASlB,gBAAiBsC,KAE1C,GAAIzI,GAAAT,kBAAkBnuB,EAAAc,KAAKC,aAAa,iCAAkC,GAAI82B,GAAAnC,oBAC5EO,QAAS51B,EAAK41B,QAASlB,gBAAiBsC,KAE1C,GAAIzI,GAAAT,kBAAkBnuB,EAAAc,KAAKC,aAAa,mCAAoC,GAAI+2B,GAAA/B,sBAC9EE,QAAS51B,EAAK41B,QAASlB,gBAAiBsC,KAE1C,GAAIzI,GAAAT,kBAAkBnuB,EAAAc,KAAKC,aAAa,oCAAqC,GAAIg3B,GAAAvC,wBAC/ES,QAAS51B,EAAK41B,QAASlB,gBAAiBsC,KAE1C,GAAIzI,GAAAT,kBAAkBnuB,EAAAc,KAAKC,aAAa,uCAAwC,GAAIi3B,GAAAnD,0BAClFoB,QAAS51B,EAAK41B,QAASlB,gBAAiBsC,KAE1C,GAAIzI,GAAAT,kBAAkBnuB,EAAAc,KAAKC,aAAa,yCAA0C,GAAIk3B,GAAA1C,4BACpFU,QAAS51B,EAAK41B,QAASlB,gBAAiBsC,KAE1C,GAAIzI,GAAAT,kBAAkBnuB,EAAAc,KAAKC,aAAa,mCAAoC,GAAIm3B,GAAAK,sBAC9EtC,QAAS51B,EAAK41B,QAASlB,gBAAiBsC,KAE1C,GAAIzI,GAAAT,kBAAkBnuB,EAAAc,KAAKC,aAAa,qCAAsC,GAAIo3B,GAAAK,wBAChFvC,QAAS51B,EAAK41B,QAASlB,gBAAiBsC,KAE1C,GAAIzI,GAAAT,kBAAkB,GAAIkK,GAAAjJ,6BACxBG,UAAWlvB,EAAKwvB,cAChB9qB,KAAM/E,EAAAc,KAAKC,aAAa,UACtB,GAAIq3B,GAAAK,6BACN1D,gBAAiBsC,OAGpBh3B,EAAKuE,UAcZ,MA/D+ClB,GAAA40B,EAAA70B,GAoD7C60B,EAAAt2B,UAAA2B,UAAA,SAAUzD,EAAmBE,GAA7B,GAAAC,GAAA/B,IACEmF,GAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,GAExB9B,KAAKwwB,SAAS5sB,UAAU,WACtB7B,EAAK41B,QAAQ/C,+BAGf50B,KAAKywB,WAAW7sB,UAAU,WACxB7B,EAAK41B,QAAQ9C,gCAGnBmF,GA/D+CrO,EAAA4B,kBAAlC/tB,GAAAw6B,0BAAAA,u3BCzBb,IAAA1yB,GAAA3G,EAAA,aAEAe,EAAAf,EAAA,2BASAw5B,EAAA,SAAAh1B,GAEE,QAAAg1B,GAAY7zB,GAAZ,GAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAKuE,OAASvE,EAAKwE,YAAYD,GAC7BE,SAAU,iCACVC,KAAM/E,EAAAc,KAAKC,aAAa,UACvBV,EAAKuE,UAUZ,MAlBiDlB,GAAA+0B,EAAAh1B,GAW/Cg1B,EAAAz2B,UAAA2B,UAAA,SAAUzD,EAAmBE,GAA7B,GAAAC,GAAA/B,IACEmF,GAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,GAExB9B,KAAKgG,QAAQpC,UAAU,WACe7B,EAAKuE,OAAQmwB,gBAAgBlK,WAGvE4N,GAlBiD7yB,EAAAc,OAApC5I,GAAA26B,4BAAAA,weCbb,IAAA7D,GAAA31B,EAAA,8BAGAe,EAAAf,EAAA,2BAKAs5B,EAAA,SAAA90B,GAEE,QAAA80B,GAAY3zB,GAAZ,GAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAKuE,OAASvE,EAAKwE,YAAYD,GAC7B6C,YAAa,4CACZpH,EAAKuE,UAqDZ,MA5D0ClB,GAAA60B,EAAA90B,GAUxC80B,EAAAv2B,UAAA2B,UAAA,SAAUzD,EAAmBE,GAA7B,GAAAC,GAAA/B,IACEmF,GAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,GAExB9B,KAAKuC,QAAQ,KAAMb,EAAAc,KAAKC,aAAa,YACrCzC,KAAKuC,QAAQ,QAASb,EAAAc,KAAKC,aAAa,iBACxCzC,KAAKuC,QAAQ,QAASb,EAAAc,KAAKC,aAAa,iBACxCzC,KAAKuC,QAAQ,MAAOb,EAAAc,KAAKC,aAAa,eACtCzC,KAAKuC,QAAQ,QAASb,EAAAc,KAAKC,aAAa,iBACxCzC,KAAKuC,QAAQ,OAAQb,EAAAc,KAAKC,aAAa,gBACvCzC,KAAKuC,QAAQ,OAAQb,EAAAc,KAAKC,aAAa,gBACvCzC,KAAKuC,QAAQ,SAAUb,EAAAc,KAAKC,aAAa,kBACzCzC,KAAKuC,QAAQ,UAAWb,EAAAc,KAAKC,aAAa,kBAI1C,IAAI+zB,GAAqB,WACnBz0B,EAAK00B,gBAAgB0B,YAAYxB,SAAW50B,EAAK00B,gBAAgB2B,cAAczB,QACjF50B,EAAK80B,mBACH,eAAiB90B,EAAK00B,gBAAgB0B,YAAYr0B,MAAQ/B,EAAK00B,gBAAgB2B,cAAct0B,OAE/F/B,EAAK80B,mBAAmB,MAI5B72B,MAAK2D,eAAeC,UAAU,SAACiG,EAAQxG,GACrCtB,EAAK00B,gBAAgB0B,YAAYr0B,MAAQT,IAG3CrD,KAAKy2B,gBAAgB0B,YAAYrB,UAAUlzB,UAAU,SAACiG,EAAQktB,GAEvDh1B,EAAK00B,gBAAgB0B,YAAYxB,QAG1B50B,EAAK00B,gBAAgB2B,cAAczB,UAE7C50B,EAAK00B,gBAAgB2B,cAAct0B,MAAQ,OAH3C/B,EAAK00B,gBAAgB2B,cAAc7sB,QAKrCxJ,EAAKiB,WAAW+zB,EAASjzB,OACzB0yB,MAGFx2B,KAAKy2B,gBAAgB2B,cAActB,UAAUlzB,UAAU,WACrD4yB,MAIEx2B,KAAKy2B,gBAAgB0B,YAAYxB,SACnC32B,KAAKgD,WAAWhD,KAAKy2B,gBAAgB0B,YAAYr0B,QAGvDm2B,GA5D0C3D,EAAAU,yBAA7Bx3B,GAAAy6B,qBAAAA,yfCRb,IAAA3D,GAAA31B,EAAA,8BAGAe,EAAAf,EAAA,2BAKAu5B,EAAA,SAAA/0B,GAEE,QAAA+0B,GAAY5zB,GAAZ,GAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAKuE,OAASvE,EAAKwE,YAAYD,GAC7B6C,YAAa,8CACZpH,EAAKuE,UAoCZ,MA3C4ClB,GAAA80B,EAAA/0B,GAU1C+0B,EAAAx2B,UAAA2B,UAAA,SAAUzD,EAAmBE,GAA7B,GAAAC,GAAA/B,IACEmF,GAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,GAExB9B,KAAKuC,QAAQ,KAAMb,EAAAc,KAAKC,aAAa,YACrCzC,KAAKuC,QAAQ,MAAOb,EAAAc,KAAKC,aAAa,WAAaqB,MAAO,OAC1D9D,KAAKuC,QAAQ,KAAMb,EAAAc,KAAKC,aAAa,WAAaqB,MAAO,MACzD9D,KAAKuC,QAAQ,KAAMb,EAAAc,KAAKC,aAAa,WAAaqB,MAAO,MACzD9D,KAAKuC,QAAQ,KAAMb,EAAAc,KAAKC,aAAa,WAAaqB,MAAO,MACzD9D,KAAKuC,QAAQ,IAAKb,EAAAc,KAAKC,aAAa,WAAaqB,MAAO,KAExD9D,KAAK2D,eAAeC,UAAU,SAACiG,EAAQxG,GACrCtB,EAAK00B,gBAAgB2B,cAAct0B,MAAQT,EAGtCtB,EAAK00B,gBAAgB2B,cAAczB,QAG5B50B,EAAK00B,gBAAgB0B,YAAYxB,UAE3C50B,EAAK00B,gBAAgB0B,YAAYr0B,MAAQ,SAHzC/B,EAAK00B,gBAAgB0B,YAAY5sB,UAQrCvL,KAAKy2B,gBAAgB2B,cAActB,UAAUlzB,UAAU,SAACiG,EAAQktB,GAC9Dh1B,EAAKiB,WAAW+zB,EAASjzB,SAIvB9D,KAAKy2B,gBAAgB2B,cAAczB,SACrC32B,KAAKgD,WAAWhD,KAAKy2B,gBAAgB2B,cAAct0B,QAGzDo2B,GA3C4C5D,EAAAU,yBAA/Bx3B,GAAA06B,uBAAAA,yfCRb,IAAA1vB,GAAA7J,EAAA,eAEAy5B,EAAAz5B,EAAA,mBAkBA05B,EAAA,SAAAl1B,GAEE,QAAAk1B,GAAY/zB,OAAA,KAAAA,IAAAA,KAAZ,IAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAKuE,OAASvE,EAAKwE,YAAYD,GAC7BE,SAAU,cACVuE,QAAQ,EACRC,YACE,GAAIovB,GAAAtgB,eAAgBC,QAASqgB,EAAAvgB,qBAAqBM,QAClD,GAAIigB,GAAAtgB,eAAgBC,QAASqgB,EAAAvgB,qBAAqBS,eAEpDggB,2BAA2B,GACVv4B,EAAKuE,UAuD5B,MApE8BlB,GAAAi1B,EAAAl1B,GAgB5Bk1B,EAAA32B,UAAA2B,UAAA,SAAUzD,EAAmBE,GAA7B,GAAAC,GAAA/B,IACEmF,GAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,EA+BxB,KAAsB,GA7BlBwE,GAAStG,KAAKuE,YACdg2B,GAAiBv6B,KAAKsQ,WACtBkqB,GAAkB,EAElBC,EAAuC,WACzCD,GAAkB,CAGlB,KAAsB,GAAA9wB,GAAA,EAAAgJ,EAAA3Q,EAAKyQ,gBAAL9I,EAAAgJ,EAAAzR,OAAAyI,IAAsB,CAAvC,GAAI2I,GAASK,EAAAhJ,EAChB,IAAI2I,YAAqB+nB,GAAAtgB,gBAClBzH,EAAU0F,UAAW,CACxByiB,GAAkB,CAClB,QAKFz4B,EAAK0P,UAEHnL,EAAOg0B,4BAA8BE,GACvCz4B,EAAKkG,OAEEsyB,GAETx4B,EAAK6F,QAKa8B,EAAA,EAAAgJ,EAAA1S,KAAKwS,gBAAL9I,EAAAgJ,EAAAzR,OAAAyI,IAAsB,CAAvC,GAAI2I,GAASK,EAAAhJ,EACZ2I,aAAqB+nB,GAAAtgB,eACvBzH,EAAUoF,cAAc7T,UAAU62B,GAItC34B,EAAU8M,eAAehL,UAAU,WACjC22B,GAAgB,EACVj0B,EAAOg0B,4BAA8BE,GACzCz4B,EAAK6F,SAGT9F,EAAU0M,eAAe5K,UAAU,WACjC22B,GAAgB,EAChBx4B,EAAKkG,SAIPwyB,KAEJJ,GApE8B7vB,EAAA0B,UAAjB1M,GAAA66B,SAAAA,keCpBb,IAAA/yB,GAAA3G,EAAA,YACAyL,EAAAzL,EAAA,sBA0BAqI,EAAA,SAAA7D,GAUE,QAAA6D,GAAY1C,GAAZ,GAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,IAPP+B,GAAA24B,oBACNjlB,SAAU,GAAIrJ,GAAAE,gBACdquB,WAAY,GAAIvuB,GAAAE,gBAChBsuB,YAAa,GAAIxuB,GAAAE,gBAMjB,IAAMuuB,IACJr0B,SAAU,kBACVuS,QAAS,KACTC,SAAU,aAGZjX,GAAKuE,OAASvE,EAAKwE,YAAYD,EAAQu0B,EAAyB94B,EAAKuE,UA+GzE,MAlIqElB,GAAA4D,EAAA7D;cAsBnE6D,EAAAtF,UAAA2B,UAAA,SAAUzD,EAAmBE,GAC3BqD,EAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,EACxB,IAAMwE,GAAStG,KAAKuE,WACpBvE,MAAKiN,gBAAgBmE,SAASpR,KAAK8M,UAAUxG,EAAO0S,YAMtDhQ,EAAAtF,UAAAM,GAAA,WACE,GAAIhE,KAAK86B,QAAS,CAChB,GAAMx0B,GAAStG,KAAKuE,WAEpBvE,MAAK+6B,SAAU,EACf/6B,KAAKiN,gBAAgBsE,YAAYvR,KAAK8M,UAAUxG,EAAO0S,WACvDhZ,KAAKiN,gBAAgBmE,SAASpR,KAAK8M,UAAUxG,EAAOyS,UAEpD/Y,KAAKg7B,gBACLh7B,KAAKi7B,oBAOTjyB,EAAAtF,UAAA0D,IAAA,WACE,GAAIpH,KAAKk7B,OAAQ,CACf,GAAM50B,GAAStG,KAAKuE,WAEpBvE,MAAK+6B,SAAU,EACf/6B,KAAKiN,gBAAgBsE,YAAYvR,KAAK8M,UAAUxG,EAAOyS,UACvD/Y,KAAKiN,gBAAgBmE,SAASpR,KAAK8M,UAAUxG,EAAO0S,WAEpDhZ,KAAKg7B,gBACLh7B,KAAKm7B,qBAOTnyB,EAAAtF,UAAA03B,OAAA,WACMp7B,KAAKk7B,OACPl7B,KAAKoH,MAELpH,KAAKgE,MAQTgF,EAAAtF,UAAAw3B,KAAA,WACE,MAAOl7B,MAAK+6B,SAOd/xB,EAAAtF,UAAAo3B,MAAA,WACE,OAAQ96B,KAAKk7B,QAGLlyB,EAAAtF,UAAAsJ,aAAV,WACE7H,EAAAzB,UAAMsJ,aAAYhM,KAAAhB,MAIlBA,KAAKg7B,iBAGGhyB,EAAAtF,UAAAs3B,cAAV,WACEh7B,KAAK06B,mBAAmBjlB,SAAStI,SAASnN,OAGlCgJ,EAAAtF,UAAAu3B,gBAAV,WACEj7B,KAAK06B,mBAAmBC,WAAWxtB,SAASnN,OAGpCgJ,EAAAtF,UAAAy3B,iBAAV,WACEn7B,KAAK06B,mBAAmBE,YAAYztB,SAASnN,OAO/C2E,OAAAC,eAAIoE,EAAAtF,UAAA,gBAAJ,WACE,MAAO1D,MAAK06B,mBAAmBjlB,SAASrI,4CAO1CzI,OAAAC,eAAIoE,EAAAtF,UAAA,kBAAJ,WACE,MAAO1D,MAAK06B,mBAAmBC,WAAWvtB,4CAO5CzI,OAAAC,eAAIoE,EAAAtF,UAAA,mBAAJ,WACE,MAAO1D,MAAK06B,mBAAmBE,YAAYxtB,4CAE/CpE,GAlIqE1B,EAAAc,OAAxD5I,GAAAwJ,aAAAA,keC3Bb,IAAAyB,GAAA9J,EAAA,eACAwL,EAAAxL,EAAA,UAKA6S,EAAA,SAAArO,GAeE,QAAAqO,GAAYlN,OAAA,KAAAA,IAAAA,KAAZ,IAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAVP+B,GAAAs5B,YAAc,IACdt5B,EAAAu5B,aAAe,GACfv5B,EAAAw5B,mBAAqB,GACrBx5B,EAAAy5B,gBAA0B,EAC1Bz5B,EAAA05B,cAAwB,GACxB15B,EAAA25B,oBAA+B77B,OAAO0vB,sBAO5CxtB,EAAKuE,OAASvE,EAAKwE,YAAYD,GAC7BE,SAAU,oBACTzE,EAAKuE,UA4EZ,MAhGmClB,GAAAoO,EAAArO,GAuBvBqO,EAAA9P,UAAA6I,aAAV,WACE,MAAOvM,MAAK27B,OAAS,GAAIxvB,GAAAM,IAAI,UAAYE,MAAS3M,KAAK4M,mBAGzD4G,EAAA9P,UAAA2H,MAAA,WACErL,KAAK47B,cAAmC57B,KAAK27B,OAAOxN,IAAI,GACxDnuB,KAAK67B,cAAgB77B,KAAK47B,cAAcE,WAAW,MACnD97B,KAAK+7B,yBAA2B/7B,KAAKs7B,aACrCt7B,KAAKw7B,gBAAkB,EAEvBx7B,KAAK47B,cAAcle,MAAQ1d,KAAKq7B,YAChCr7B,KAAK47B,cAAc5T,OAAShoB,KAAKs7B,aAEjCt7B,KAAKg8B,eAGPxoB,EAAA9P,UAAAqQ,KAAA,WACM/T,KAAK07B,kBACPO,qBAAqBj8B,KAAKk8B,sBAE1BC,aAAan8B,KAAKk8B,uBAId1oB,EAAA9P,UAAAs4B,YAAR,WAGE,GAAIh8B,KAAKw7B,gBAAkBx7B,KAAKy7B,eAAgB,GAAIvmB,OAAOknB,UAGzD,WADAp8B,MAAKq8B,oBAYP,KAAK,GARDC,GACAjB,EAAcr7B,KAAKq7B,YACnBC,EAAet7B,KAAKs7B,aAGpBiB,EAAav8B,KAAK67B,cAAcW,gBAAgBnB,EAAaC,GAGxDzQ,EAAI,EAAGA,EAAIyQ,EAAczQ,IAChC,IAAK,GAAIP,GAAI,EAAGA,EAAI+Q,EAAa/Q,IAC/BgS,EAAsBjB,EAAcxQ,EAAI,EAAS,EAAJP,EAC7CiS,EAAWltB,KAAKitB,GAAsC,IAAhBze,KAAK4e,UACvC5R,EAAI7qB,KAAK+7B,yBAA2BlR,EAAI7qB,KAAK+7B,wBAA0B/7B,KAAKu7B,sBAC9EgB,EAAWltB,KAAKitB,IAAuB,KAEzCC,EAAWltB,KAAKitB,EAAqB,GAAKC,EAAWltB,KAAKitB,GAC1DC,EAAWltB,KAAKitB,EAAqB,GAAKC,EAAWltB,KAAKitB,GAC1DC,EAAWltB,KAAKitB,EAAqB,GAAK,EAK9Ct8B,MAAK67B,cAAca,aAAaH,EAAY,EAAG,GAE/Cv8B,KAAKw7B,iBAAkB,GAAItmB,OAAOknB,UAClCp8B,KAAK+7B,yBAA2B,EAC5B/7B,KAAK+7B,wBAA0BT,IACjCt7B,KAAK+7B,yBAA2BT,GAGlCt7B,KAAKq8B,sBAGC7oB,EAAA9P,UAAA24B,mBAAR,WACMr8B,KAAK07B,kBACP17B,KAAKk8B,qBAAuBr8B,OAAO0vB,sBAAsBvvB,KAAKg8B,YAAYW,KAAK38B,OAE/EA,KAAKk8B,qBAAuB/mB,WAAWnV,KAAKg8B,YAAYW,KAAK38B,MAAOA,KAAKy7B,gBAG/EjoB,GAhGmC/I,EAAAI,UAAtBrL,GAAAgU,cAAAA,ydCNb,IAAAhJ,GAAA7J,EAAA,eAEAwL,EAAAxL,EAAA,UACA+J,EAAA/J,EAAA,cACAgb,EAAAhb,EAAA,kBACAyL,EAAAzL,EAAA,sBA6BAuO,EAAA,SAAA/J,GAgBE,QAAA+J,GAAY5I,GAAZ,GAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAKuE,OAASvE,EAAKwE,YAAYD,GAC7BE,SAAU,iBACVkI,UAAW,KACV3M,EAAKuE,QAERvE,EAAK66B,kBAAoB,GAAIxwB,GAAAE,kBA+RjC,MAvTiClH,GAAA8J,EAAA/J,GA2B/B+J,EAAAxL,UAAA2B,UAAA,SAAUzD,EAAmBE,GAC3B,GAAMwE,GAAStG,KAAKuE,WAEhB+B,GAAOu2B,2BACT78B,KAAK68B,2BAA6B,GAAI1wB,GAAAM,IAAInG,EAAOu2B,4BAEjD78B,KAAK68B,2BAA6B78B,KAAKiN,gBAGzC9H,EAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,GAExB9B,KAAK88B,oBAAoBl7B,EAAQE,GACjC9B,KAAK+8B,sBAAsBn7B,EAAQE,IAG7BoN,EAAAxL,UAAAo5B,oBAAR,SAA4Bl7B,EAAmBE,GAA/C,GAAAC,GAAA/B,KACMsG,EAAStG,KAAKuE,WAElB,KAA0B,IAAtB+B,EAAOoI,UAET,WADA5M,GAAUkiB,aAAapgB,UAAU,WAAM,MAAA9B,GAAU8M,eAAezB,SAASpL,IAI3E,IAGIi7B,GAHA1uB,GAAY,EACZsQ,GAAY,EACZqe,GAAe,EAGbC,EAAkB,WACtB,MAAO52B,GAAO62B,2BAA6B72B,EAAO62B,0BAA0B37B,QAAQw7B,IAAgB,GAGlGruB,EAAS,WACNL,IAEHxM,EAAU8M,eAAezB,SAASpL,GAClCuM,GAAY,GAGTsQ,GAAchd,EAAOmM,aAAgBmvB,KACxCn7B,EAAKq7B,cAAc/xB,SAInBkD,EAAS,WAEX,GAAID,IAAc1M,EAAOmM,YAAa,CAEpC,GAAIsvB,KACJv7B,GAAUw7B,sBAAsBnwB,SAASpL,EAAMs7B,GAE1CA,EAAqBE,OAMxB5uB,KAJA7M,EAAU0M,eAAerB,SAASpL,GAClCuM,GAAY,IASlBtO,MAAKo9B,cAAgB,GAAI1yB,GAAAS,QAAQ7E,EAAOoI,UAAWH,GAEnDvO,KAAKw9B,wBAEHC,KAAM,WACNC,QAAS,SAACv9B,GACHmO,IAKC2uB,IAAiBr7B,EAAOoN,YAC1BiuB,GAAe,EAEf98B,EAAE8lB,iBAEJtX,QAKJ8uB,KAAM,aACNC,QAAS,WACP/uB,OAIF8uB,KAAM,YACNC,QAAS,WACP/uB,OAIF8uB,KAAM,aACNC,QAAS,WAGF9e,GAAcse,KACjBn7B,EAAKq7B,cAAc/xB,WAKzBrL,KAAKw9B,sBAAsB/jB,QAAQ,SAACxX,GAAU,MAAAF,GAAK86B,2BAA2B74B,GAAG/B,EAAMw7B,KAAMx7B,EAAMy7B,WAEnG57B,EAAUsd,OAAOxb,UAAU,WACzB7B,EAAKq7B,cAAc7xB,QACnBqT,GAAY,IAEd9c,EAAUud,SAASzb,UAAU,WAC3Bgb,GAAY,EACPse,KACHn7B,EAAKq7B,cAAc/xB,UAGvBzJ,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY0J,YAAa,WAChDgB,MAEF3O,KAAK48B,kBAAkBh5B,UAAU,SAACC,EAAG85B,GACnCX,EAAcW,EACVT,KAEFn7B,EAAKq7B,cAAc7xB,QACnBoD,KAGA5M,EAAKq7B,cAAc/xB,WAKjB6D,EAAAxL,UAAAq5B,sBAAR,SAA8Bn7B,EAAmBE,GAAjD,GAAAC,GAAA/B,KACMixB,EAAYjxB,KAAKiN,gBAGjB2wB,IACJ,KAAK,GAAID,KAAShiB,GAAAqB,YAAY6gB,YAC5B,GAAIC,MAAMhb,OAAO6a,IAAS,CACxB,GAAII,GAAWpiB,EAAAqB,YAAY6gB,YAAiBliB,EAAAqB,YAAY6gB,YAAYF,GACpEC,GAAgBjiB,EAAAqB,YAAY6gB,YAAYF,IACtC39B,KAAK8M,UAAUoC,EAAY8uB,aAAeD,EAAS/jB,eAIzD,GAAIikB,GAAe,WACjBhN,EAAU1f,YAAYqsB,EAAgBjiB,EAAAqB,YAAY6gB,YAAYK,OAC9DjN,EAAU1f,YAAYqsB,EAAgBjiB,EAAAqB,YAAY6gB,YAAYM,WAC9DlN,EAAU1f,YAAYqsB,EAAgBjiB,EAAAqB,YAAY6gB,YAAYlyB,UAC9DslB,EAAU1f,YAAYqsB,EAAgBjiB,EAAAqB,YAAY6gB,YAAYjyB,SAC9DqlB,EAAU1f,YAAYqsB,EAAgBjiB,EAAAqB,YAAY6gB,YAAYO,YAG1DC,EAAc,SAACV,GACnBM,IACAhN,EAAU7f,SAASwsB,EAAgBD,IACnC57B,EAAK66B,kBAAkBzvB,SAASpL,EAAM47B,GAGxC/7B,GAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY6P,aAAc,WACjDuqB,EAAY1iB,EAAAqB,YAAY6gB,YAAYM,YAEtCv8B,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYyH,KAAM,WACzC2yB,EAAY1iB,EAAAqB,YAAY6gB,YAAYlyB,WAEtC/J,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY0H,QAAS,WAC5C0yB,EAAY1iB,EAAAqB,YAAY6gB,YAAYlyB,WAEtC/J,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY2H,OAAQ,WAC3CyyB,EAAY1iB,EAAAqB,YAAY6gB,YAAYjyB,UAEtChK,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY6a,iBAAkB,WACrDuf,EAAY1iB,EAAAqB,YAAY6gB,YAAYO,YAEtCx8B,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYE,eAAgB,WACnDk6B,EAAY1iB,EAAAqB,YAAY6gB,YAAYK,QAEtCp8B,EAAUyC,YAAYC,OAAOC,UAAUb,UAAU,WAC/Cy6B,EAAY1iB,EAAAqB,YAAYshB,SAAS18B,MAInCA,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYoQ,gBAAiB,WAChDzS,EAAOsS,gBAAkBtS,EAAOpC,QAAQ2U,SAASC,WACnD6c,EAAU7f,SAASrP,EAAK+K,UAAUoC,EAAYqvB,aAE9CtN,EAAU1f,YAAYxP,EAAK+K,UAAUoC,EAAYqvB,eAIjD38B,EAAOsS,gBAAkBtS,EAAOpC,QAAQ2U,SAASC,YACnD6c,EAAU7f,SAASpR,KAAK8M,UAAUoC,EAAYqvB,aAIhD38B,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYuH,aAAc,WACjDylB,EAAU7f,SAASrP,EAAK+K,UAAUoC,EAAYsvB,cAEhD58B,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYwH,WAAY,WAC/CwlB,EAAU1f,YAAYxP,EAAK+K,UAAUoC,EAAYsvB,cAG/C58B,EAAOqK,aACTglB,EAAU7f,SAASpR,KAAK8M,UAAUoC,EAAYsvB,YAIhD58B,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY0J,YAAa,WAChDsjB,EAAU7f,SAASrP,EAAK+K,UAAUoC,EAAYuvB,mBAEhD78B,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY2J,YAAa,WAChDqjB,EAAU1f,YAAYxP,EAAK+K,UAAUoC,EAAYuvB,mBAG/C78B,EAAOmM,aACTkjB,EAAU7f,SAASpR,KAAK8M,UAAUoC,EAAYuvB,iBAIhD38B,EAAU8M,eAAehL,UAAU,WACjCqtB,EAAU1f,YAAYxP,EAAK+K,UAAUoC,EAAYwvB,kBACjDzN,EAAU7f,SAASrP,EAAK+K,UAAUoC,EAAYyvB,mBAEhD78B,EAAU0M,eAAe5K,UAAU,WACjCqtB,EAAU1f,YAAYxP,EAAK+K,UAAUoC,EAAYyvB,iBACjD1N,EAAU7f,SAASrP,EAAK+K,UAAUoC,EAAYwvB,mBAIhD,IAAIE,GAA0B,SAAClhB,EAAesK,GAC5CiJ,EAAU1f,YAAYxP,EAAK+K,UAAU,yBACrCmkB,EAAU1f,YAAYxP,EAAK+K,UAAU,yBACrCmkB,EAAU1f,YAAYxP,EAAK+K,UAAU,yBACrCmkB,EAAU1f,YAAYxP,EAAK+K,UAAU,0BAEjC4Q,GAAS,IACXuT,EAAU7f,SAASrP,EAAK+K,UAAU,yBACzB4Q,GAAS,IAClBuT,EAAU7f,SAASrP,EAAK+K,UAAU,yBACzB4Q,GAAS,IAClBuT,EAAU7f,SAASrP,EAAK+K,UAAU,yBACzB4Q,GAAS,MAClBuT,EAAU7f,SAASrP,EAAK+K,UAAU,0BAGtClL,GAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY8f,cAAe,SAAC5jB,GAEnD,GAAIud,GAAQG,KAAKqJ,MAAMpE,OAAO3iB,EAAEud,MAAMmhB,UAAU,EAAG1+B,EAAEud,MAAMzc,OAAS,IACvD4c,MAAKqJ,MAAMpE,OAAO3iB,EAAE6nB,OAAO6W,UAAU,EAAG1+B,EAAE6nB,OAAO/mB,OAAS,IAEvE29B,GAAwBlhB,KAG1BkhB,EAAwB,GAAIzyB,GAAAM,IAAI7K,EAAOk9B,gBAAgBphB,QAAS,GAAIvR,GAAAM,IAAI7K,EAAOk9B,gBAAgB9W,WAGjG9Y,EAAAxL,UAAAuL,QAAA,WAAA,GAAAlN,GAAA/B,IAGMA,MAAKw9B,uBACPx9B,KAAKw9B,sBAAsB/jB,QAAQ,SAACxX,GAAU,MAAAF,GAAK86B,2BAA2Bz1B,IAAInF,EAAMw7B,KAAMx7B,EAAMy7B,WAGtGv4B,EAAAzB,UAAMuL,QAAOjO,KAAAhB,MAETA,KAAKo9B,eACPp9B,KAAKo9B,cAAc7xB,SAIb2D,EAAAxL,UAAA6I,aAAV,WACE,GAAI0kB,GAAY9rB,EAAAzB,UAAM6I,aAAYvL,KAAAhB,KASlC,OANIumB,eAA8D,KAA3CA,SAASwY,cAAc,KAAKrW,MAAMsW,KACvD/N,EAAU7f,SAASpR,KAAK8M,UAAU,YAElCmkB,EAAU7f,SAASpR,KAAK8M,UAAU,eAG7BmkB,GAnTe/hB,EAAA8uB,aAAe,gBAEf9uB,EAAAqvB,WAAa,aACbrvB,EAAAsvB,UAAY,YACZtvB,EAAAuvB,eAAiB,iBACjBvvB,EAAAyvB,eAAiB,iBACjBzvB,EAAAwvB,gBAAkB,kBA+S5CxvB,GAvTiC1E,EAAA0B,UAApB1M,GAAA0P,YAAAA,qhBClCb,IAAAjG,GAAAtI,EAAA,eAIAe,EAAAf,EAAA,wBAKAuvB,EAAA,SAAA/qB,GAIE,QAAA+qB,GAAY5pB,OAAA,KAAAA,IAAAA,KAAZ,IAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAKuE,OAASvE,EAAKwE,YAAYD,GAC7B6C,YAAa,6BACZpH,EAAKuE,UA4DZ,MArE2ClB,GAAA8qB,EAAA/qB,GAYzC+qB,EAAAxsB,UAAA2B,UAAA,SAAUzD,EAAmBE,GAA7B,GAAAC,GAAA/B,IACEmF,GAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,EAExB,IAAIm9B,GAA4B,WAC9Bl9B,EAAKiB,WAAWpB,EAAOs9B,kBAAkB58B,KAGvC68B,EAAuB,WACzB,GAAIC,GAAiBx9B,EAAOy9B,4BAE5Bt9B,GAAK0H,aAGL1H,EAAKu9B,QAAqC,gBAA3B19B,EAAO29B,gBAElBx9B,EAAKu9B,SAEPv9B,EAAKQ,QAAQ,OAAQb,EAAAc,KAAKC,aAAa,QAIzC,KAAyB,GAAAiH,GAAA,EAAA81B,EAAAJ,EAAA11B,EAAA81B,EAAAv+B,OAAAyI,IAAgB,CAApC,GAAI+1B,GAAYD,EAAA91B,EACnB3H,GAAKQ,QAAQk9B,EAAan9B,GAAIm9B,EAAa/8B,OAI7Cu8B,IAGFj/B,MAAK2D,eAAeC,UAAU,SAACiG,EAA+B/F,GAC5DlC,EAAO89B,gBAAgB57B,KAIzBlC,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYE,eAAgBg7B,GAErDv9B,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYG,eAAgB+6B,GAErDv9B,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY07B,oBAAqBV,GAErDr9B,EAAOpC,QAAQyE,YAAoB27B,oBAGtCh+B,EAAOoC,GAAIpC,EAAOpC,QAAQyE,YAAoB27B,kBAAmBT,GACjEv9B,EAAOoC,GAAIpC,EAAOpC,QAAQyE,YAAoB47B,oBAAqBV,IAGrEr9B,EAAUyC,YAAYC,OAAOC,UAAUb,UAAUu7B,IAOnDjP,EAAAxsB,UAAAysB,YAAA,WACE,MAAOnwB,MAAKs/B,SAEhBpP,GArE2CjnB,EAAAiB,UAA9B1K,GAAA0wB,sBAAAA,ueCTb,IAAA1lB,GAAA7J,EAAA,eACAm/B,EAAAn/B,EAAA,kBACAo/B,EAAAp/B,EAAA,wBAEA+J,EAAA/J,EAAA,cA0BAq/B,EAAA,SAAA76B,GAOE,QAAA66B,GAAY15B,OAAA,KAAAA,IAAAA,KAAZ,IAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAKk+B,mBAAqB,GAAIF,GAAAG,mBAC9Bn+B,EAAKo+B,aAAe,GAAIL,GAAAM,cACtB3e,SAA6B,MAAnBnb,EAAOmb,UAAmBnb,EAAOmb,SAC3C1W,QAAQ,IAGVhJ,EAAKuE,OAASvE,EAAKwE,YAAYD,GAC7BE,SAAU,yBACVwE,YAAajJ,EAAKk+B,mBAAoBl+B,EAAKo+B,cAC3CzxB,UAAW,KACiB3M,EAAKuE,UA2EvC,MA/FyClB,GAAA46B,EAAA76B,GAuBvC66B,EAAAt8B,UAAA2B,UAAA,SAAUzD,EAAmBE,GAA7B,GAAAC,GAAA/B,IACEmF,GAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,EAExB,IAAIm+B,GAAqBjgC,KAAKqgC,wBAC1BF,EAAengC,KAAKsgC,iBAExBtgC,MAAKugC,wBAA0B,GAAI71B,GAAAS,QAAQnL,KAAKuE,YAAYmK,UAAW,WACrEyxB,EAAal4B,QAUf,IAAIu4B,IAAsB,CAC1BP,GAAmBhzB,gBAAgBjJ,GAAG,aAAc,WAE9Cm8B,EAAa7vB,YACf6vB,EAAav4B,OAGf7F,EAAKw+B,wBAAwBh1B,UAE/B00B,EAAmBhzB,gBAAgBjJ,GAAG,aAAc,WAElDjC,EAAKw+B,wBAAwBhU,UAE/B4T,EAAalzB,gBAAgBjJ,GAAG,aAAc,WAE5CjC,EAAKw+B,wBAAwBh1B,QAC7Bi1B,GAAsB,IAExBL,EAAalzB,gBAAgBjJ,GAAG,aAAc,WAExCm8B,EAAavhB,YACf7c,EAAKw+B,wBAAwBh1B,QAE7BxJ,EAAKw+B,wBAAwBhU,QAE/BiU,GAAsB,IAExBL,EAAa9gB,SAASzb,UAAU,WAEzB48B,GACHz+B,EAAKw+B,wBAAwBhU,WAKnCyT,EAAAt8B,UAAAuL,QAAA,WACE9J,EAAAzB,UAAMuL,QAAOjO,KAAAhB,MACbA,KAAKugC,wBAAwBh1B,SAO/By0B,EAAAt8B,UAAA28B,sBAAA,WACE,MAAOrgC,MAAKigC,oBAOdD,EAAAt8B,UAAA48B,gBAAA,WACE,MAAOtgC,MAAKmgC,cAEhBH,GA/FyCx1B,EAAA0B,UAA5B1M,GAAAwgC,oBAAAA,2gBC9Bb,IAAAS,GAAA9/B,EAAA,aAoBAy/B,EAAA,SAAAj7B,GAME,QAAAi7B,GAAY95B,OAAA,KAAAA,IAAAA,KAAZ,IAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAkEP+B,GAAA2+B,2BAA6B,SAAC72B,EAAsBsT,GACtDA,EAAK6D,WAAajf,EAAK4+B,kBACzB5+B,EAAK4+B,iBAAiBC,OAAOzjB,EAAK+D,WAlEpCnf,EAAKuE,OAASvE,EAAKwE,YAAYD,GAC7BE,SAAU,kBACVq6B,+BAA+B,GAC9B9+B,EAAKuE,UAsFZ,MAlGkClB,GAAAg7B,EAAAj7B,GAehCi7B,EAAA18B,UAAA2B,UAAA,SAAUzD,EAAmBE,GAA7B,GAAAC,GAAA/B,IACEmF,GAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,GAAW,EAEnC,IAAIwE,GAA6BtG,KAAKuE,YAEhCu8B,EAAmBh/B,EAAUyC,YAAYu8B,gBAE/C,IAAIx6B,EAAOu6B,gCAAkC7gC,KAAK+gC,kCAKhD,WAJA/gC,MAAKiI,MAOP64B,GAAiBhK,UAAUlzB,UAAU,SAACC,EAAGsZ,GACnCA,EAAK6jB,MACPj/B,EAAKsgB,oBAAoB,GAEzBtgB,EAAKsgB,oBAAoBlF,EAAK8jB,UAIlCjhC,KAAKof,OAAOxb,UAAU,WACpB7B,EAAK4+B,iBAAmBG,EAAiBI,oBAG3ClhC,KAAK8gB,cAAc2C,qBAAqBzjB,KAAK0gC,2BAA4B,IACzE1gC,KAAKqf,SAASzb,UAAU,SAACiG,EAAQsX,GAC3Bpf,EAAK4+B,kBACP5+B,EAAK4+B,iBAAiBQ,OAAOhgB,KAMjCvf,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY8f,cAAe,WAClDhiB,EAAK6hB,4BAEP9hB,EAAUkiB,aAAapgB,UAAU,WAC/B7B,EAAK6hB,4BAGP9hB,EAAUyC,YAAYC,OAAOC,UAAUb,UAAU,WAC/C7B,EAAK6hB,4BAGP9hB,EAAU0O,gBAAgB5M,UAAU,WAClC7B,EAAK6hB,4BAEP9hB,EAAU2O,gBAAgB7M,UAAU,WAClC7B,EAAK6hB,4BAIPkd,EAAiB3H,kBASXiH,EAAA18B,UAAAq9B,gCAAR,WAQE,GAAMK,GAAoB7a,SAASwY,cAAc,QAGjD,OADAqC,GAAkBH,OAAS,GACS,IAA7BG,EAAkBH,QAG3Bb,EAAA18B,UAAAuL,QAAA,WACE9J,EAAAzB,UAAMuL,QAAOjO,KAAAhB,MAEbA,KAAK8gB,cAAcrE,YAAYzc,KAAK0gC,6BA9FdN,EAAAiB,WAAa,KAgGvCjB,GAlGkCK,EAAA/f,QAArBlhB,GAAA4gC,aAAAA,2cCpBb,IAAA/3B,GAAA1H,EAAA,kBAGAe,EAAAf,EAAA,wBAKAu/B,EAAA,SAAA/6B,GAEE,QAAA+6B,GAAY55B,OAAA,KAAAA,IAAAA,KAAZ,IAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,KAEP66B,GACJr0B,SAAU,wBACVC,KAAM/E,EAAAc,KAAKC,aAAa,uBACxBsW,QAAS,QACTC,SAAU,iBAGZjX,GAAKuE,OAASvE,EAAKwE,YAAYD,EAAQu0B,EAAe94B,EAAKuE,UA0B/D,MAtCwClB,GAAA86B,EAAA/6B,GAetC+6B,EAAAx8B,UAAA2B,UAAA,SAAUzD,EAAmBE,GAA7B,GAAAC,GAAA/B,IACEmF,GAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,EAExB,IAAMg/B,GAAmBh/B,EAAUyC,YAAYu8B,gBAE/CA,GAAiBhK,UAAUlzB,UAAU,SAACC,EAAGsZ,GACnCA,EAAK6jB,MACPj/B,EAAKiC,KAELjC,EAAKqF,KAGP,IAAMk6B,GAAkBzjB,KAAK0jB,KAAKpkB,EAAK8jB,OAAS,GAChDl/B,GAAKkL,gBAAgBoC,KAAKtN,EAAK+K,UAAU,qBAAsBoK,OAAOoqB,MAGxEthC,KAAKgG,QAAQpC,UAAU,WACrBk9B,EAAiBU,gBAInBV,EAAiB3H,kBAErB+G,GAtCwC73B,EAAAW,aAA3BxJ,GAAA0gC,mBAAAA,0eCRb,IAAA73B,GAAA1H,EAAA,kBAGAe,EAAAf,EAAA,wBAKA8gC,EAAA,SAAAt8B,GAEE,QAAAs8B,GAAYn7B,OAAA,KAAAA,IAAAA,KAAZ,IAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAKuE,OAASvE,EAAKwE,YAAYD,GAC7BE,SAAU,oBACVC,KAAM/E,EAAAc,KAAKC,aAAa,OACvBV,EAAKuE,UAsEZ,MA9EoClB,GAAAq8B,EAAAt8B,GAWlCs8B,EAAA/9B,UAAA2B,UAAA,SAAUzD,EAAmBE,GAA7B,GAAAC,GAAA/B,IACEmF,GAAAzB,UAAM2B,UAASrE,KAAAhB,KAAC4B,EAAQE,EAExB,IAAI4/B,GAAiB,WAKnB,GAAMC,GAAS//B,EAAOoU,WACtB,OAAO2rB,IAAU9rB,QAAQ8rB,EAAOC,KAG9BC,EAAsB,WACxB,GAAMF,GAAS//B,EAAOoU,WACtB,OAAOpU,GAAOggC,IAAM/rB,QAAQ8rB,EAAOC,KAGjCE,EAAiB,SAACC,GAChBA,EAAGr1B,OAAS9K,EAAOpC,QAAQyE,YAAYmR,SACrC2sB,EAAoBjhC,OAASc,EAAOpC,QAAQ6V,YAAY2sB,qBAI1DN,KAAoBG,KACtB9/B,EAAK6F,OAEDhG,EAAOggC,IAAMhgC,EAAOggC,GAAGK,YACzBlgC,EAAKiC,KAELjC,EAAKqF,OAGPrF,EAAKkG,SAILi6B,EAA4B,WAC1BR,IACF3/B,EAAK6F,OAEL7F,EAAKkG,OAITrG,GAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYk+B,gBAAiBL,GACtDlgC,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYmR,QAAS0sB,GAE9ClgC,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYE,eAAgB+9B,GACrDpgC,EAAUyC,YAAYC,OAAOC,UAAUb,UAAUs+B,GAEjDliC,KAAKgG,QAAQpC,UAAU,WAChBi+B,IAKCjgC,EAAOggC,IAAMhgC,EAAOggC,GAAGK,YACzBrgC,EAAOggC,GAAGQ,WAAU,GAEpBxgC,EAAOggC,GAAGQ,WAAU,GAPlB35B,SACFA,QAAQC,IAAI,mBAYlBw5B,KAEJT,GA9EoCp5B,EAAAW,aAAvBxJ,GAAAiiC,eAAAA,0eCRb,IAAAx8B,GAAAtE,EAAA,kBAYA0hC,EAAA,SAAAl9B,GAEE,QAAAk9B,GAAY/7B,OAAA,KAAAA,IAAAA,KAAZ,IAAAvE,GACEoD,EAAAnE,KAAAhB,KAAMsG,IAAOtG,WAEb+B,GAAKuE,OAASvE,EAAKwE,YAAYD,GAC7BE,SAAU,eACV4I,IAAK,uBACarN,EAAKuE,UAE7B,MAV+BlB,GAAAi9B,EAAAl9B,GAU/Bk9B,GAV+Bp9B,EAAAiB,aAAlB1G,GAAA6iC,UAAAA,2GCZb,IAAAC,GAAA3hC,EAAA,+BACA4hC,EAAA5hC,EAAA,qCACAm/B,EAAAn/B,EAAA,6BACA6hC,EAAA7hC,EAAA,kCACA8hC,EAAA9hC,EAAA,oCACA+hC,EAAA/hC,EAAA,oCACAmxB,EAAAnxB,EAAA,2BACAgiC,EAAAhiC,EAAA,iCACAiiC,EAAAjiC,EAAA,uCACAkiC,EAAAliC,EAAA,sCACAivB,EAAAjvB,EAAA,uCACAgvB,EAAAhvB,EAAA,sCACAmiC,EAAAniC,EAAA,kCACAyN,EAAAzN,EAAA,4BACAoiC,EAAApiC,EAAA,0BACAqiC,EAAAriC,EAAA,gCACAywB,EAAAzwB,EAAA,8BACAsiC,EAAAtiC,EAAA,6BACAuiC,EAAAviC,EAAA,sCACAwiC,EAAAxiC,EAAA,6CACAyiC,EAAAziC,EAAA,uBACA6J,EAAA7J,EAAA,0BACAo/B,EAAAp/B,EAAA,mCACA6T,EAAA7T,EAAA,qCACA8/B,EAAA9/B,EAAA,wBACA+uB,EAAA/uB,EAAA,sCACA0iC,EAAA1iC,EAAA,eACA2iC,EAAA3iC,EAAA,yBACA4iC,EAAA5iC,EAAA,iCACA6iC,EAAA7iC,EAAA,gCACA8iC,EAAA9iC,EAAA,kCACA2vB,EAAA3vB,EAAA,kCACAgrB,EAAAhrB,EAAA,kCACA+iC,EAAA/iC,EAAA,gBAIA,SAAiBgjC,GAEf,QAAgBC,GAA2ChiC,EAAmB0E,OAAA,KAAAA,IAAAA,KAI5E,OAAO,IAAI+8B,GAAAQ,UAAUjiC,IACnBkiC,GAAIJ,EAAAK,UAAUC,yBACdC,UAAW,SAACC,GACV,MAAOA,GAAQC,UAAYD,EAAQE,cALV,KAMpBF,EAAQG,MAAQH,EAAQI,gBAG/BR,GAAIJ,EAAAK,UAAUQ,cACdN,UAAW,SAACC,GACV,MAAOA,GAAQG,MAAQH,EAAQI,gBAGjCR,GAAIJ,EAAAK,UAAUS,sBACdP,UAAW,SAACC,GACV,MAAOA,GAAQC,UAAYD,EAAQE,cAhBV,OAmB3BN,GAAIW,MACFn+B,GAGN,QAASm+B,KACP,GAAI3O,GAAkB,GAAIkN,GAAAjR,gBAEtBR,EAAgB,GAAIH,GAAAxF,eACtB5gB,YACE,GAAI2gB,GAAA4B,mBACFviB,YACE,GAAIslB,GAAAT,kBAAkB,gBAAiB,GAAIH,GAAAQ,uBAC3C,GAAII,GAAAT,kBAAkB,QAAS,GAAID,GAAA/U,wBACnC,GAAIyV,GAAAT,kBAAkB,gBAAiB,GAAIF,GAAAzmB,2BAIjD6B,QAAQ,IAGN25B,EAAkB,GAAIlB,GAAA5R,gBACtB+S,EAAwB,GAAIvT,GAAAxF,eAC9B5gB,YACE,GAAI2gB,GAAA4B,mBACFviB,YACE,GAAIslB,GAAAT,kBAAkB,KAAM6U,OAIlC35B,QAAQ,IAGN65B,EAAoB,GAAInB,GAAAp5B,kBACxBw6B,EAA0B,GAAIzT,GAAAxF,eAChC5gB,YACE,GAAI2gB,GAAA4B,mBACFviB,YACE,GAAIslB,GAAAT,kBAAkB,KAAM+U,OAIlC75B,QAAQ,IAGN+5B,EAAa,GAAIhT,GAAA5e,YACnBlI,YACE65B,EACAF,EACApT,EACA,GAAI/mB,GAAA0B,WACFlB,YACE,GAAIw3B,GAAA5mB,mBAAoBC,cAAe2mB,EAAA9mB,sBAAsB4C,YAAavC,oBAAoB,IAC9F,GAAI0kB,GAAA/f,SAAUhe,MAAO,GAAIugC,GAAA9Z,eACzB,GAAIqZ,GAAA5mB,mBAAoBC,cAAe2mB,EAAA9mB,sBAAsB6C,UAAWpV,YAAa,iBAEvFA,YAAa,oBAEf,GAAIqB,GAAA0B,WACFlB,YACE,GAAIwJ,GAAA4B,qBACJ,GAAI2pB,GAAAG,mBACJ,GAAIJ,GAAAM,aACJ,GAAIgD,GAAA1R,OACJ,GAAIyR,GAAA1oB,6BACJ,GAAIgoB,GAAAn6B,oBACJ,GAAIq6B,GAAA90B,iBACJ,GAAIy0B,GAAAb,eACJ,GAAIc,GAAAlR,sBACFE,cAAesT,EACfr+B,SAAU,sCAEZ,GAAI+7B,GAAAlR,sBACFE,cAAeoT,EACfn+B,SAAU,oCAEZ,GAAI+7B,GAAAlR,sBAAuBE,cAAeA,IAC1C,GAAIqR,GAAA5uB,wBAEN7K,YAAa,yBAKnB,OAAO,IAAIiF,GAAAc,aACTlE,YACE8qB,EACA,GAAIyN,GAAA54B,iBACJ,GAAIu4B,GAAA3jB,sBACJ,GAAIujB,GAAAz1B,kBACJy3B,EACA,GAAIxB,GAAAjJ,SACJ,GAAIwI,GAAAnjB,sBACJ,GAAIqjB,GAAAV,UACJ,GAAIK,GAAArvB,uBAlHMswB,EAAAC,2CAA0CA,GAF3CpkC,EAAAmkC,cAAAnkC,EAAAmkC,muCCjBjB,IAAAl3B,GAAA,WAoCE,QAAAA,GAAYs4B,EAA4DC,GAGtE,GAFAhlC,KAAKumB,SAAWA,SAEZwe,YAAqBE,QACvB,GAAIF,EAAU9jC,OAAS,GAAK8jC,EAAU,YAAcG,aAAa,CAC/D,GAAIC,GAAWJ,CACf/kC,MAAKmlC,SAAWA,OAGf,IAAIJ,YAAqBG,aAAa,CACzC,GAAIrjC,GAAUkjC,CACd/kC,MAAKmlC,UAAYtjC,OAEd,IAAIkjC,YAAqBK,UAI5BplC,KAAKmlC,SAAW,SAEb,IAAIH,EAAY,CACnB,GAAIK,GAAUN,EACVljC,EAAU0kB,SAASwY,cAAcsG,EAErC,KAAK,GAAIC,KAAiBN,GAAY,CACpC,GAAIO,GAAiBP,EAAWM,EAChCzjC,GAAQ2jC,aAAaF,EAAeC,GAGtCvlC,KAAKmlC,UAAYtjC,OAEd,CACH,GAAI4jC,GAAWV,CACf/kC,MAAKmlC,SAAWnlC,KAAK0lC,kBAAkBD,IAqc7C,MA7bE9gC,QAAAC,eAAI6H,EAAA/I,UAAA,cAAJ,WACE,MAAO1D,MAAKmlC,SAAWnlC,KAAKmlC,SAASlkC,OAAS,mCAchDwL,EAAA/I,UAAAyqB,IAAA,SAAI5sB,GACF,WAAciO,KAAVjO,EACKvB,KAAKmlC,UACFnlC,KAAKmlC,UAAY5jC,GAASvB,KAAKmlC,SAASlkC,QAAUM,GAASvB,KAAKmlC,SAASlkC,WACnF,GACSM,EAAQ,EACVvB,KAAKmlC,SAASnlC,KAAKmlC,SAASlkC,OAASM,GAErCvB,KAAKmlC,SAAS5jC,IAQjBkL,EAAA/I,UAAA+V,QAAR,SAAgBikB,GACT19B,KAAKmlC,UAGVnlC,KAAKmlC,SAAS1rB,QAAQ,SAAC5X,GACrB67B,EAAQ77B,MAIJ4K,EAAA/I,UAAAiiC,2BAAR,SAAmC9jC,EAAiC4jC,GAClE,GAAIG,GAAgB/jC,EAAQgkC,iBAAiBJ,EAI7C,UAAU9yB,MAAM3R,KAAK4kC,IAGfn5B,EAAA/I,UAAAgiC,kBAAR,SAA0BD,GAA1B,GAAA1jC,GAAA/B,KACM8lC,IAEJ,OAAI9lC,MAAKmlC,UACPnlC,KAAKyZ,QAAQ,SAAC5X,GACZikC,EAAmBA,EAAiB/0B,OAAOhP,EAAK4jC,2BAA2B9jC,EAAS4jC,MAOjFK,GAHE9lC,KAAK2lC,2BAA2Bpf,SAAUkf,IAWrDh5B,EAAA/I,UAAAwJ,KAAA,SAAKu4B,GAEH,MAAO,IAAIh5B,GADYzM,KAAK0lC,kBAAkBD,KAahDh5B,EAAA/I,UAAAqJ,KAAA,SAAKgN,GACH,MAAIgsB,WAAU9kC,OAAS,EACdjB,KAAKgmC,QAAQjsB,GAGb/Z,KAAKimC,WAIRx5B,EAAA/I,UAAAuiC,QAAR,WACE,MAAOjmC,MAAKmlC,SAAS,GAAGe,WAGlBz5B,EAAA/I,UAAAsiC,QAAR,SAAgBjsB,GAUd,WATgBvK,KAAZuK,GAAoC,MAAXA,IAE3BA,EAAU,IAGZ/Z,KAAKyZ,QAAQ,SAAC5X,GACZA,EAAQqkC,UAAYnsB,IAGf/Z,MAOTyM,EAAA/I,UAAAkT,MAAA,WAIE,MAHA5W,MAAKyZ,QAAQ,SAAC5X,GACZA,EAAQqkC,UAAY,KAEflmC,MAQTyM,EAAA/I,UAAA6nB,IAAA,WACE,GAAI1pB,GAAU7B,KAAKmlC,SAAS,EAE5B,IAAItjC,YAAmBskC,oBAAqBtkC,YAAmBukC,kBAC7D,MAAOvkC,GAAQiC,KAIf,MAAM,IAAIjD,OAAM,iCAAkCgB,KAetD4K,EAAA/I,UAAA+nB,KAAA,SAAK4a,EAAmBviC,GACtB,MAAIiiC,WAAU9kC,OAAS,EACdjB,KAAKsmC,QAAQD,EAAWviC,GAGxB9D,KAAKumC,QAAQF,IAIhB55B,EAAA/I,UAAA6iC,QAAR,SAAgBF,GACd,MAAOrmC,MAAKmlC,SAAS,GAAGqB,aAAaH,IAG/B55B,EAAA/I,UAAA4iC,QAAR,SAAgBD,EAAmBviC,GAIjC,MAHA9D,MAAKyZ,QAAQ,SAAC5X,GACZA,EAAQ2jC,aAAaa,EAAWviC,KAE3B9D,MAcTyM,EAAA/I,UAAA2L,KAAA,SAAKo3B,EAAuB3iC,GAC1B,MAAIiiC,WAAU9kC,OAAS,EACdjB,KAAK0mC,QAAQD,EAAe3iC,GAG5B9D,KAAK2mC,QAAQF,IAIhBh6B,EAAA/I,UAAAijC,QAAR,SAAgBF,GACd,MAAOzmC,MAAKmlC,SAAS,GAAGqB,aAAa,QAAUC,IAGzCh6B,EAAA/I,UAAAgjC,QAAR,SAAgBD,EAAuB3iC,GAIrC,MAHA9D,MAAKyZ,QAAQ,SAAC5X,GACZA,EAAQ2jC,aAAa,QAAUiB,EAAe3iC,KAEzC9D,MAQTyM,EAAA/I,UAAAmJ,OAAA,eAAO,GAAA+4B,MAAAl8B,EAAA,EAAAA,EAAAq8B,UAAA9kC,OAAAyI,IAAAk8B,EAAAl8B,GAAAq8B,UAAAr8B,EAQL,OAPA1J,MAAKyZ,QAAQ,SAAC5X,GACZ+jC,EAAcnsB,QAAQ,SAACmtB,GACrBA,EAAazB,SAAS1rB,QAAQ,SAAC5V,EAAGtC,GAChCM,EAAQ+sB,YAAYgY,EAAazB,SAAS5jC,UAIzCvB,MAMTyM,EAAA/I,UAAAtC,OAAA,WACEpB,KAAKyZ,QAAQ,SAAC5X,GACZ,GAAIglC,GAAShlC,EAAQ8sB,UACjBkY,IACFA,EAAO7X,YAAYntB,MASzB4K,EAAA/I,UAAA8jB,OAAA,WACE,GAAI3lB,GAAU7B,KAAKmlC,SAAS,GACxB2B,EAAcjlC,EAAQklC,wBACtBC,EAAWzgB,SAAS0gB,KAAKlY,cAAcgY,uBAe3C,QACEhf,IAAK+e,EAAY/e,IAAMif,EAASjf,IAChCN,KAAMqf,EAAYrf,KAAOuf,EAASvf,OAQtChb,EAAA/I,UAAAga,MAAA,WAEE,MAAO1d,MAAKmlC,SAAS,GAAG+B,aAO1Bz6B,EAAA/I,UAAAskB,OAAA,WAEE,MAAOhoB,MAAKmlC,SAAS,GAAGgC,cAS1B16B,EAAA/I,UAAAM,GAAA,SAAGojC,EAAmBC,GAAtB,GAAAtlC,GAAA/B,IAcE,OAbaonC,GAAUE,MAAM,KAEtB7tB,QAAQ,SAACxX,GACO,MAAjBF,EAAKojC,SACPpjC,EAAKwkB,SAASghB,iBAAiBtlC,EAAOolC,GAGtCtlC,EAAK0X,QAAQ,SAAC5X,GACZA,EAAQ0lC,iBAAiBtlC,EAAOolC,OAK/BrnC,MASTyM,EAAA/I,UAAA0D,IAAA,SAAIggC,EAAmBC,GAAvB,GAAAtlC,GAAA/B,IAcE,OAbaonC,GAAUE,MAAM,KAEtB7tB,QAAQ,SAACxX,GACO,MAAjBF,EAAKojC,SACPpjC,EAAKwkB,SAASihB,oBAAoBvlC,EAAOolC,GAGzCtlC,EAAK0X,QAAQ,SAAC5X,GACZA,EAAQ2lC,oBAAoBvlC,EAAOolC,OAKlCrnC,MAQTyM,EAAA/I,UAAA0N,SAAA,SAASq2B,GAeP,MAdAznC,MAAKyZ,QAAQ,SAAC5X,QACZ,IAAIA,EAAQ6lC,UAAW,CACrB,GAAMC,GAAaF,EAAUH,MAAM,KAChCjuB,OAAO,SAAAouB,GAAa,MAAAA,GAAUxmC,OAAS,GAEtC0mC,GAAW1mC,OAAS,IACtByR,EAAA7Q,EAAQ6lC,WAAUE,IAAGnY,MAAA/c,EAAIi1B,OAI3B9lC,GAAQ4lC,WAAa,IAAMA,IAIxBznC,MAQTyM,EAAA/I,UAAA6N,YAAA,SAAYk2B,GAgBV,MAfAznC,MAAKyZ,QAAQ,SAAC5X,QACZ,IAAIA,EAAQ6lC,UAAW,CACrB,GAAMC,GAAaF,EAAUH,MAAM,KAChCjuB,OAAO,SAAAouB,GAAa,MAAAA,GAAUxmC,OAAS,GAEtC0mC,GAAW1mC,OAAS,IACtByR,EAAA7Q,EAAQ6lC,WAAUtmC,OAAMquB,MAAA/c,EAAIi1B,OAI9B9lC,GAAQ4lC,UAAY5lC,EAAQ4lC,UAAUI,QACpC,GAAIC,QAAO,UAAYL,EAAUH,MAAM,KAAKr2B,KAAK,KAAO,UAAW,MAAO,OAIzEjR,MAQTyM,EAAA/I,UAAAyS,SAAA,SAASsxB,GACP,GAAItxB,IAAW,CAkBf,OAhBAnW,MAAKyZ,QAAQ,SAAC5X,GACRA,EAAQ6lC,UACN7lC,EAAQ6lC,UAAUK,SAASN,KAG7BtxB,GAAW,GAIT,GAAI2xB,QAAO,QAAUL,EAAY,QAAS,MAAMziC,KAAKnD,EAAQ4lC,aAE/DtxB,GAAW,KAKVA,GAmBT1J,EAAA/I,UAAAsN,IAAA,SAAIg3B,EAAkDlkC,GACpD,GAAwC,gBAA7BkkC,GAAuC,CAChD,GAAIvP,GAAeuP,CAEnB,OAAyB,KAArBjC,UAAU9kC,OACLjB,KAAKioC,OAAOxP,EAAc30B,GAG1B9D,KAAKkoC,OAAOzP,GAIrB,GAAI0P,GAA0BH,CAC9B,OAAOhoC,MAAKooC,iBAAiBD,IAIzB17B,EAAA/I,UAAAwkC,OAAR,SAAezP,GACb,MAAO4P,kBAAiBroC,KAAKmlC,SAAS,IAAS1M,IAGzChsB,EAAA/I,UAAAukC,OAAR,SAAexP,EAAsB30B,GAKnC,MAJA9D,MAAKyZ,QAAQ,SAAC5X,GAEZA,EAAQ6mB,MAAW+P,GAAgB30B,IAE9B9D,MAGDyM,EAAA/I,UAAA0kC,iBAAR,SAAyBE,GAMvB,MALAtoC,MAAKyZ,QAAQ,SAAC5X,GAEZ8C,OAAOkM,OAAOhP,EAAQ6mB,MAAO4f,KAGxBtoC,MAEXyM,IAzgBajN,GAAAiN,IAAAA,0FCjBb,SAAiBgH,GAEFA,EAAA80B,sBACXC,IAAM,mBACNC,KAAM,qEACNC,KAAM,sBACNC,KAAM,2DACNC,KAAM,gCACNC,KAAM,2BACNC,KAAM,4EACNC,KAAM,gCACNC,KAAM,oCACNC,KAAM,uCACNC,KAAM,0CACNC,KAAM,mDACNC,KAAM,wDACNC,KAAM,0CACNC,KAAM,oCACNC,KAAM,kLACNC,KAAM,uBACNC,KAAM,+BACNC,KAAM,qCACNC,KAAM,mEACNC,KAAM,mCACNC,KAAM,yCACNC,KAAM,8CACNC,KAAM,kCACNC,KAAM,mCACNC,KAAM,mEACNC,KAAM,0BACNC,KAAM,yCACNC,KAAM,yBACNC,KAAM,yDACNC,KAAM,+CACNC,KAAM,0CACNC,KAAM,0CACNC,KAAM,kCACNC,KAAM,kCACNC,KAAM,iCACNC,KAAM,4CACNC,KAAM,sCACNC,IAAM,oBACNC,KAAM,wCACNC,KAAM,sCACNC,KAAM,yBACNC,KAAM,0BACNC,KAAM,4BACNC,KAAM,0EACNC,KAAM,6CACNC,KAAM,uDACNC,KAAM,YACNC,KAAM,kCACNC,KAAM,+BACNC,KAAM,8DACNC,KAAM,iFACNC,KAAM,mCACNC,KAAM,mBACNC,KAAM,oDACNC,IAAM,uBACNC,KAAM,6DACNC,KAAM,mHACNC,KAAM,8EACNC,KAAM,0EACNC,KAAM,qFAGK34B,EAAAC,8BAAwD,SAAC8Q,GACpE,GAAM6nB,GAAe54B,EAAW80B,qBAAqB/jB,EAAM1jB,KAE3D,OAAIurC,GAEQA,EAAY,MAAM7nB,EAAMiZ,KAAI,IAG5BjZ,EAAM1jB,KAAI,IAAI0jB,EAAMiZ,OA1EnBj+B,EAAAiU,aAAAjU,EAAAiU;0HCHjB,IAAAxB,GAAAtR,EAAA,gBACA+J,EAAA/J,EAAA,aA4DA2L,EAAA,WAIE,QAAAA,KAFQtM,KAAAssC,aA+FV,MAvFEhgC,GAAA5I,UAAAE,UAAA,SAAU2oC,GACRvsC,KAAKssC,UAAUh6B,KAAK,GAAIk6B,GAAqBD,KAM/CjgC,EAAA5I,UAAAgS,cAAA,SAAc62B,GACZvsC,KAAKssC,UAAUh6B,KAAK,GAAIk6B,GAAqBD,GAAU,KAMzDjgC,EAAA5I,UAAA+f,qBAAA,SAAqB8oB,EAAuCE,GAC1DzsC,KAAKssC,UAAUh6B,KAAK,GAAIo6B,GAAgCH,EAAUE,KAMpEngC,EAAA5I,UAAA+Y,YAAA,SAAY8vB,GAGV,IAAK,GAAI3rC,GAAI,EAAGA,EAAIZ,KAAKssC,UAAUrrC,OAAQL,IAAK,CAC9C,GAAI+rC,GAAqB3sC,KAAKssC,UAAU1rC,EACxC,IAAI+rC,EAAmBJ,WAAaA,EAGlC,MAFAI,GAAmBphC,QACnB0G,EAAA9Q,WAAWC,OAAOpB,KAAKssC,UAAWK,IAC3B,EAIX,OAAO,GAMTrgC,EAAA5I,UAAAkpC,eAAA,WAEE,IAAqB,GAAAljC,GAAA,EAAAgJ,EAAA1S,KAAKssC,UAAL5iC,EAAAgJ,EAAAzR,OAAAyI,IAAgB,CAApBgJ,EAAAhJ,GACN6B,QAGXvL,KAAKssC,cAQPhgC,EAAA5I,UAAAyJ,SAAA,SAAStD,EAAgBsT,OAAA,KAAAA,IAAAA,EAAA,KAWvB,KAAqB,GAVjB0vB,MASEP,EAAYtsC,KAAKssC,UAAU35B,MAAM,GAClBjJ,EAAA,EAAAojC,EAAAR,EAAA5iC,EAAAojC,EAAA7rC,OAAAyI,IAAW,CAA3B,GAAI6iC,GAAQO,EAAApjC,EACf6iC,GAASQ,KAAKljC,EAAQsT,GAElBovB,EAASS,UACXH,EAAkBv6B,KAAKi6B,GAK3B,IAA6B,GAAA75B,GAAA,EAAAu6B,EAAAJ,EAAAn6B,EAAAu6B,EAAAhsC,OAAAyR,IAAmB,CAA3C,GAAIw6B,GAAgBD,EAAAv6B,EACvBT,GAAA9Q,WAAWC,OAAOpB,KAAKssC,UAAWY,KAQtC5gC,EAAA5I,UAAA0J,SAAA,WAGE,MAA4BpN,OAEhCsM,IAjGa9M,GAAA8M,gBAAAA,CAuGb,IAAAkgC,GAAA,WAKE,QAAAA,GAAYD,EAAuCY,OAAA,KAAAA,IAAAA,GAAA,GACjDntC,KAAKotC,cAAgBb,EACrBvsC,KAAKmtC,KAAOA,EA8BhB,MAvBExoC,QAAAC,eAAI4nC,EAAA9oC,UAAA,gBAAJ,WACE,MAAO1D,MAAKotC,+CAQdZ,EAAA9oC,UAAAqpC,KAAA,SAAKljC,EAAgBsT,GACnBnd,KAAKotC,cAAcvjC,EAAQsT,IAO7BqvB,EAAA9oC,UAAAspC,OAAA,WACE,MAAOhtC,MAAKmtC,MAGdX,EAAA9oC,UAAA6H,MAAA,aAEFihC,KAUAE,EAAA,SAAAvnC,GAUE,QAAAunC,GAAYH,EAAuCE,GAAnD,GAAA1qC,GACEoD,EAAAnE,KAAAhB,KAAMusC,IAASvsC,IAEf+B,GAAK0qC,OAASA,CAGd,IAAMY,GAAoB,WACxBtrC,EAAKurC,gBAAgBjiC,eAIvBtJ,GAAKurC,gBAAkB,GAAI5iC,GAAAS,QAAQpJ,EAAK0qC,OAAQ,WAC1C1qC,EAAKwrC,gBACPxrC,EAAKyrC,UAAUzrC,EAAKwrC,cAAc1jC,OAAQ9H,EAAKwrC,cAAcpwB,MAC7DkwB,IACAtrC,EAAKwrC,cAAgB,QAMzBxrC,EAAK0rC,0BAA4B,SAAC5jC,EAAgBsT,GAEhD,GAAIpb,EAAK2rC,kBAGP,MAFA3rC,GAAKyrC,UAAU3jC,EAAQsT,OACvBkwB,IAIFtrC,GAAKwrC,eACH1jC,OAAQA,EACRsT,KAAMA,MAuBd,MAhE4D/X,GAAAsnC,EAAAvnC,GA8ClDunC,EAAAhpC,UAAAgqC,gBAAR,WACE,OAAQ1tC,KAAKstC,gBAAgB92B,YAGvBk2B,EAAAhpC,UAAA8pC,UAAR,SAAkB3jC,EAAgBsT,GAEhChY,EAAAzB,UAAMqpC,KAAI/rC,KAAAhB,KAAC6J,EAAQsT,IAGrBuvB,EAAAhpC,UAAAqpC,KAAA,SAAKljC,EAAgBsT,GAEnBnd,KAAKytC,0BAA0B5jC,EAAQsT,IAGzCuvB,EAAAhpC,UAAA6H,MAAA,WACEpG,EAAAzB,UAAM6H,MAAKvK,KAAAhB,MACXA,KAAKstC,gBAAgB/hC,SAEzBmhC,GAhE4DF,0HCnN5D,SAAiBt8B,GAIf,QAAgBC,KACd,MAAOw9B,KAHT,GAAIA,GAAO,CAEKz9B,GAAAC,KAAIA,GAJL3Q,EAAA0Q,OAAA1Q,EAAA0Q,gGCAjB,IAAA/D,GAAAxL,EAAA,SAkBAqpB,EAAA,WAAA,QAAAA,KAEUhqB,KAAA29B,SAqDV,MA5CE3T,GAAAtmB,UAAA2mB,KAAA,SAAKjb,EAAaw+B,GAAlB,GAAA7rC,GAAA/B,IACE,IAAKA,KAAK29B,MAAMvuB,GAwBT,CAEL,GAAIuuB,GAAQ39B,KAAK29B,MAAMvuB,EAKvBuuB,GAAMiQ,eAAiBA,EAGnBjQ,EAAMkQ,QACR7tC,KAAK8tC,mBAAmBnQ,OAnCN,CAGpB,GAAIoQ,IACF3+B,IAAKA,EACLgmB,MAAO,GAAIjpB,GAAAM,IAAI,UACfmhC,eAAgBA,EAChBC,QAAQ,EACRnwB,MAAO,EACPsK,OAAQ,EAEVhoB,MAAK29B,MAAMvuB,GAAO2+B,EAGlBA,EAAM3Y,MAAMpxB,GAAG,OAAQ,SAAC7D,GACtB4tC,EAAMF,QAAS,EACfE,EAAMrwB,MAA2BqwB,EAAM3Y,MAAMjH,IAAI,GAAIzQ,MACrDqwB,EAAM/lB,OAA4B+lB,EAAM3Y,MAAMjH,IAAI,GAAInG,OAEtDjmB,EAAK+rC,mBAAmBC,KAI1BA,EAAM3Y,MAAM3J,KAAK,MAAOsiB,EAAM3+B,OAiB1B4a,EAAAtmB,UAAAoqC,mBAAR,SAA2BnQ,GACzBA,EAAMiQ,eAAejQ,EAAMvuB,IAAKuuB,EAAMjgB,MAAOigB,EAAM3V,SAEvDgC,IAvDaxqB,GAAAwqB,YAAAA,8ZClBb,IAAAgkB,GAAAC,EAAAttC,EAAA,wBACAutC,EAAAD,EAAAttC,EAAA,uBAGanB,GAAA2uC,qBACXC,GAAMF,EAAAG,QACNC,GAAMN,EAAAK,QAGR,IAAME,IACJC,SAAU,KACVC,aAAcjvC,EAAA2uC,qBAsEhBO,EAAA,WAIE,QAAAA,GAAYpoC,GACVtG,KAAK2uC,UAAUroC,GAyFnB,MAtFSooC,GAAAhrC,UAAAirC,UAAP,SAAiBroC,GACf,GAAMsoC,GAAYC,KAAQN,EAA8BjoC,GAClDwoC,EAAkD,SAA1BF,EAAaJ,SACrCC,EAAezuC,KAAK+uC,yCAAyCH,EAAaH,aAChFzuC,MAAKgvC,mBAAmBJ,EAAaJ,SAAUM,EAAuBL,GACtEzuC,KAAKivC,qBAAqBR,IAGbC,EAAAQ,iBAAf,SAAgCT,EAA4BD,GAC1D,MAAOC,GAAaU,eAAeX,IAG7BE,EAAAhrC,UAAAqrC,yCAAR,SAAiDN,OAAA,KAAAA,IAAAA,KAC/C,IAAMW,GAAeP,KAAsBrvC,EAAA2uC,oBAAwBM,EACnE,OAAO9pC,QAAOiV,KAAKw1B,GAAiBC,OAAO,SAACC,EAAoBd,SAC1De,EAAaH,EAAgBZ,EAIjC,OAHIE,GAAKQ,iBAAiB1vC,EAAA2uC,oBAAqBK,IAAaE,EAAKQ,iBAAiBT,EAAcD,KAC9Fe,EAAUV,KAAQrvC,EAAA2uC,oBAAoBK,GAAcC,EAAaD,KAEnEK,KAAYS,GAAkB58B,KAAAA,EAAG87B,GAAWe,EAAU78B,UAIlDg8B,EAAAhrC,UAAAsrC,mBAAR,SACER,EACAgB,EACAf,GAEA,GAAIe,EAAiC,CACnC,GAAMC,GAAe5vC,OAAOiF,UAAU0pC,QAEtC,IAAIE,EAAKQ,iBAAiBT,EAAcgB,GAEtC,YADAzvC,KAAKwuC,SAAWiB,EAGlB,IAAMC,GAAwBD,EAAa98B,MAAM,EAAG,EACpD,IAAI+7B,EAAKQ,iBAAiBT,EAAciB,GAEtC,YADA1vC,KAAKwuC,SAAWkB,GAKpB1vC,KAAKwuC,SAAWA,GAGVE,EAAAhrC,UAAAurC,qBAAR,SAA6BR,GAC3BzuC,KAAKuvC,YAAc,KAAMvvC,KAAKwuC,UAC3Ba,OAAO,SAACM,EAAOC,GAAS,MAAAf,MAAMc,EAAWlB,EAAamB,cAGnDlB,EAAAhrC,UAAAmsC,uCAAR,SAA+CppC,EAAcH,GAC3D,GAAMwpC,GAAUrpC,EAAKspC,MAAM,GAAIjI,QAAO,iBAAkB,KACxD,OAAuB,KAAnBgI,EAAQ7uC,OACHwF,EAGFqpC,EACJvsC,IAAI,SAACysC,GAAc,OAAGD,MAAOC,EAAG3sC,IAAK2sC,EAAEr9B,MAAM,GAAI,MACjD08B,OAAO,SAACY,EAAKv9B,MAAErP,GAAAqP,EAAArP,IAAK0sC,EAAAr9B,EAAAq9B,KAAY,OAAAzpC,GAAO6oC,eAAe9rC,GAAO4sC,EAAIpI,QAAQkI,EAAOzpC,EAAOjD,IAAQ4sC,GAAKxpC,IAGlGioC,EAAAhrC,UAAAjB,aAAP,SACEY,EACAiD,GAFF,GAAAvE,GAAA/B,IAIE,OAAO,YACL,GAAW,MAAPqD,EAAJ,CAGA,GAAI6sC,GAAmBnuC,EAAKwtC,WAAWlsC,EAUvC,OARwB,OAApB6sC,IACFA,EAAmB7sC,GAGP,MAAViD,IACF4pC,EAAmBnuC,EAAK8tC,uCAAuCK,EAAkB5pC,IAG5E4pC,KAIJxB,EAAAhrC,UAAAoD,oBAAP,SAA2BL,GACzB,MAAuB,kBAATA,GAAsBA,IAASA,GAEjDioC,IAEalvC,GAAAgD,KAAO,GAAIksC,GAAKH,6ECjL7B9uC,EAAAD,SACA2wC,yBAAA,gBACAC,yBAAA,gBACAC,uBAAA,YACA90B,MAAA,kBACA+0B,UAAA,kBACAhhC,KAAA,SACAihC,sBAAA,4BACAC,iBAAA,eACAC,aAAA,gBACAC,WAAA,cACA9O,GAAA,KACA+O,SAAA,gBACAC,WAAA,WACAxpC,IAAA,MACAypC,qBAAA,aACAC,+BAAA,QACAC,iCAAA,aACAC,gCAAA,QACAC,kCAAA,YACAC,mCAAA,SACAC,sCAAA,mBACAC,wCAAA,uBACAC,kCAAA,mBACAC,oCAAA,uBACAC,KAAA,SACAhlB,MAAA,eACAilB,OAAA,cACAC,oBAAA,kDACApD,QAAA,WACAqD,eAAA,OACAC,eAAA,UACAC,aAAA,MACAC,eAAA,OACAC,cAAA,OACAC,gBAAA,OACAC,mBAAA,sBACAC,UAAA,+CACAC,aAAA,iGCtCAzyC,EAAAD,SACA2wC,yBAAA,gBACAC,yBAAA,gBACAC,uBAAA,cACAE,sBAAA,cACAc,kCAAA,eACAC,oCAAA,iBACAT,qBAAA,YACAG,gCAAA,aACAC,kCAAA,eACAE,sCAAA,mBACAC,wCAAA,qBACAM,eAAA,QACAC,eAAA,QACAC,aAAA,MACAC,eAAA,QACAC,cAAA,OACAK,cAAA,OACAJ,gBAAA,SACAK,iBAAA,UACA7pB,QAAA,WACAuoB,+BAAA,YACAI,mCAAA,iBACAmB,0CAAA,SACAC,6CAAA,YACAC,2CAAA,UACAC,gDAAA,gBACAzB,iCAAA,cACA0B,iDAAA,mBACAC,mDAAA,qBACAC,qDAAA,wBACAC,uDAAA,0BACAC,wCAAA,SACAC,yCAAA,UACAC,8CAAA,gBACAtB,oBAAA,+CACAd,SAAA,WACAC,WAAA,aACAr1B,MAAA,QACA+0B,UAAA,aACAhhC,KAAA,OACAkhC,iBAAA,qBACAC,aAAA,gBACAC,WAAA,cACA9O,GAAA,KACAx6B,IAAA,MACA4rC,KAAA,OACAzB,KAAA,OACAhlB,MAAA,QACAilB,OAAA,SACAyB,OAAA,SACA5E,QAAA,UACAryB,KAAA,OACAg2B,mBAAA,mBACAC,UAAA,+CACAC,aAAA,6ICvDa1yC,EAAA0zC,QAAkB,OAE/B,IAAA7P,GAAA1iC,EAAA,cAASnB,GAAAqkC,UAAAR,EAAAQ,UAAWrkC,EAAA2zC,kBAAA9P,EAAA8P,iBAEpB,IAAAzP,GAAA/iC,EAAA,cAASnB,GAAAukC,UAAAL,EAAAK,SACT,IAAAqP,GAAAzyC,EAAA,gBAASnB,GAAAmkC,YAAAyP,EAAAzP,WAET,IAAA1xB,GAAAtR,EAAA,eAASnB,GAAA2B,WAAA8Q,EAAA9Q,UACT,IAAAiF,GAAAzF,EAAA,gBAASnB,GAAAoH,YAAAR,EAAAQ,WACT,IAAA+U,GAAAhb,EAAA,gBAASnB,GAAAwd,YAAArB,EAAAqB,WACT,IAAAq2B,GAAA1yC,EAAA,YAASnB,GAAA8zC,QAAAD,EAAAC,OACT,IAAAC,GAAA5yC,EAAA,iBAASnB,GAAAkF,aAAA6uC,EAAA7uC,YACT,IAAAqzB,GAAAp3B,EAAA,iBAASnB,GAAAm5B,aAAAZ,EAAAY,YACT,IAAAvlB,GAAAzS,EAAA,eAASnB,GAAAiU,WAAAL,EAAAK,UAET,IAAAnM,GAAA3G,EAAA,sBAASnB,GAAA4I,OAAAd,EAAAc,MACT,IAAA0pB,GAAAnxB,EAAA,0BAASnB,GAAA0T,WAAA4e,EAAA5e,UACT,IAAA0vB,GAAAjiC,EAAA,sCAASnB,GAAAwU,uBAAA4uB,EAAA5uB,sBACT,IAAAsL,GAAA3e,EAAA,wCAASnB,GAAAiV,yBAAA6K,EAAA7K,wBACT,IAAA+tB,GAAA7hC,EAAA,iCAASnB,GAAAoc,kBAAA4mB,EAAA5mB,kBAAmBpc,EAAAkc,sBAAA8mB,EAAA9mB,qBAC5B,IAAAlH,GAAA7T,EAAA,oCAASnB,GAAA4W,qBAAA5B,EAAA4B,oBACT,IAAAqqB,GAAA9/B,EAAA,uBAASnB,GAAAkhB,QAAA+f,EAAA/f,OACT,IAAAzX,GAAAtI,EAAA,yBAASnB,GAAA0K,UAAAjB,EAAAiB,SACT,IAAAspC,GAAA7yC,EAAA,iCAASnB,GAAA+W,kBAAAi9B,EAAAj9B,iBACT,IAAA6a,GAAAzwB,EAAA,6BAASnB,GAAAosB,cAAAwF,EAAAxF,aACT,IAAA2W,GAAA5hC,EAAA,oCAASnB,GAAA6xB,qBAAAkR,EAAAlR,oBACT,IAAAhpB,GAAA1H,EAAA,4BAASnB,GAAAwJ,aAAAX,EAAAW,YACT,IAAA0mB,GAAA/uB,EAAA,qCAASnB,GAAA0wB,sBAAAR,EAAAQ,qBACT,IAAA6P,GAAAp/B,EAAA,kCAASnB,GAAA0gC,mBAAAH,EAAAG,kBACT,IAAAoC,GAAA3hC,EAAA,8BAASnB,GAAAiiC,eAAAa,EAAAb,cACT,IAAAsB,GAAApiC,EAAA,yBAASnB,GAAA6iC,UAAAU,EAAAV,SACT,IAAAj0B,GAAAzN,EAAA,2BAASnB,GAAA0P,YAAAd,EAAAc,WACT,IAAA1E,GAAA7J,EAAA,yBAASnB,GAAA0M,UAAA1B,EAAA0B,SACT,IAAA/F,GAAAxF,EAAA,qBAASnB,GAAA6H,MAAAlB,EAAAkB,KACT,IAAAsoB,GAAAhvB,EAAA,qCAASnB,GAAA0J,sBAAAymB,EAAAzmB,qBACT,IAAAuqC,GAAA9yC,EAAA,mCAASnB,GAAA+K,oBAAAkpC,EAAAlpC,mBACT,IAAAu4B,GAAAniC,EAAA,iCAASnB,GAAA6N,kBAAAy1B,EAAAz1B,iBACT,IAAAs1B,GAAAhiC,EAAA,gCAASnB,GAAAqO,iBAAA80B,EAAA90B,gBACT,IAAApD,GAAA9J,EAAA,yBAASnB,GAAAqL,UAAAJ,EAAAI,SACT,IAAA63B,GAAA/hC,EAAA,mCAASnB,GAAA6T,oBAAAqvB,EAAArvB,mBACT,IAAAwvB,GAAAliC,EAAA,qCAASnB,GAAAkgB,sBAAAmjB,EAAAnjB,qBACT,IAAAujB,GAAAtiC,EAAA,4BAASnB,GAAA2pB,aAAA8Z,EAAA9Z,YACT,IAAA6Z,GAAAriC,EAAA,+BAASnB,GAAAuyB,gBAAAiR,EAAAjR,eACT,IAAA2hB,GAAA/yC,EAAA,iCAASnB,GAAA62B,kBAAAqd,EAAArd,iBACT,IAAAiN,GAAA3iC,EAAA,wBAASnB,GAAA66B,SAAAiJ,EAAAjJ,QACT,IAAAsZ,GAAAhzC,EAAA,mCAASnB,GAAAwgC,oBAAA2T,EAAA3T,mBACT,IAAA/6B,GAAAtE,EAAA,4BAASnB,GAAA0G,aAAAjB,EAAAiB,YACT,IAAA0tC,GAAAjzC,EAAA,4BAASnB,GAAA+H,aAAAqsC,EAAArsC,YACT,IAAAssC,GAAAlzC,EAAA,8BAASnB,GAAA6G,eAAAwtC,EAAAxtC,cACT,IAAAytC,GAAAnzC,EAAA,8BAASnB,GAAA0F,eAAA4uC,EAAA5uC,cACT,IAAA0qB,GAAAjvB,EAAA,sCAASnB,GAAAqb,uBAAA+U,EAAA/U,sBACT,IAAA4E,GAAA9e,EAAA,gCAASnB,GAAA6W,iBAAAoJ,EAAApJ,gBACT,IAAAktB,GAAA5iC,EAAA,gCAASnB,GAAAmL,iBAAA44B,EAAA54B,gBACT,IAAAopC,GAAApzC,EAAA,+BAASnB,GAAA6O,gBAAA0lC,EAAA1lC,eACT,IAAA60B,GAAAviC,EAAA,qCAASnB,GAAA+f,sBAAA2jB,EAAA3jB,qBACT,IAAAy0B,GAAArzC,EAAA,2BAASnB,GAAAiQ,YAAAukC,EAAAvkC,WACT,IAAA2qB,IAAAz5B,EAAA,6BAASnB,GAAAsa,cAAAsgB,GAAAtgB,cAAeta,EAAAqa,qBAAAugB,GAAAvgB,oBACxB,IAAA4oB,IAAA9hC,EAAA,mCAASnB,GAAA8I,oBAAAm6B,GAAAn6B,mBACT,IAAAw3B,IAAAn/B,EAAA,4BAASnB,GAAA4gC,aAAAN,GAAAM,YACT,IAAA+C,IAAAxiC,EAAA,4CAASnB,GAAAib,6BAAA0oB,GAAA1oB,4BACT,IAAA2oB,IAAAziC,EAAA,sBAASnB,GAAAkyB,OAAA0R,GAAA1R,MACT,IAAAgI,IAAA/4B,EAAA,yDAASnB,GAAA+2B,yBAAAmD,GAAAnD,wBACT,IAAAoD,IAAAh5B,EAAA,2DAASnB,GAAAy3B,2BAAA0C,GAAA1C,0BACT,IAAAwC,IAAA94B,EAAA,uDAASnB,GAAA03B,uBAAAuC,GAAAvC,sBACT,IAAAqC,IAAA54B,EAAA,mDAASnB,GAAA43B,mBAAAmC,GAAAnC,kBACT,IAAAkC,IAAA34B,EAAA,oDAASnB,GAAA+3B,oBAAA+B,GAAA/B,mBACT,IAAAiC,IAAA74B,EAAA,qDAASnB,GAAAi4B,qBAAA+B,GAAA/B,oBACT,IAAA4B,IAAA14B,EAAA,kDAASnB,GAAAk4B,kBAAA2B,GAAA3B,iBACT,IAAApB,IAAA31B,EAAA,yDAASnB,GAAAw3B,yBAAAV,GAAAU,wBACT,IAAAid,IAAAtzC,EAAA,sDAASnB,GAAAq4B,sBAAAoc,GAAApc,qBACT,IAAA+B,IAAAj5B,EAAA,qDAASnB,GAAAy6B,qBAAAL,GAAAK,oBACT,IAAAJ,IAAAl5B,EAAA,uDAASnB,GAAA06B,uBAAAL,GAAAK,sBACT,IAAAJ,IAAAn5B,EAAA,4DAASnB,GAAA26B,4BAAAL,GAAAK,2BACT,IAAAhwB,IAAAxJ,EAAA,uBAASnB,GAAA8K,QAAAH,GAAAG,OACT,IAAAk5B,IAAA7iC,EAAA,+BAASnB,GAAAoyB,gBAAA4R,GAAA5R,eACT,IAAA6R,IAAA9iC,EAAA,iCAASnB,GAAA6K,kBAAAo5B,GAAAp5B,iBACT,IAAAshB,IAAAhrB,EAAA,iCAASnB,GAAA+tB,kBAAA5B,GAAA4B,iBACT,IAAAwM,IAAAp5B,EAAA,2CAASnB,GAAAsxB,4BAAAiJ,GAAAjJ,2BACT,IAAAojB,IAAAvzC,EAAA,2CAASnB,GAAA2xB,4BAAA+iB,GAAA/iB,2BACT,IAAAgjB,IAAAxzC,EAAA,0DAASnB,GAAAw6B,0BAAAma,GAAAna,yBACT,IAAA1J,IAAA3vB,EAAA,iCAASnB,GAAAqwB,kBAAAS,GAAAT,kBAIoB,kBAAlBlrB,QAAOkM,SAChBlM,OAAOkM,OAAS,SAASnB,GAEvB,GAAc,MAAVA,EACF,KAAM,IAAI0kC,WAAU,6CAGtB1kC,GAAS/K,OAAO+K,EAChB,KAAK,GAAInO,GAAQ,EAAGA,EAAQwkC,UAAU9kC,OAAQM,IAAS,CACrD,GAAIogC,GAASoE,UAAUxkC,EACvB,IAAc,MAAVogC,EACF,IAAK,GAAIt+B,KAAOs+B,GACVh9B,OAAOjB,UAAUyrC,eAAenuC,KAAK2gC,EAAQt+B,KAC/CqM,EAAOrM,GAAOs+B,EAAOt+B,IAK7B,MAAOqM,uxFCtGX,IAAAtD,GAAAzL,EAAA,qBACA4yC,EAAA5yC,EAAA,mBAIA,SAAiBqc,GAUf,QAAgB+B,GAAqBnd,GACnC,MAAOA,GAAO2a,UAAyC,IAA7B3a,EAAOib,kBAGnC,QAAgByhB,GAAS18B,GACvB,MAAIA,GAAOyyC,WACFxW,EAAYO,SACVx8B,EAAOoN,YACT6uB,EAAYlyB,QACV/J,EAAOkb,WACT+gB,EAAYjyB,OACY,MAAtBhK,EAAOoU,YACT6nB,EAAYM,SAEZN,EAAYK,KASvB,QAAgBzgB,GAAsC7b,GACpD,GAAMuc,GAAcvc,EAAOiG,gBAC3B,OAAIjG,GAAO2a,SACF4B,EAIFA,EADoBnB,EAAYsE,sBAAsB1f,EAAQ,GAavE,QAAgB0f,GAAsB1f,EAAmB0yC,GACvD,WADuD,KAAAA,IAAAA,EAAA,GAChD1yC,EAAO2yC,oBAAsB3yC,EAAO2yC,mBAAmBlpC,OAASipC,EAnDzE,GAAYzW,IAAZ,SAAYA,GACVA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,SAAA,GAAA,WACAA,EAAAA,EAAA,QAAA,GAAA,UACAA,EAAAA,EAAA,OAAA,GAAA,SACAA,EAAAA,EAAA,SAAA,GAAA,YALUA,EAAA7gB,EAAA6gB,cAAA7gB,EAAA6gB,iBAQI7gB,EAAA+B,qBAAoBA,EAIpB/B,EAAAshB,SAAQA,EAmBRthB,EAAAS,sCAAqCA,EAmBrCT,EAAAsE,sBAAqBA,CAQrC,IAAApC,GAAA,WAME,QAAAA,GAAYtd,GAAZ,GAAAG,GAAA/B,IAFQA,MAAAw0C,kCAAoC,GAAIpoC,GAAAE,gBAG9CtM,KAAK4B,OAASA,EACd5B,KAAK8jB,uBAAqBtU,EAE1B,IAAIyP,GAAoB,WACtBld,EAAKqb,SAGPxb,GAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY6P,aAAcmL,GAGnDrd,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYiD,YAAa+X,GAkBtD,MAfEC,GAAAxb,UAAA0Z,OAAA,WACE,GAAIpd,KAAK4B,OAAO2a,SAAU,CACxB,GAAIk4B,GAAwBz3B,EAAY+B,qBAAqB/e,KAAK4B,OAG9D6yC,KAA0Bz0C,KAAK8jB,qBACjC9jB,KAAKw0C,kCAAkCrnC,SAASnN,KAAK4B,QAAUkiB,mBAAoB2wB,IACnFz0C,KAAK8jB,mBAAqB2wB,KAKhC9vC,OAAAC,eAAIsa,EAAAxb,UAAA,sCAAJ,WACE,MAAO1D,MAAKw0C,kCAAkCpnC,4CAElD8R,IAnCalC,GAAAkC,8BAA6BA,CA4D1C,IAAAjC,GAAA,WAOE,QAAAA,GAAYrb,EAAmBE,GAA/B,GAAAC,GAAA/B,IAHQA,MAAA00C,iBAAmB,GAAItoC,GAAAE,gBAI7BtM,KAAK4B,OAASA,EACd5B,KAAK8B,UAAYA,EACjB9B,KAAKgc,SAAOxM,EAEZ,IAAImlC,GAAe,WACjB5yC,EAAKqb,SAEPpd,MAAK8B,UAAUyC,YAAYC,OAAOC,UAAUb,UAAU+wC,GAEtD/yC,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYyH,KAAMipC,GAKvCpB,EAAA7uC,aAAakwC,WAAarB,EAAA7uC,aAAamwC,UACzCjzC,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYiD,YAAaytC,GAIhD/yC,EAAOpC,QAAQyE,YAAY6wC,iBAC7BlzC,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY6wC,gBAAiBH,GAIxD/yC,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY8wC,eAAgBJ,GACrD/yC,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY+wC,gBAAiBL,GAiB1D,MAdE13B,GAAAvZ,UAAA0Z,OAAA,WACE,GAAI63B,GAAUj1C,KAAK4B,OAAO2a,QAItB04B,KAAYj1C,KAAKgc,OACnBhc,KAAK00C,iBAAiBvnC,SAASnN,KAAK4B,QAAUoa,KAAMi5B,IACpDj1C,KAAKgc,KAAOi5B,IAIhBtwC,OAAAC,eAAIqY,EAAAvZ,UAAA,qBAAJ,WACE,MAAO1D,MAAK00C,iBAAiBtnC,4CAEjC6P,IAlDaD,GAAAC,mBAAkBA,GAxHhBzd,EAAAwd,cAAAxd,EAAAwd,kJCLjB,SAAiB2b,GAGf,QAAgBuc,KACd,GAAIC,EACF,MAAOA,EAKT,IAAIC,IAAiBn0C,OAAQ,EAC7B,KACEm0C,EAAUv1C,OAAqB,YAC/B,IAAIyqB,GAAI,kBACR8qB,GAAQC,QAAQ/qB,EAAGA,GACnB8qB,EAAQxyC,WAAW0nB,GACnB6qB,GAAuB,EAEzB,MAAOh1C,GACLg1C,EAAuBh1C,YAAam1C,gBAEvB,KAAXn1C,EAAEW,MAES,OAAXX,EAAEW,MAGS,uBAAXX,EAAEs9B,MAES,+BAAXt9B,EAAEs9B,OAEiB,IAAnB2X,EAAQn0C,OAEZ,MAAOk0C,GAQT,QAAgBE,GAAQhyC,EAAagM,GAC/BspB,EAAauc,mBACfr1C,OAAO01C,aAAaF,QAAQhyC,EAAKgM,GASrC,QAAgBmmC,GAAQnyC,GACtB,MAAIs1B,GAAauc,kBACRr1C,OAAO01C,aAAaC,QAAQnyC,GAE5B,KAYX,QAAgBu1B,GAAav1B,EAAagM,GACxC,GAAIspB,EAAauc,kBAAmB,CAElCG,EAAQhyC,EADGoyC,KAAKC,UAAUrmC,KAa9B,QAAgBwpB,GAAax1B,GAC3B,GAAIs1B,EAAauc,kBAAmB,CAClC,GAAIS,GAAOH,EAAQnyC,EAEnB,IAAIA,EAAK,CAEP,MADaoyC,MAAKG,MAAMD,IAI5B,MAAO,MA1FT,GAAIR,EAEYxc,GAAAuc,gBAAeA,EAqCfvc,EAAA0c,QAAOA,EAWP1c,EAAA6c,QAAOA,EAgBP7c,EAAAC,UAASA,EAeTD,EAAAE,UAASA,GAlFVr5B,EAAAm5B,eAAAn5B,EAAAm5B,0GCEjB,SAAiB/xB,GAYf,QAAgBwX,GAAcy3B,EAAsBC,OAAA,KAAAA,IAAAA,EAAiBlvC,EAAAmX,cACnE,IAAIg4B,GAAaF,EAAe,CAE5BE,KAGFF,GAAgBA,EAIlB,IAAIG,GAAQn4B,KAAKo4B,MAAMJ,EAAe,MAClCK,EAAUr4B,KAAKo4B,MAAMJ,EAAe,IAAc,GAARG,EAC1C9rB,EAAUrM,KAAKo4B,MAAMJ,GAAgB,EAEzC,QAAQE,EAAa,IAAM,IAAMD,EAC5BjO,QAAQ,KAAMsO,EAAiBH,EAAO,IACtCnO,QAAQ,KAAMsO,EAAiBD,EAAS,IACxCrO,QAAQ,KAAMsO,EAAiBjsB,EAAS,IAW/C,QAASisB,GAAiBC,EAAsBn1C,GAC9C,GAAIwF,GAAO2vC,EAAM,EAEjB,OADc,aAAaC,OAAO,EAAGp1C,EAASwF,EAAKxF,QAClCwF,EA8BnB,QAAgBI,GAA6ByvC,EAAmB5uC,EAAoB9F,GAClF,GAAI20C,GAA4B,GAAIzO,QAClC,6GACA,IAGF,OAAOwO,GAAUzO,QAAQ0O,EAA2B,SAACC,GACnD,GAAIrxB,GAAO,CAYX,OAXIqxB,GAAah1C,QAAQ,kBAAoB,EAEzC2jB,EADEzd,EACKmW,KAAK0jB,KAAK75B,EAAa9F,EAAOiG,kBAE9BjG,EAAO0b,cAAgB1b,EAAOiG,iBAE9B2uC,EAAah1C,QAAQ,eAAiB,EAC/C2jB,EAAOvjB,EAAOiG,iBACL2uC,EAAah1C,QAAQ,eAAiB,IAC/C2jB,EAAOvjB,EAAO0b,eAETm5B,EAAatxB,EAAMqxB,KAI9B,QAASC,GAAatxB,EAAc2wB,GAClC,GAAIY,GAA8B,2DAC9BC,EAAqB,+BACrBC,EAAqB,YAEpBF,GAA4B1xC,KAAK8wC,KAEpCA,EAAS,KAIX,IAAIe,GAAgB,EAChBC,EAAuBhB,EAAO/F,MAAM4G,EACpCG,KACFD,EAAgB19B,SAAS29B,EAAqB,GAAGjY,UAAU,IAI7D,IAAIkY,GAAmB,KACnBC,EAAuBlB,EAAO/F,MAAM6G,EASxC,IARII,IAAyBlZ,MAAM3kB,SAAS69B,EAAqB,GAAGnY,UAAU,OAC5EkY,EAAmB59B,SAAS69B,EAAqB,GAAGnY,UAAU,KACvC,KACrBkY,EAAmB,IAKnBjB,EAAOt0C,QAAQ,MAAQ,EAAG,CAC5B,GAAIy1C,GAAa,EAUjB,OANEA,GAFuB,OAArBF,EAEW5xB,EAAK+xB,QAAQH,GAEb,GAAK5xB,EAIhB8xB,EAAWz1C,QAAQ,MAAQ,EACtB20C,EAAiBc,EAAYA,EAAWh2C,QAAU41C,EAAgBI,EAAWz1C,QAAQ,OAErF20C,EAAiBc,EAAYJ,GAKnC,GAAIf,EAAOt0C,QAAQ,MAAQ,EAAG,CACjC,GAAIq0C,GAAeh4B,KAAK0jB,KAAKpc,EAG7B,IAAI2wB,EAAOt0C,QAAQ,OAAS,EAC1B,MAAO4c,GAAcy3B,EAIrB,IAAIK,GAAUr4B,KAAKo4B,MAAMJ,EAAe,IACpC3rB,EAAU2rB,EAAe,EAE7B,OAAOM,GAAiBD,EAAS,GAAK,IAAMC,EAAiBjsB,EAAS,GAKxE,MAAOisB,GAAiBt4B,KAAK0jB,KAAKpc,GAAO0xB,GA9JlCjwC,EAAAmX,cAAwB,WACxBnX,EAAAoX,YAAsB,QASjBpX,EAAAwX,cAAaA,EA6DbxX,EAAAC,6BAA4BA,GAzE7BrH,EAAAoH,cAAApH,EAAAoH,uGCCjB,IAAAlF,GAAAf,EAAA,uBAOAkxB,EAAA,WAQE,QAAAA,GAAYjwB,EAAmBC,EAA2CC,GAA1E,GAAAC,GAAA/B,IAqCQA,MAAAm3C,YAAc,SAACl1C,GACrB,GAAMm1C,GAAWn1C,EAAMm1C,QAClBr1C,GAAKK,YAAYC,QAAQ+0C,EAAS90C,KACrCP,EAAKK,YAAYG,QAAQ60C,EAAS90C,GAAI80C,EAAS10C,QAI3C1C,KAAAq3C,eAAiB,SAACp1C,GACxB,GAAMm1C,GAAWn1C,EAAMm1C,QACnBr1C,GAAKK,YAAYC,QAAQ+0C,EAAS90C,KACpCP,EAAKK,YAAYQ,WAAWw0C,EAAS90C,KAIjCtC,KAAAs3C,sBAAwB,WAC9B,GAAKv1C,EAAKH,OAAO21C,UAAjB,CAKA,GAAIC,GAAkBz1C,EAAKH,OAAO21C,UAAUE,OAAOp+B,OAAO,SAAC+9B,GAAa,MAAAA,GAASnhC,UAAS+X,KAC1FjsB,GAAKK,YAAYY,WAAWw0C,EAAkBA,EAAgBl1C,GAAKuvB,EAAsB6lB,qBAGnF13C,KAAA23C,iBAAmB,WACzB,GAAK51C,EAAKH,OAAO21C,UAAjB,CAKA,GAAMK,IACJv0C,IAAKwuB,EAAsB6lB,kBAC3Bh1C,MAAOhB,EAAAc,KAAKC,aAAa,QAGrB80C,EAAYx1C,EAAKH,OAAO21C,UAAUE,OAClCI,EAAqB,SAACT,GAC1B,OAAS/zC,IAAK+zC,EAAS90C,GAAII,MAAO00C,EAAS10C,OAG7CX,GAAKK,YAAYkB,kBACfs0C,UAAgBL,EAAUh0C,IAAIs0C,OA7EhC73C,KAAK4B,OAASA,EACd5B,KAAKoC,YAAcP,EACnB7B,KAAK8B,UAAYA,EAEjB9B,KAAKwD,qBACLxD,KAAKyD,mBACLzD,KAAK23C,mBACL33C,KAAKs3C,wBAyET,MAtEUzlB,GAAAnuB,UAAAF,mBAAR,WAAA,GAAAzB,GAAA/B,IACEA,MAAKoC,YAAYuB,eAAeC,UAAU,SAACC,EAAGC,GAE5C,GAAIA,IAAU+tB,EAAsB6lB,kBAAmB,CACrD,GAAMF,GAAkBz1C,EAAKH,OAAO21C,UAAUE,OAAOp+B,OAAO,SAAC+9B,GAAa,MAAAA,GAASnhC,UAAS+X,KACxFwpB,IACFz1C,EAAKH,OAAO21C,UAAUzvC,QAAQ0vC,EAAgBl1C,QAGhDP,GAAKH,OAAO21C,UAAUxvC,OAAOjE,GAAO,MAKlC+tB,EAAAnuB,UAAAD,iBAAR,WACEzD,KAAK4B,OAAOoC,GAAGhE,KAAK4B,OAAOpC,QAAQyE,YAAY6zC,cAAe93C,KAAKm3C,aACnEn3C,KAAK4B,OAAOoC,GAAGhE,KAAK4B,OAAOpC,QAAQyE,YAAYmvB,gBAAiBpzB,KAAKs3C,uBACrEt3C,KAAK4B,OAAOoC,GAAGhE,KAAK4B,OAAOpC,QAAQyE,YAAYovB,iBAAkBrzB,KAAKs3C,uBACtEt3C,KAAK4B,OAAOoC,GAAGhE,KAAK4B,OAAOpC,QAAQyE,YAAY8zC,gBAAiB/3C,KAAKq3C,gBAErEr3C,KAAK4B,OAAOoC,GAAGhE,KAAK4B,OAAOpC,QAAQyE,YAAYE,eAAgBnE,KAAK23C,kBAEpE33C,KAAK4B,OAAOoC,GAAGhE,KAAK4B,OAAOpC,QAAQyE,YAAYG,eAAgBpE,KAAK23C,kBACpE33C,KAAK8B,UAAUyC,YAAYC,OAAOC,UAAUb,UAAU5D,KAAK23C,mBAxC9C9lB,EAAA6lB,kBAA4B,OAuF7C7lB,IAzFaryB,GAAAqyB,sBAAAA,gHCNb,IAAA1mB,GAAA,WAmBE,QAAAA,GAAY6sC,EAAeC,EAAsBC,OAAA,KAAAA,IAAAA,GAAA,GAC/Cl4C,KAAKg4C,MAAQA,EACbh4C,KAAKi4C,SAAWA,EAChBj4C,KAAKk4C,OAASA,EACdl4C,KAAKm4C,oBAAsB,EAC3Bn4C,KAAKo4C,QAAS,EAgDlB,MAzCEjtC,GAAAzH,UAAA2H,MAAA,WAEE,MADArL,MAAKusB,QACEvsB,MAMTmL,EAAAzH,UAAA6H,MAAA,WACEvL,KAAKq4C,iBAMPltC,EAAAzH,UAAA6oB,MAAA,WAAA,GAAAxqB,GAAA/B,IACEA,MAAKq4C,gBAEDr4C,KAAKk4C,OACPl4C,KAAKm4C,oBAAsBG,YAAYt4C,KAAKi4C,SAAUj4C,KAAKg4C,OAE3Dh4C,KAAKm4C,oBAAsBhjC,WAAW,WACpCpT,EAAKq2C,QAAS,EACdr2C,EAAKk2C,YACJj4C,KAAKg4C,OAEVh4C,KAAKo4C,QAAS,GAGhBjtC,EAAAzH,UAAA8S,SAAA,WACE,MAAOxW,MAAKo4C,QAGNjtC,EAAAzH,UAAA20C,cAAR,WACMr4C,KAAKk4C,OACPK,cAAcv4C,KAAKm4C,qBAEnBhc,aAAan8B,KAAKm4C,qBAEpBn4C,KAAKo4C,QAAS,GAElBjtC,IAxEa3L,GAAA2L,QAAAA,wFCJb,IAAA63B,GAAAriC,EAAA,gCACAgrB,EAAAhrB,EAAA,kCACA2vB,EAAA3vB,EAAA,kCACA+uB,EAAA/uB,EAAA,sCACAivB,EAAAjvB,EAAA,uCACA8yC,EAAA9yC,EAAA,oCACAgvB,EAAAhvB,EAAA,sCACAywB,EAAAzwB,EAAA,8BACAwzC,EAAAxzC,EAAA,2DACAuzC,EAAAvzC,EAAA,4CACAszC,EAAAtzC,EAAA,uDACA+yC,EAAA/yC,EAAA,kCACAmxB,EAAAnxB,EAAA,2BACA6J,EAAA7J,EAAA,0BACA6hC,EAAA7hC,EAAA,kCACA8/B,EAAA9/B,EAAA,wBACAsiC,EAAAtiC,EAAA,6BACA6T,EAAA7T,EAAA,qCACAo/B,EAAAp/B,EAAA,mCACAm/B,EAAAn/B,EAAA,6BACAyiC,EAAAziC,EAAA,uBACAwiC,EAAAxiC,EAAA,6CACA8hC,EAAA9hC,EAAA,oCACAgiC,EAAAhiC,EAAA,iCACA2hC,EAAA3hC,EAAA,+BACA4hC,EAAA5hC,EAAA,qCACAiiC,EAAAjiC,EAAA,uCACAyN,EAAAzN,EAAA,4BACA4iC,EAAA5iC,EAAA,iCACAuiC,EAAAviC,EAAA,sCACAmiC,EAAAniC,EAAA,kCACA2iC,EAAA3iC,EAAA,yBACAkiC,EAAAliC,EAAA,sCACAoiC,EAAApiC,EAAA,0BACA+hC,EAAA/hC,EAAA,oCACAmzC,EAAAnzC,EAAA,+BACAkzC,EAAAlzC,EAAA,+BACAizC,EAAAjzC,EAAA,6BACAqzC,EAAArzC,EAAA,4BACAy5B,EAAAz5B,EAAA,8BACAgb,EAAAhb,EAAA,iBACAwF,EAAAxF,EAAA,sBACAozC,EAAApzC,EAAA,gCACA0iC,EAAA1iC,EAAA,eAGAe,EAAAf,EAAA,wBAEA,SAAiBojC,GAEf,QAAgByU,GAAe52C,EAAmB0E,GAChD,WADgD,KAAAA,IAAAA,MACzCy9B,EAAU0U,cAAc72C,EAAQ0E,GAGzC,QAAgBoyC,GAA0B92C,EAAmB0E,GAC3D,WAD2D,KAAAA,IAAAA,MACpDy9B,EAAU4U,yBAAyB/2C,EAAQ0E,GAGpD,QAAgBsyC,GAA2Bh3C,EAAmB0E,GAC5D,WAD4D,KAAAA,IAAAA,MACrDy9B,EAAU8U,0BAA0Bj3C,EAAQ0E,GAGrD,QAASwyC,KACP,GAAIhjB,GAAkB,GAAIkN,GAAAjR,gBAEtBgnB,EAAwB,GAAIptB,GAAA4B,mBAC9BviB,YACE,GAAIslB,GAAAT,kBAAkBnuB,EAAAc,KAAKC,aAAa,0BAA2B,GAAIitB,GAAAQ,uBACvE,GAAII,GAAAT,kBAAkBnuB,EAAAc,KAAKC,aAAa,SAAU,GAAImtB,GAAA/U,wBACtD,GAAIyV,GAAAT,kBAAkBnuB,EAAAc,KAAKC,aAAa,wBAAyB,GAAIgxC,GAAAlpC,qBACrE,GAAI+lB,GAAAT,kBAAkBnuB,EAAAc,KAAKC,aAAa,0BAA2B,GAAIktB,GAAAzmB,0BAIvEqoB,EAAgB,GAAIH,GAAAxF,eACtB5gB,YACE+tC,GAEFhuC,QAAQ,IAGNiuC,EAA4B,GAAI7E,GAAAna,2BAClCzI,cAAeA,EACfoG,QAAS7B,IAGPmjB,EAA6B,GAAI/E,GAAA/iB,6BACnCpE,WAAYisB,EACZ/nB,UAAWM,EACX9qB,KAAM/E,EAAAc,KAAKC,aAAa,SAG1Bs2C,GAAsB3mC,aACpB,GAAIke,GAAAT,kBACF,GAAIokB,GAAApc,uBAAuBpxB,KAAM/E,EAAAc,KAAKC,aAAa,sBAAuBq1B,OAAQmhB,IAClF,GAAIvF,GAAArd,oBAGR9E,EAAcnf,aAAa4mC,EAE3B,IAAIlU,GAAa,GAAIhT,GAAA5e,YACnBlI,YACEumB,EACA,GAAI/mB,GAAA0B,WACFlB,YACE,GAAIw3B,GAAA5mB,mBAAoBC,cAAe2mB,EAAA9mB,sBAAsB4C,YAAavC,oBAAoB,IAC9F,GAAI0kB,GAAA/f,SAAUhe,MAAO,GAAIugC,GAAA9Z,eACzB,GAAIqZ,GAAA5mB,mBAAoBC,cAAe2mB,EAAA9mB,sBAAsB6C,UAAWpV,YAAa,iBAEvFA,YAAa,oBAEf,GAAIqB,GAAA0B,WACFlB,YACE,GAAIwJ,GAAA4B,qBACJ,GAAI2pB,GAAAG,mBACJ,GAAIJ,GAAAM,aACJ,GAAIgD,GAAA1R,OACJ,GAAIyR,GAAA1oB,6BACJ,GAAIgoB,GAAAn6B,oBACJ,GAAIq6B,GAAA90B,iBACJ,GAAIy0B,GAAAb,eACJ,GAAIc,GAAAlR,sBAAuBE,cAAeA,IAC1C,GAAIqR,GAAA5uB,wBAEN7K,YAAa,yBAKnB,OAAO,IAAIiF,GAAAc,aACTlE,YACE8qB,EACA,GAAIyN,GAAA54B,iBACJ,GAAIu4B,GAAA3jB,sBACJ,GAAIujB,GAAAz1B,kBACJy3B,EACA,GAAIxB,GAAAjJ,SACJ,GAAIwI,GAAAnjB,sBACJ,GAAIqjB,GAAAV,UACJ,GAAIK,GAAArvB,qBAEN3E,UAAW,IACXyuB,2BACExhB,EAAAqB,YAAY6gB,YAAYM,SACxBxiB,EAAAqB,YAAY6gB,YAAYjyB,OACxB+P,EAAAqB,YAAY6gB,YAAYO,YAK9B,QAAgBmG,KACd,MAAO,IAAIn2B,GAAAc,aACTlE,YACE,GAAIu4B,GAAA54B,iBACJ,GAAImpC,GAAA5uC,eACJ,GAAIg+B,GAAA3jB,sBACJ,GAAI/U,GAAA0B,WACFlB,YACE,GAAI6oC,GAAAxtC,gBAAiBI,KAAM/E,EAAAc,KAAKC,aAAa,uBAC7C,GAAImxC,GAAArsC,cAENf,SAAU,kBAEZ,GAAIsrB,GAAA5e,YACFlI,YACE,GAAIR,GAAA0B,WACFlB,YACE,GAAIwJ,GAAA4B,qBACJ,GAAI2pB,GAAAG,mBACJ,GAAIJ,GAAAM,aACJ,GAAIgD,GAAA1R,OACJ,GAAIkR,GAAA5uB,wBAEN7K,YAAa,2BAKrBA,YAAa,eACbuF,UAAW,IACXyuB,2BACExhB,EAAAqB,YAAY6gB,YAAYM,SACxBxiB,EAAAqB,YAAY6gB,YAAYjyB,OACxB+P,EAAAqB,YAAY6gB,YAAYO,YAK9B,QAAgBoG,KACd,GAAI1O,GAAkB,GAAIkN,GAAAjR,gBAEtBgnB,EAAwB,GAAIptB,GAAA4B,mBAC9BviB,YACE,GAAIslB,GAAAT,kBAAkBnuB,EAAAc,KAAKC,aAAa,0BAA2B,GAAIitB,GAAAQ,uBACvE,GAAII,GAAAT,kBAAkBnuB,EAAAc,KAAKC,aAAa,SAAU,GAAImtB,GAAA/U,wBACtD,GAAIyV,GAAAT,kBAAkBnuB,EAAAc,KAAKC,aAAa,wBAAyB,GAAIgxC,GAAAlpC,qBACrE,GAAI+lB,GAAAT,kBAAkBnuB,EAAAc,KAAKC,aAAa,0BAA2B,GAAIktB,GAAAzmB,0BAIvEqoB,EAAgB,GAAIH,GAAAxF,eACtB5gB,YACE+tC,GAEFhuC,QAAQ,EACRihB,yBAAyB,EACzBtd,WAAY,IAGVsqC,EAA4B,GAAI7E,GAAAna,2BAClCzI,cAAeA,EACfoG,QAAS7B,IAGPmjB,EAA6B,GAAI/E,GAAA/iB,6BACnCpE,WAAYisB,EACZ/nB,UAAWM,EACX9qB,KAAM/E,EAAAc,KAAKC,aAAa,SAG1Bs2C,GAAsB3mC,aACpB,GAAIke,GAAAT,kBACF,GAAIokB,GAAApc,uBAAuBpxB,KAAM/E,EAAAc,KAAKC,aAAa,sBAAuBq1B,OAAQmhB,IAClF,GAAIvF,GAAArd,oBAGR9E,EAAcnf,aAAa4mC,GAE3BznB,EAAcnf,aAAa,GAAI4hC,GAAAvkC,aAAcC,OAAQ6hB,KACrDynB,EAA0B5mC,aAAa,GAAI4hC,GAAAvkC,aAAcC,OAAQ6hB,IAEjE,IAAIuT,GAAa,GAAIhT,GAAA5e,YACnBlI,YACE,GAAIR,GAAA0B,WACFlB,YACE,GAAIw3B,GAAA5mB,mBAAoBC,cAAe2mB,EAAA9mB,sBAAsB4C,YAAavC,oBAAoB,IAC9F,GAAI0kB,GAAA/f,SAAUhe,MAAO,GAAIugC,GAAA9Z,eACzB,GAAIqZ,GAAA5mB,mBAAoBC,cAAe2mB,EAAA9mB,sBAAsB6C,UAAWpV,YAAa,iBAEvFA,YAAa,sBAKnB,OAAO,IAAIiF,GAAAc,aACTlE,YACE8qB,EACA,GAAIyN,GAAA54B,iBACJ,GAAIm4B,GAAAz1B,kBACJ,GAAI61B,GAAA3jB,sBACJ,GAAIsjB,GAAAnjB,sBACJolB,EACA,GAAIxB,GAAAjJ,UACFrvB,YACE,GAAIovB,GAAAtgB,eAAgBC,QAASqgB,EAAAvgB,qBAAqBM,QAClD,GAAIwoB,GAAA90B,iBACJ,GAAIy0B,GAAAb,eACJ,GAAI0B,GAAA1oB,6BACJ,GAAIgoB,GAAAn6B,oBACJ,GAAIy3B,GAAAG,mBACJ,GAAIqC,GAAAlR,sBAAuBE,cAAeA,IAC1C,GAAIqR,GAAA5uB,0BAGRud,EACA,GAAIwR,GAAAV,UACJ,GAAIK,GAAArvB,qBAENlK,YAAa,uBACbuF,UAAW,IACXyuB,2BACExhB,EAAAqB,YAAY6gB,YAAYM,SACxBxiB,EAAAqB,YAAY6gB,YAAYjyB,OACxB+P,EAAAqB,YAAY6gB,YAAYO;qIAK9B,QAAgB4F,KACd,MAAO,IAAI51B,GAAAc,aACTlE,YACE,GAAIu4B,GAAA54B,iBACJ,GAAImpC,GAAA5uC,eACJ,GAAIg+B,GAAA3jB,sBACJ,GAAI+jB,GAAAjJ,UACFrvB,YAEE,GAAI7E,GAAAkB,OAAQb,SAAU,yBACtB,GAAIo8B,GAAA5uB,0BAGR,GAAIxJ,GAAA0B,WACFlB,YACE,GAAI6oC,GAAAxtC,gBAAiBI,KAAM,6BAC3B,GAAImtC,GAAArsC,cAENf,SAAU,mBAGd2C,YAAa,cAAe,uBAC5BuF,UAAW,IACXyuB,2BACExhB,EAAAqB,YAAY6gB,YAAYM,SACxBxiB,EAAAqB,YAAY6gB,YAAYjyB,OACxB+P,EAAAqB,YAAY6gB,YAAYO,YAK9B,QAAgB8a,KACd,GAAIpU,GAAa,GAAIhT,GAAA5e,YACnBlI,YACE,GAAIR,GAAA0B,WACFlB,YACE,GAAIw3B,GAAA5mB,mBAAoBC,cAAe2mB,EAAA9mB,sBAAsB4C,YAAavC,oBAAoB,IAC9F,GAAI0kB,GAAA/f,SAAUgB,wCAAyC,IACvD,GAAI8gB,GAAA5mB,mBAAoBC,cAAe2mB,EAAA9mB,sBAAsB6C,UAAWpV,YAAa,iBAEvFA,YAAa,sBAKnB,OAAO,IAAI4qC,GAAA1lC,iBACTrD,YACE,GAAIg4B,GAAAjR,gBACJ,GAAIwR,GAAA54B,iBACJ,GAAIu4B,GAAA3jB,sBACJ,GAAIwjB,GAAAV,UACJyC,EACA,GAAIxB,GAAAjJ,UAAWC,2BAA2B,IAC1C,GAAIoI,GAAArvB,qBAENlK,YAAa,yBACbuF,UAAW,IACXyuB,2BACExhB,EAAAqB,YAAY6gB,YAAYM,SACxBxiB,EAAAqB,YAAY6gB,YAAYjyB,OACxB+P,EAAAqB,YAAY6gB,YAAYO,YAK9B,QAAgBqa,IAAc72C,EAAmB0E,OAAA,KAAAA,IAAAA,KAI/C,OAAO,IAAI+8B,GAAAQ,UAAUjiC,IACnBkiC,GAAIE,IACJC,UAAW,SAACC,GACV,MAAOA,GAAQC,UAAYD,EAAQE,cALV,KAKoDF,EAAQG,MAChFH,EAAQI,gBAGfR,GAAIS,IACJN,UAAW,SAACC,GACV,MAAOA,GAAQG,MAAQH,EAAQI,gBAGjCR,GAAIU,IACJP,UAAW,SAACC,GACV,OAAQA,EAAQG,OAASH,EAAQI,cAAgBJ,EAAQC,UACpDD,EAAQE,cAjBY,OAoB3BN,GAAIgV,IACJ7U,UAAW,SAACC,GACV,OAAQA,EAAQG,OAASH,EAAQI,gBAEjCh+B,GAGN,QAAgBqyC,IAAyB/2C,EAAmB0E,GAC1D,WAD0D,KAAAA,IAAAA,MACnD,GAAI+8B,GAAAQ,UAAUjiC,IACnBkiC,GAAIE,IACJC,UAAW,SAACC,GACV,MAAOA,GAAQG,MAAQH,EAAQI,gBAGjCR,GAAIU,IACJP,UAAW,SAACC,GACV,OAAQA,EAAQG,OAASH,EAAQI,gBAEjCh+B,GAGN,QAAgBuyC,IAA0Bj3C,EAAmB0E,GAC3D,WAD2D,KAAAA,IAAAA,MACpD,GAAI+8B,GAAAQ,UAAUjiC,EAAQs3C,IAAwB5yC,GAjVvCy9B,EAAAyU,eAAcA,EAIdzU,EAAA2U,0BAAyBA,EAIzB3U,EAAA6U,2BAA0BA,EA4F1B7U,EAAAQ,YAAWA,EAsCXR,EAAAS,oBAAmBA,EA0FnBT,EAAAC,uBAAsBA,EA+BtBD,EAAAmV,qBAAoBA,EAkCpBnV,EAAA0U,cAAaA,GA6Bb1U,EAAA4U,yBAAwBA,GAcxB5U,EAAA8U,0BAAyBA,IAlV1Br5C,EAAAukC,YAAAvkC,EAAAukC,wsEChDjB,IAAA31B,GAAAzN,EAAA,4BACAwL,EAAAxL,EAAA,SAEA6J,EAAA7J,EAAA,0BAEAyL,EAAAzL,EAAA,qBACA0yC,EAAA1yC,EAAA,aACAsR,EAAAtR,EAAA,gBACA4yC,EAAA5yC,EAAA,kBAGAw4C,EAAAx4C,EAAA,sBACAe,EAAAf,EAAA,uBA4EAkjC,EAAA,WAmCE,QAAAA,GAAYjiC,EAAmBw3C,EAAiDn/B,GAAhF,GAAAlY,GAAA/B,IACE,QAD8E,KAAAia,IAAAA,MAzBxEja,KAAAwE,QACN60C,mBAAoB,GAAIjtC,GAAAE,iBAyBpB8sC,YAAgChrC,GAAAc,YAAa,CAE/C,GAAIoqC,GAAwBF,EACxBG,IAGJA,GAAWjnC,MAAOwxB,GAAIwV,IAEtBt5C,KAAKu5C,WAAaA,MAIlBv5C,MAAKu5C,WAA0BH,CAGjCp5C,MAAK4B,OAASA,EACd5B,KAAKw5C,qBAAuB,GAAIC,GAAc73C,GAG9CqY,EAASG,SAAWH,EAASG,SAAWH,EAASG,YAEjDpa,KAAKsG,OAAMuoC,GACTze,+BAA+B,EAC/BspB,sBAAsB,GACnBz/B,GACHzV,QACEC,UAAW,GAAI2H,GAAAE,iBAEjBw0B,iBAAkB,GAAIqY,GAAAQ,iBAAiB35C,KAAKw5C,qBAAqBI,cAOnE,IAAMC,GAAe,WACnB,GAAMC,GAAqBl4C,EAAOoU,eAClCjU,GAAKuE,OAAO8T,SAAWq7B,KAAKG,MAAMH,KAAKC,UAAUz7B,EAASG,cAG1D,IAAM2/B,IACJ3/B,UAEEC,MAAOy/B,EAAmBz/B,MAC1BE,YAAau/B,EAAmBv/B,YAChCyK,QAAU80B,EAA2B90B,SAEvCjF,gBAAkB+5B,EAA2B/5B,gBAM/Che,GAAKuE,OAAO8T,SAASC,MAAQ0/B,EAAqB3/B,SAASC,OAASJ,EAASG,SAASC,MACtFtY,EAAKuE,OAAO8T,SAASG,YAAcw/B,EAAqB3/B,SAASG,aAAeN,EAASG,SAASG,YAClGxY,EAAKuE,OAAO8T,SAAS4K,QAAU+0B,EAAqB3/B,SAAS4K,SAAW/K,EAASG,SAAS4K,YAC1FjjB,EAAKuE,OAAOyZ,gBAAkBg6B,EAAqBh6B,iBAAmB9F,EAAS8F,oBAGjF85B,KAGA75C,KAAKw5C,qBAAqBI,YAAY51C,GAAGhE,KAAK4B,OAAOpC,QAAQyE,YAAY6P,aAAc,WACrF+lC,IACA93C,EAAKuE,OAAO9B,OAAOC,UAAU0I,SAASpL,KAGpCkY,EAASgX,UAIXjxB,KAAKg6C,oBAAqB//B,EAASgX,UAAqBiU,YACtD,GAAI/4B,GAAAM,IAAIwN,EAASgX,YAEnBjxB,KAAKg6C,mBAAqB,GAAI7tC,GAAAM,IAAI7K,EAAOk9B,gBAK3C9+B,KAAKi6C,qBAEL,KAAsB,GADlBC,MACkBxwC,EAAA,EAAAgJ,EAAA1S,KAAKu5C,WAAL7vC,EAAAgJ,EAAAzR,OAAAyI,IAAiB,CAAlC,GAAIywC,GAASznC,EAAAhJ,EACW,OAAvBywC,EAAUlW,WAEZiW,EAA2B5nC,KAAK6nC,GAGlCn6C,KAAKi6C,mBAAmB3nC,KAAK,GAAI8nC,GAA0Bx4C,EAAQu4C,EAAUrW,GAAI9jC,KAAKsG,SAKxF,GAAI4zC,EAA2Bj5C,OAAS,EACtC,KAAMJ,OAAM,6EAKd,IAAIq5C,EAA2Bj5C,OAAS,GACnCi5C,EAA2B,KAAOl6C,KAAKu5C,WAAWv5C,KAAKu5C,WAAWt4C,OAAS,GAC9E,KAAMJ,OAAM,8FAGd,IAAIw5C,GAA0B,KAG1BC,EAAmB,SAACr4C,GAKtB,GAAa,MAATA,EACF,OAAQA,EAAMyK,MAQZ,IAAK9K,GAAOpC,QAAQyE,YAAYsB,UAC9B80C,EAAiBp4C,CACjB,MAKF,KAAKL,GAAOpC,QAAQyE,YAAY+wC,gBAC9BqF,EAAiB,KASjBt4C,EAAKuE,OAAO9B,OAAOC,UAAU0I,SAASpL,EACtC,MAEF,KAAKH,GAAOpC,QAAQyE,YAAY6P,aAChC,IAAKlS,GAAOpC,QAAQyE,YAAYE,eAC9Bk2C,EAAiB,KAMvB,GAAIhW,GAAyB,MAAlBgW,EACP/V,GAAe,CACnB,IAAID,EAAM,CACR,GAAI7+B,GAAK60C,EAAe70C,EAExB,IAAIA,EAAG+0C,SAAU,CACf,GAAIC,GAAWh1C,CACf8+B,GAAekW,EAASxzC,UAAYwzC,EAASxzC,SAASyzC,aAAc,GAIxE14C,EAAKu4C,kBACHjW,KAAMA,EACNC,aAAcA,GACb,SAACJ,GAGEA,EAAQG,MAQVtiC,EAAK24C,UAAUC,mBAAmBC,cAAc74C,EAAKH,OAAOpC,QAAQyE,YAAYsB,UAAW80C,KAM7Fr6C,MAAKsG,OAAOozC,uBACd15C,KAAKw5C,qBAAqBI,YAAY51C,GAAGhE,KAAK4B,OAAOpC,QAAQyE,YAAY6P,aAAcwmC,GACvFt6C,KAAKw5C,qBAAqBI,YAAY51C,GAAGhE,KAAK4B,OAAOpC,QAAQyE,YAAYE,eAAgBm2C,GACzFt6C,KAAKw5C,qBAAqBI,YAAY51C,GAAGhE,KAAK4B,OAAOpC,QAAQyE,YAAYyH,KAAM4uC,GAC/Et6C,KAAKw5C,qBAAqBI,YAAY51C,GAAGhE,KAAK4B,OAAOpC,QAAQyE,YAAY2H,OAAQ0uC,GACjFt6C,KAAKw5C,qBAAqBI,YAAY51C,GAAGhE,KAAK4B,OAAOpC,QAAQyE,YAAYsB,UAAW+0C,GACpFt6C,KAAKw5C,qBAAqBI,YAAY51C,GAAGhE,KAAK4B,OAAOpC,QAAQyE,YAAY+wC,gBAAiBsF,GAC1Ft6C,KAAKw5C,qBAAqBI,YAAY51C,GAAGhE,KAAK4B,OAAOpC,QAAQyE,YAAY8f,cAAeu2B,GACxFt6C,KAAKw5C,qBAAqBI,YAAY51C,GAAGhE,KAAK4B,OAAOpC,QAAQyE,YAAYoQ,gBAAiBimC,IAI5FA,EAAiB,MAqMrB,MA9LSzW,GAAAgX,SAAP,SAAoEx3C,GAClE,MAAO3B,GAAAc,KAAKC,aAAaY,IAOpBwgC,EAAAiX,sBAAP,SAA6BC,GAC3Br5C,EAAAc,KAAKmsC,UAAUoM,IAGjBlX,EAAAngC,UAAAa,UAAA,WACE,MAAOvE,MAAKsG,QAOdu9B,EAAAngC,UAAAs3C,cAAA,WACE,MAAOh7C,MAAKu5C,YAQd1V,EAAAngC,UAAAu3C,kBAAA,SAAkBd,EAAsBtqC,GACtC,GAAIqrC,GAAiBl7C,KAAKu5C,WAAW/3C,QAAQ24C,GAEvCgB,EAAoCn7C,KAAKi6C,mBAAmBiB,GAC9DE,GAAmB,CAGnBD,KAAWn7C,KAAK06C,YAClBU,GAAmB,GAMjBA,IAEEp7C,KAAK06C,WACP16C,KAAK06C,UAAUW,QAAQpzC,OAIzBjI,KAAK06C,UAAYS,EAIK,MAAlBn7C,KAAK06C,YAEF16C,KAAK06C,UAAUY,gBAClBt7C,KAAKu7C,MAAMv7C,KAAK06C,WAGd7qC,GACFA,IAGF7P,KAAK06C,UAAUW,QAAQzzC,UAa7Bi8B,EAAAngC,UAAA42C,iBAAA,SAAiBpW,EAA2Cr0B,OAA3C,KAAAq0B,IAAAA,KAEf,IAAMsX,IACJnX,MAAM,EACNC,cAAc,EACdmX,aAAcz7C,KAAK4B,OAAOsS,gBAAkBlU,KAAK4B,OAAOpC,QAAQ2U,SAASC,WACzE+vB,SAAUoP,EAAA7uC,aAAay/B,SACvBn1B,UAAWhP,KAAK4B,OAAOoN,YACvB0O,MAAO1d,KAAKg6C,mBAAmBt8B,QAC/B0mB,cAAe7d,SAAS0gB,KAAKyU,aAIzBC,EAAgB9M,KAAQ2M,EAAmBtX,EAGjDlkC,MAAKwE,OAAO60C,mBAAmBlsC,SAASnN,KAAM27C,EAM9C,KAAsB,GAJlBC,GAA2B,KAITlyC,EAAA,EAAAgJ,EAAA1S,KAAKu5C,WAAL7vC,EAAAgJ,EAAAzR,OAAAyI,IAAiB,CAAlC,GAAIywC,GAASznC,EAAAhJ,EAChB,IAA2B,MAAvBywC,EAAUlW,YAA+D,IAA1CkW,EAAUlW,UAAU0X,GAA4B,CACjFC,EAAgBzB,CAChB,QAIJn6C,KAAKi7C,kBAAkBW,EAAe,WAChC/rC,GACFA,EAAO8rC,MAKL9X,EAAAngC,UAAA63C,MAAR,SAAczX,GACZ,GAAI+X,GAAM/X,EAAGuX,QAAQpuC,gBACjBrL,EAASkiC,EAAG6W,kBAEhB7W,GAAGgY,oBAIH97C,KAAKg6C,mBAAmBntC,OAAOgvC,GAG3Bj6C,EAAOoU,aACThW,KAAKsG,OAAO9B,OAAOC,UAAU0I,SAASnN,MAMpCH,OAAO0vB,sBACTA,sBAAsB,WAAQuU,EAAG9f,aAAa7W,SAAS22B,EAAGuX,WAG1DlmC,WAAW,WAAQ2uB,EAAG9f,aAAa7W,SAAS22B,EAAGuX,UAAa,IAIxDxX,EAAAngC,UAAAq4C,UAAR,SAAkBjY,GAChBA,EAAGkY,kBACHlY,EAAGuX,QAAQpuC,gBAAgB7L,SAC3B0iC,EAAGmY,sBAGLpY,EAAAngC,UAAAuL,QAAA,WACE,IAA8B,GAAAvF,GAAA,EAAAgJ,EAAA1S,KAAKi6C,mBAALvwC,EAAAgJ,EAAAzR,OAAAyI,IAAyB,CAAlD,GAAIwyC,GAAiBxpC,EAAAhJ,EACxB1J,MAAK+7C,UAAUG,GAEjBl8C,KAAKw5C,qBAAqByC,sBAS5Bt3C,OAAAC,eAAIi/B,EAAAngC,UAAA,0BAAJ,WACE,MAAO1D,MAAKwE,OAAO60C,oDAMrBxV,EAAAngC,UAAAy4C,mBAAA,WACE,MAAOn8C,MAAKsG,OAAO8T,SAAS4K,SAM9B6e,EAAAngC,UAAA04C,kBAAA,SAAkBC,GAChBr8C,KAAKsG,OAAO8T,SAAS4K,QAAQ1S,KAAK+pC,GAClCr8C,KAAKsG,OAAO9B,OAAOC,UAAU0I,SAASnN,OAQxC6jC,EAAAngC,UAAA44C,qBAAA,SAAqBD,GACnB,MAAIpqC,GAAA9Q,WAAWC,OAAOpB,KAAKsG,OAAO8T,SAAS4K,QAASq3B,KAAoBA,IACtEr8C,KAAKsG,OAAO9B,OAAOC,UAAU0I,SAASnN,OAC/B,IAKb6jC,IAxaarkC,GAAAqkC,UAAAA,CAwbb,IAAAsP,GAAA,WAkBE,QAAAA,GAAYvxC,EAAmBkiC,EAAiBx9B,GAbxCtG,KAAAwE,QACNwf,aAAc,GAAI5X,GAAAE,gBAClB8S,OAAQ,GAAIhT,GAAAE,gBACZwU,cAAe,GAAI1U,GAAAE,gBACnB+S,SAAU,GAAIjT,GAAAE,gBACdkE,gBAAiB,GAAIpE,GAAAE,gBACrBmE,gBAAiB,GAAIrE,GAAAE,gBACrBsC,eAAgB,GAAIxC,GAAAE,gBACpBgxB,sBAAuB,GAAIlxB,GAAAE,gBAC3BkC,eAAgB,GAAIpC,GAAAE,gBACpB+Y,UAAW,GAAIjZ,GAAAE,iBAIftM,KAAKu8C,cAAgB,GAAI9C,GAAc73C,GACvC5B,KAAK8jC,GAAKA,EACV9jC,KAAKsG,OAASA,EAwGlB,MArGE6sC,GAAAzvC,UAAAa,UAAA,WACE,MAAOvE,MAAKsG,QAGd6sC,EAAAzvC,UAAA23C,MAAA,WACE,MAAOr7C,MAAK8jC,IAGdqP,EAAAzvC,UAAAk2C,UAAA,WACE,MAAO55C,MAAKu8C,cAAc3C,aAO5Bj1C,OAAAC,eAAIuuC,EAAAzvC,UAAA,oBAAJ,WACE,MAAO1D,MAAKwE,OAAOwf,8CAOrBrf,OAAAC,eAAIuuC,EAAAzvC,UAAA,cAAJ,WACE,MAAO1D,MAAKwE,OAAO4a,wCAOrBza,OAAAC,eAAIuuC,EAAAzvC,UAAA,qBAAJ,WACE,MAAO1D,MAAKwE,OAAOsc,+CAOrBnc,OAAAC,eAAIuuC,EAAAzvC,UAAA,gBAAJ,WACE,MAAO1D,MAAKwE,OAAO6a,0CAOrB1a,OAAAC,eAAIuuC,EAAAzvC,UAAA,uBAAJ,WACE,MAAO1D,MAAKwE,OAAOgM,iDAOrB7L,OAAAC,eAAIuuC,EAAAzvC,UAAA,uBAAJ,WACE,MAAO1D,MAAKwE,OAAOiM,iDAOrB9L,OAAAC,eAAIuuC,EAAAzvC,UAAA,sBAAJ,WACE,MAAO1D,MAAKwE,OAAOoK,gDAOrBjK,OAAAC,eAAIuuC,EAAAzvC,UAAA,6BAAJ,WACE,MAAO1D,MAAKwE,OAAO84B,uDAOrB34B,OAAAC,eAAIuuC,EAAAzvC,UAAA,sBAAJ,WACE,MAAO1D,MAAKwE,OAAOgK,gDAOrB7J,OAAAC,eAAIuuC,EAAAzvC,UAAA,iBAAJ,WACE,MAAO1D,MAAKwE,OAAO6gB,2CAGX8tB,EAAAzvC,UAAAu4C,mBAAV,WACEj8C,KAAKu8C,cAAcN,oBAEnB,IAAIz3C,GAAcxE,KAAKwE,MACvB,KAAK,GAAIg4C,KAASh4C,GAAQ,CAC0BA,EAAOg4C,GAC9C5P,mBAGjBuG,IA7Ha3zC,GAAA2zC,kBAAAA,CAmIb,IAAAiH,GAAA,SAAAj1C,GAAA,QAAAi1C,oDA4EA,MA5EwCh1C,GAAAg1C,EAAAj1C,GAKtCi1C,EAAA12C,UAAAi3C,iBAAA,WAIE,MAAsB36C,MAAK45C,aAG7BQ,EAAA12C,UAAAo4C,kBAAA,WACE97C,KAAKy8C,sBAAsBz8C,KAAKq7C,SAChCr7C,KAAK08C,YAAa,GAGpBtC,EAAA12C,UAAA43C,aAAA,WACE,MAAOt7C,MAAK08C,YAGNtC,EAAA12C,UAAA+4C,sBAAR,SAA8BpqC,GAA9B,GAAAtQ,GAAA/B,KACM28C,IAEJtJ,GAAAC,QAAQsJ,aAAavqC,EAAW,SAACA,GAM/B,IAAgC,GAAA3I,GAAA,EAAAmzC,EAAAF,EAAAjzC,EAAAmzC,EAAA57C,OAAAyI,IAAsB,CACpD,GAD0BmzC,EAAAnzC,KACE2I,EAQ1B,KALI5J,UACFA,QAAQ+b,MAAM,gCAAiCnS,GAI3CxR,MAAM,kCAAoCwR,EAAUyqC,YAAYrf,MAI1EprB,EAAUlD,aACVkD,EAAUhN,UAAUtD,EAAK63C,YAAa73C,GACtC46C,EAAqBrqC,KAAKD,MAI9B+nC,EAAA12C,UAAAs4C,gBAAA,WAEMh8C,KAAK08C,aACP18C,KAAKqlB,UAAUlY,SAASnN,KAAKq7C,SAC7Br7C,KAAK+8C,oBAAoB/8C,KAAKq7C,SAC9Br7C,KAAK08C,YAAa,GAEpB18C,KAAKg9C,UAAW,GAGlB5C,EAAA12C,UAAAu5C,WAAA,WACE,MAAOj9C,MAAKg9C,UAGN5C,EAAA12C,UAAAq5C,oBAAR,SAA4B1qC,GAG1B,GAFAA,EAAUpD,UAENoD,YAAqB7H,GAAA0B,UACvB,IAA2B,GAAAxC,GAAA,EAAAgJ,EAAAL,EAAUG,gBAAV9I,EAAAgJ,EAAAzR,OAAAyI,IAA2B,CAAjD,GAAIwzC,GAAcxqC,EAAAhJ,EACrB1J,MAAK+8C,oBAAoBG,KAK/B9C,EAAA12C,UAAAu4C,mBAAA,WACE92C,EAAAzB,UAAMu4C,mBAAkBj7C,KAAAhB,OAE5Bo6C,GA5EwCjH,GA8FxCsG,EAAA,WAOE,QAAAA,GAAY73C,GAAZ,GAAAG,GAAA/B,IAFQA,MAAAm9C,iBAGNn9C,KAAK4B,OAASA,CAId,IAAIw7C,KACJ,KAAK,GAAIC,KAAUz7C,GACjBw7C,EAAQ9qC,KAAK+qC,EAOf,KAAmB,GAHfC,MACAC,KAEe7zC,EAAA,EAAA8zC,EAAAJ,EAAA1zC,EAAA8zC,EAAAv8C,OAAAyI,IAAS,CAAvB,GAAI2zC,GAAMG,EAAA9zC,EACwB,mBAApB9H,GAAQy7C,GACvBC,EAAQhrC,KAAK+qC,GAEbE,EAAWjrC,KAAK+qC,GAQpB,IAAmB,GAHfI,MAGe/qC,EAAA,EAAAgrC,EAAAJ,EAAA5qC,EAAAgrC,EAAAz8C,OAAAyR,IAAO,CAArB,GAAIirC,GAAMD,EAAAhrC,aAANirC,GACPF,EAAQE,GAAU,WAEhB,MAAa/7C,GAAQ+7C,GAAQluB,MAAM7tB,EAAQmkC,aAHtC4X,GAQT,IAAqB,GAAAC,GAAA,EAAAC,EAAAN,EAAAK,EAAAC,EAAA58C,OAAA28C,IAAU,CAA1B,GAAI7mB,GAAQ8mB,EAAAD,aAAR7mB,GAGP,GAAM+mB,GAAqB,SAAEpuC,GAC3B,KAAOA,GAAQ,CACb,GAAMquC,GAAqBp5C,OAAOq5C,yBAAyBtuC,EAAQqnB,EACnE,IAAIgnB,EACF,MAAOA,EAGTruC,GAAS/K,OAAOs5C,eAAevuC,KAEhC9N,EAGCk8C,KAAuBA,EAAmB3vB,KAAO2vB,EAAmBI,KACtEv5C,OAAOC,eAAe64C,EAAS1mB,GAC7B5I,IAAK,WAAM,MAAA2vB,GAAmB3vB,IAAIntB,KAAKY,IACvCs8C,IAAK,SAACp6C,GAAe,MAAAg6C,GAAmBI,IAAIl9C,KAAKY,EAAQkC,MAK3D25C,EAAQ1mB,GAAkBn1B,EAAQm1B,IAvB7BA,GA4BT0mB,EAAQz5C,GAAK,SAACm6C,EAAwBlG,GASpC,MARAr2C,GAAOoC,GAAGm6C,EAAWlG,GAEhBl2C,EAAKo7C,cAAcgB,KACtBp8C,EAAKo7C,cAAcgB,OAGrBp8C,EAAKo7C,cAAcgB,GAAW7rC,KAAK2lC,GAE5BwF,GAITA,EAAQr2C,IAAM,SAAC+2C,EAAwBlG,GAOrC,MANAr2C,GAAOwF,IAAI+2C,EAAWlG,GAElBl2C,EAAKo7C,cAAcgB,IACrBlsC,EAAA9Q,WAAWC,OAAOW,EAAKo7C,cAAcgB,GAAYlG,GAG5CwF,GAGTA,EAAQ7C,cAAgB,SAAC34C,EAAoBoN,GAC3C,GAAItN,EAAKo7C,cAAcl7C,GAUrB,IAAqB,GARjBm8C,GAAmCz5C,OAAOkM,WAC5CwtC,UAAWnpC,KAAKD,MAChBvI,KAAMzK,EAENq8C,WAAW,GACVjvC,GAGkB3F,EAAA,EAAAgJ,EAAA3Q,EAAKo7C,cAAcl7C,GAAnByH,EAAAgJ,EAAAzR,OAAAyI,IAA2B,CAA3C,GAAIuuC,GAAQvlC,EAAAhJ,EACfuuC,GAASmG,KAKfp+C,KAAKy9C,QAAyBA,EAiClC,MA1BEhE,GAAA/1C,UAAAk2C,UAAA,WACE,MAAO55C,MAAKy9C,SAMdhE,EAAA/1C,UAAAu4C,mBAAA,WACE,IAGEj8C,KAAK4B,OAAOoU,YACZ,MAAOwO,GACHA,YAAiBxkB,MAAK4B,OAAOpC,QAAQilB,6BAGvCzkB,KAAKm9C,kBAIT,IAAK,GAAIgB,KAAan+C,MAAKm9C,cACzB,IAAqB,GAAAzzC,GAAA,EAAAgJ,EAAA1S,KAAKm9C,cAAcgB,GAAnBz0C,EAAAgJ,EAAAzR,OAAAyI,IAA+B,CAA/C,GAAIuuC,GAAQvlC,EAAAhJ,EACf1J,MAAK4B,OAAOwF,IAAI+2C,EAA0BlG,KAIlDwB,IA9Iaj6C,GAAAi6C,cAAAA,uRChvBb,IAAAjvC,GAAA7J,EAAA,2BAEA,SAAiB2yC,GAKf,QAAgBsJ,GAAavqC,EAAuCksC,GAClE,GAAIC,GAAsB,SAACnsC,EAAuCw0B,GAIhE,GAHA0X,EAAMlsC,EAAWw0B,GAGbx0B,YAAqB7H,GAAA0B,UACvB,IAA2B,GAAAxC,GAAA,EAAAgJ,EAAAL,EAAUG,gBAAV9I,EAAAgJ,EAAAzR,OAAAyI,IAA2B,CAAjD,GAAIwzC,GAAcxqC,EAAAhJ,EACrB80C,GAAoBtB,EAAgB7qC,IAM1CmsC,GAAoBnsC,GAbNihC,EAAAsJ,aAAYA,GALbp9C,EAAA8zC,UAAA9zC,EAAA8zC,8HCHjB,IAAAlnC,GAAAzL,EAAA,qBAWAg5C,EAAA,WAUE,QAAAA,GAA6B/3C,GAA7B,GAAAG,GAAA/B,IAA6BA,MAAA4B,OAAAA,EANZ5B,KAAAwE,QACfsyB,UAAW,GAAI1qB,GAAAE,iBAMftM,KAAKy+C,aAEL,IAAM/gB,GAAU,WACd37B,EAAKo3B,iBAGPv3B,GAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY6P,aAAc4pB,GACnD97B,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAYy6C,cAAehhB,GACpD97B,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY06C,MAAOjhB,GAC5C97B,EAAOoC,GAAGpC,EAAOpC,QAAQyE,YAAY26C,QAASlhB,GAoElD,MAjEEic,GAAAj2C,UAAAm7C,UAAA,SAAU5d,GACRjhC,KAAK4B,OAAOi9C,UAAU5d,EAAQ0Y,EAAiBtY,aAGjDsY,EAAAj2C,UAAAo7C,UAAA,WACE,MAAO9+C,MAAK4B,OAAOk9C,aAGrBnF,EAAAj2C,UAAAq7C,SAAA,SAAS/d,GACHA,EACFhhC,KAAK4B,OAAOo9C,KAAKrF,EAAiBtY,YAElCrhC,KAAK4B,OAAOq9C,OAAOtF,EAAiBtY,aAIxCsY,EAAAj2C,UAAA89B,YAAA,WACMxhC,KAAKk/C,WAAkC,IAArBl/C,KAAK8+C,YAGzB9+C,KAAKm/C,eAELn/C,KAAK++C,UAAS,IAIlBpF,EAAAj2C,UAAAw7C,QAAA,WACE,MAAOl/C,MAAK4B,OAAOs9C,WAMrBvF,EAAAj2C,UAAA+6C,YAAA,WACEz+C,KAAKo/C,aAAep/C,KAAK8+C,aAM3BnF,EAAAj2C,UAAAy7C,aAAA,WACEn/C,KAAK++C,SAA+B,IAAtB/+C,KAAKo/C,cACnBp/C,KAAK6+C,UAAU7+C,KAAKo/C,eAGtBzF,EAAAj2C,UAAAw9B,gBAAA,WACE,MAAO,IAAIme,GAAiBr/C,OAG9B25C,EAAAj2C,UAAAy1B,eAAA,WACE,GAAMmmB,GAAct/C,KAAKk/C,UACnBK,EAAev/C,KAAK8+C,YAEpBU,EAAUF,GAAgC,IAAjBC,EACzBE,EAAWH,EAAc,EAAIC,CAEnCv/C,MAAKwE,OAAOsyB,UAAU3pB,SAASnN,MAAQihC,OAAQwe,EAAUze,MAAOwe,KAMlE76C,OAAAC,eAAI+0C,EAAAj2C,UAAA,iBAAJ,WACE,MAAO1D,MAAKwE,OAAOsyB,UAAU1pB,4CApFPusC,EAAAtY,WAAa,sBAsFvCsY,IAxFan6C,GAAAm6C,iBAAAA,CA0Fb,IAAA0F,GAAA,WAEE,QAAAA,GAAoBK,GAAA1/C,KAAA0/C,WAAAA,EAGlBA,EAAWjB,cAwBf,MArBEY,GAAA37C,UAAAk9B,OAAA,SAAOK,GAELjhC,KAAK0/C,WAAWX,UAAS,GACzB/+C,KAAK0/C,WAAWb,UAAU5d,IAG5Boe,EAAA37C,UAAAy9B,OAAA,SAAOF,GACU,IAAXA,GAMFjhC,KAAK0/C,WAAWP,eAChBn/C,KAAK0/C,WAAWX,UAAS,KAEzB/+C,KAAK0/C,WAAWX,UAAS,GACzB/+C,KAAK0/C,WAAWb,UAAU5d,GAC1BjhC,KAAK0/C,WAAWjB,gBAGtBY,IA7Ba7/C,GAAA6/C,iBAAAA","file":"bitmovinplayer-ui.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","export namespace ArrayUtils {\n  /**\n   * Removes an item from an array.\n   * @param array the array that may contain the item to remove\n   * @param item the item to remove from the array\n   * @returns {any} the removed item or null if it wasn't part of the array\n   */\n  export function remove<T>(array: T[], item: T): T | null {\n    let index = array.indexOf(item);\n\n    if (index > -1) {\n      return array.splice(index, 1)[0];\n    } else {\n      return null;\n    }\n  }\n}\n","import { ListItem, ListSelector, ListSelectorConfig } from './components/listselector';\nimport { UIInstanceManager } from './uimanager';\nimport { AudioTrackEvent, PlayerAPI, AudioTrack } from 'bitmovin-player';\nimport { i18n } from './localization/i18n';\n\n/**\n * Helper class to handle all audio tracks related events\n *\n * This class listens to player events as well as the `ListSelector` event if selection changed\n */\nexport class AudioTrackSwitchHandler {\n\n  private player: PlayerAPI;\n  private listElement: ListSelector<ListSelectorConfig>;\n  private uimanager: UIInstanceManager;\n\n  constructor(player: PlayerAPI, element: ListSelector<ListSelectorConfig>, uimanager: UIInstanceManager) {\n    this.player = player;\n    this.listElement = element;\n    this.uimanager = uimanager;\n\n    this.bindSelectionEvent();\n    this.bindPlayerEvents();\n    this.refreshAudioTracks();\n    this.selectCurrentAudioTrack();\n  }\n\n  private bindSelectionEvent(): void {\n    this.listElement.onItemSelected.subscribe((_, value: string) => {\n      this.player.setAudio(value);\n    });\n  }\n\n  private bindPlayerEvents(): void {\n    // Update selection when selected track has changed\n    this.player.on(this.player.exports.PlayerEvent.AudioChanged, this.selectCurrentAudioTrack);\n    // Update tracks when source goes away\n    this.player.on(this.player.exports.PlayerEvent.SourceUnloaded, this.refreshAudioTracks);\n    // Update tracks when the period within a source changes\n    this.player.on(this.player.exports.PlayerEvent.PeriodSwitched, this.refreshAudioTracks);\n    // Update tracks when a track is added or removed\n    this.player.on(this.player.exports.PlayerEvent.AudioAdded, this.addAudioTrack);\n    this.player.on(this.player.exports.PlayerEvent.AudioRemoved, this.removeAudioTrack);\n    this.uimanager.getConfig().events.onUpdated.subscribe(this.refreshAudioTracks);\n  }\n\n  private addAudioTrack = (event: AudioTrackEvent) => {\n    const audioTrack = event.track;\n    if (!this.listElement.hasItem(audioTrack.id)) {\n      this.listElement.addItem(audioTrack.id, i18n.getLocalizer(audioTrack.label));\n    }\n  };\n\n  private removeAudioTrack = (event: AudioTrackEvent) => {\n    const audioTrack = event.track;\n    if (this.listElement.hasItem(audioTrack.id)) {\n      this.listElement.removeItem(audioTrack.id);\n    }\n  };\n\n  private selectCurrentAudioTrack = () => {\n    let currentAudioTrack = this.player.getAudio();\n\n    // HLS streams don't always provide this, so we have to check\n    if (currentAudioTrack) {\n      this.listElement.selectItem(currentAudioTrack.id);\n    }\n  };\n\n  private refreshAudioTracks = () => {\n    const audioTracks = this.player.getAvailableAudio();\n    const audioTrackToListItem = (audioTrack: AudioTrack): ListItem => {\n      return { key: audioTrack.id, label: audioTrack.label };\n    };\n\n    this.listElement.synchronizeItems(audioTracks.map(audioTrackToListItem));\n  };\n}\n","export class BrowserUtils {\n\n  // isMobile only needs to be evaluated once (it cannot change during a browser session)\n  // Mobile detection according to Mozilla recommendation: \"In summary, we recommend looking for the string “Mobi”\n  // anywhere in the User Agent to detect a mobile device.\"\n  // https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent\n  static get isMobile(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /Mobi/.test(navigator.userAgent);\n  }\n\n  static get isChrome(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /Chrome/.test(navigator.userAgent);\n  }\n\n  static get isAndroid(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /Android/.test(navigator.userAgent);\n  }\n\n  private static windowExists(): boolean {\n    return typeof window !== 'undefined';\n  }\n}\n","import { ClickOverlay } from './clickoverlay';\nimport { UIInstanceManager } from '../uimanager';\nimport { Ad, AdEvent, PlayerAPI } from 'bitmovin-player';\n\n/**\n * A simple click capture overlay for clickThroughUrls of ads.\n */\nexport class AdClickOverlay extends ClickOverlay {\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let clickThroughCallback: () => void = null;\n\n    player.on(player.exports.PlayerEvent.AdStarted, (event: AdEvent) => {\n      let ad = event.ad;\n      this.setUrl(ad.clickThroughUrl);\n      clickThroughCallback = ad.clickThroughUrlOpened;\n    });\n\n    // Clear click-through URL when ad has finished\n    let adFinishedHandler = () => {\n      this.setUrl(null);\n    };\n\n    player.on(player.exports.PlayerEvent.AdFinished, adFinishedHandler);\n    player.on(player.exports.PlayerEvent.AdSkipped, adFinishedHandler);\n    player.on(player.exports.PlayerEvent.AdError, adFinishedHandler);\n\n    this.onClick.subscribe(() => {\n      // Pause the ad when overlay is clicked\n      player.pause('ui-ad-click-overlay');\n\n      if (clickThroughCallback) {\n        clickThroughCallback();\n      }\n    });\n  }\n}\n","import {Label, LabelConfig} from './label';\nimport {UIInstanceManager} from '../uimanager';\nimport {StringUtils} from '../stringutils';\nimport { AdEvent, LinearAd, PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A label that displays a message about a running ad, optionally with a countdown.\n */\nexport class AdMessageLabel extends Label<LabelConfig> {\n\n  constructor(config: LabelConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-label-ad-message',\n      text: i18n.getLocalizer('ads.remainingTime') ,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let text = config.text;\n\n    let updateMessageHandler = () => {\n      this.setText(StringUtils.replaceAdMessagePlaceholders(i18n.performLocalization(text), null, player));\n    };\n\n    let adStartHandler = (event: AdEvent) => {\n      let uiConfig = (event.ad as LinearAd).uiConfig;\n      text = uiConfig && uiConfig.message || config.text;\n\n      updateMessageHandler();\n\n      player.on(player.exports.PlayerEvent.TimeChanged, updateMessageHandler);\n    };\n\n    let adEndHandler = () => {\n      player.off(player.exports.PlayerEvent.TimeChanged, updateMessageHandler);\n    };\n\n    player.on(player.exports.PlayerEvent.AdStarted, adStartHandler);\n    player.on(player.exports.PlayerEvent.AdSkipped, adEndHandler);\n    player.on(player.exports.PlayerEvent.AdError, adEndHandler);\n    player.on(player.exports.PlayerEvent.AdFinished, adEndHandler);\n  }\n}","import { ButtonConfig, Button } from './button';\nimport { UIInstanceManager } from '../uimanager';\nimport { StringUtils } from '../stringutils';\nimport { AdEvent, LinearAd, PlayerAPI } from 'bitmovin-player';\n\n/**\n * Configuration interface for the {@link AdSkipButton}.\n */\nexport interface AdSkipButtonConfig extends ButtonConfig {\n  /**\n   * Message which gets displayed during the countdown is active.\n   * Supported placeholders: look at {@link StringUtils.replaceAdMessagePlaceholders}\n   */\n  untilSkippableMessage?: string;\n  /**\n   * Message displayed when the ad is skippable.\n   * Supported placeholders: look at {@link StringUtils.replaceAdMessagePlaceholders}\n   */\n  skippableMessage?: string;\n}\n\n/**\n * A button that is displayed during ads and can be used to skip the ad.\n */\nexport class AdSkipButton extends Button<AdSkipButtonConfig> {\n\n  constructor(config: AdSkipButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, <AdSkipButtonConfig>{\n      cssClass: 'ui-button-ad-skip',\n      untilSkippableMessage: 'Skip ad in {remainingTime}',\n      skippableMessage: 'Skip ad',\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let untilSkippableMessage = config.untilSkippableMessage;\n    let skippableMessage = config.skippableMessage;\n    let skipOffset = -1;\n\n    let updateSkipMessageHandler = () => {\n      this.show();\n\n      // Update the skip message on the button\n      if (player.getCurrentTime() < skipOffset) {\n        this.setText(StringUtils.replaceAdMessagePlaceholders(untilSkippableMessage, skipOffset, player));\n        this.disable();\n      } else {\n        this.setText(skippableMessage);\n        this.enable();\n      }\n    };\n\n    let adStartHandler = (event: AdEvent) => {\n      let ad = event.ad as LinearAd;\n      skipOffset = ad.skippableAfter;\n      untilSkippableMessage = ad.uiConfig && ad.uiConfig.untilSkippableMessage || config.untilSkippableMessage;\n      skippableMessage = ad.uiConfig && ad.uiConfig.skippableMessage || config.skippableMessage;\n\n      // Display this button only if ad is skippable.\n      // Non-skippable ads will return -1 for skippableAfter for player version < v8.3.0.\n      if (typeof skipOffset === 'number' && skipOffset >= 0) {\n        updateSkipMessageHandler();\n        player.on(player.exports.PlayerEvent.TimeChanged, updateSkipMessageHandler);\n      } else {\n        this.hide();\n      }\n    };\n\n    let adEndHandler = () => {\n      player.off(player.exports.PlayerEvent.TimeChanged, updateSkipMessageHandler);\n    };\n\n    player.on(player.exports.PlayerEvent.AdStarted, adStartHandler);\n    player.on(player.exports.PlayerEvent.AdSkipped, adEndHandler);\n    player.on(player.exports.PlayerEvent.AdError, adEndHandler);\n    player.on(player.exports.PlayerEvent.AdFinished, adEndHandler);\n\n    this.onClick.subscribe(() => {\n      // Try to skip the ad (this only works if it is skippable so we don't need to take extra care of that here)\n      player.ads.skip();\n    });\n  }\n}","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles Apple AirPlay.\n */\nexport class AirPlayToggleButton extends ToggleButton<ToggleButtonConfig> {\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-airplaytogglebutton',\n      text: i18n.getLocalizer('appleAirplay'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    if (!player.isAirplayAvailable) {\n      // If the player does not support Airplay (player 7.0), we just hide this component and skip configuration\n      this.hide();\n      return;\n    }\n\n    this.onClick.subscribe(() => {\n      if (player.isAirplayAvailable()) {\n        player.showAirplayTargetPicker();\n      } else {\n        if (console) {\n          console.log('AirPlay unavailable');\n        }\n      }\n    });\n\n    const airPlayAvailableHandler = () => {\n      if (player.isAirplayAvailable()) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    };\n\n    const airPlayChangedHandler = () => {\n      if (player.isAirplayActive()) {\n        this.on();\n      } else {\n        this.off();\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.AirplayAvailable, airPlayAvailableHandler);\n    player.on(player.exports.PlayerEvent.AirplayChanged, airPlayChangedHandler);\n\n    // Startup init\n    airPlayAvailableHandler(); // Hide button if AirPlay is not available\n    airPlayChangedHandler();\n  }\n}","import {SelectBox} from './selectbox';\nimport {ListSelectorConfig} from './listselector';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A select box providing a selection between 'auto' and the available audio qualities.\n */\nexport class AudioQualitySelectBox extends SelectBox {\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-audioqualityselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let selectCurrentAudioQuality = () => {\n      this.selectItem(player.getAudioQuality().id);\n    };\n\n    let updateAudioQualities = () => {\n      let audioQualities = player.getAvailableAudioQualities();\n\n      this.clearItems();\n\n      // Add entry for automatic quality switching (default setting)\n      this.addItem('auto', i18n.getLocalizer('auto'));\n\n      // Add audio qualities\n      for (let audioQuality of audioQualities) {\n        this.addItem(audioQuality.id, audioQuality.label);\n      }\n\n      // Select initial quality\n      selectCurrentAudioQuality();\n    };\n\n    this.onItemSelected.subscribe((sender: AudioQualitySelectBox, value: string) => {\n      player.setAudioQuality(value);\n    });\n\n    // Update qualities when audio track has changed\n    player.on(player.exports.PlayerEvent.AudioChanged, updateAudioQualities);\n    // Update qualities when source goes away\n    player.on(player.exports.PlayerEvent.SourceUnloaded, updateAudioQualities);\n    // Update qualities when the period within a source changes\n    player.on(player.exports.PlayerEvent.PeriodSwitched, updateAudioQualities);\n    // Update quality selection when quality is changed (from outside)\n    player.on(player.exports.PlayerEvent.AudioQualityChanged, selectCurrentAudioQuality);\n    if ((player.exports.PlayerEvent as any).AudioQualityAdded) {\n      // Update qualities when their availability changed\n      // TODO: remove any cast after next player release\n      player.on((player.exports.PlayerEvent as any).AudioQualityAdded, updateAudioQualities);\n      player.on((player.exports.PlayerEvent as any).AudioQualityRemoved, updateAudioQualities);\n    }\n\n    uimanager.getConfig().events.onUpdated.subscribe(updateAudioQualities);\n  }\n}","import {ListBox} from './listbox';\nimport {UIInstanceManager} from '../uimanager';\nimport {AudioTrackSwitchHandler} from '../audiotrackutils';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * A element that is similar to a select box where the user can select a subtitle\n */\nexport class AudioTrackListBox extends ListBox {\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n    new AudioTrackSwitchHandler(player, this, uimanager);\n  }\n}\n","import {SelectBox} from './selectbox';\nimport {ListSelectorConfig} from './listselector';\nimport {UIInstanceManager} from '../uimanager';\nimport {AudioTrackSwitchHandler} from '../audiotrackutils';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * A select box providing a selection between available audio tracks (e.g. different languages).\n */\nexport class AudioTrackSelectBox extends SelectBox {\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-audiotrackselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    new AudioTrackSwitchHandler(player, this, uimanager);\n  }\n}","import {ContainerConfig, Container} from './container';\nimport {UIInstanceManager} from '../uimanager';\nimport {Component, ComponentConfig} from './component';\nimport {Timeout} from '../timeout';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * Configuration interface for the {@link BufferingOverlay} component.\n */\nexport interface BufferingOverlayConfig extends ContainerConfig {\n  /**\n   * Delay in milliseconds after which the buffering overlay will be displayed. Useful to bypass short stalls without\n   * displaying the overlay. Set to 0 to display the overlay instantly.\n   * Default: 1000ms (1 second)\n   */\n  showDelayMs?: number;\n}\n\n/**\n * Overlays the player and displays a buffering indicator.\n */\nexport class BufferingOverlay extends Container<BufferingOverlayConfig> {\n\n  private indicators: Component<ComponentConfig>[];\n\n  constructor(config: BufferingOverlayConfig = {}) {\n    super(config);\n\n    this.indicators = [\n      new Component<ComponentConfig>({ tag: 'div', cssClass: 'ui-buffering-overlay-indicator' }),\n      new Component<ComponentConfig>({ tag: 'div', cssClass: 'ui-buffering-overlay-indicator' }),\n      new Component<ComponentConfig>({ tag: 'div', cssClass: 'ui-buffering-overlay-indicator' }),\n    ];\n\n    this.config = this.mergeConfig(config, <BufferingOverlayConfig>{\n      cssClass: 'ui-buffering-overlay',\n      hidden: true,\n      components: this.indicators,\n      showDelayMs: 1000,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n\n    let overlayShowTimeout = new Timeout(config.showDelayMs, () => {\n      this.show();\n    });\n\n    let showOverlay = () => {\n      overlayShowTimeout.start();\n    };\n\n    let hideOverlay = () => {\n      overlayShowTimeout.clear();\n      this.hide();\n    };\n\n    player.on(player.exports.PlayerEvent.StallStarted, showOverlay);\n    player.on(player.exports.PlayerEvent.StallEnded, hideOverlay);\n    player.on(player.exports.PlayerEvent.Play, showOverlay);\n    player.on(player.exports.PlayerEvent.Playing, hideOverlay);\n    player.on(player.exports.PlayerEvent.Paused, hideOverlay);\n    player.on(player.exports.PlayerEvent.Seek, showOverlay);\n    player.on(player.exports.PlayerEvent.Seeked, hideOverlay);\n    player.on(player.exports.PlayerEvent.TimeShift, showOverlay);\n    player.on(player.exports.PlayerEvent.TimeShifted, hideOverlay);\n    player.on(player.exports.PlayerEvent.SourceUnloaded, hideOverlay);\n\n    // Show overlay if player is already stalled at init\n    if (player.isStalled()) {\n      this.show();\n    }\n  }\n}\n","import {ComponentConfig, Component} from './component';\nimport {DOM} from '../dom';\nimport {EventDispatcher, NoArgs, Event} from '../eventdispatcher';\nimport { LocalizableText , i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for a {@link Button} component.\n */\nexport interface ButtonConfig extends ComponentConfig {\n  /**\n   * The text as string or localize callback on the button.\n   */\n  text?: LocalizableText;\n}\n\n/**\n * A simple clickable button.\n */\nexport class Button<Config extends ButtonConfig> extends Component<Config> {\n\n  private buttonEvents = {\n    onClick: new EventDispatcher<Button<Config>, NoArgs>(),\n  };\n\n  constructor(config: Config) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-button',\n    } as Config, this.config);\n  }\n\n  protected toDomElement(): DOM {\n    // Create the button element with the text label\n    let buttonElement = new DOM('button', {\n      'type': 'button',\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n    }).append(new DOM('span', {\n      'class': this.prefixCss('label'),\n    }).html(i18n.performLocalization(this.config.text)));\n\n    // Listen for the click event on the button element and trigger the corresponding event on the button component\n    buttonElement.on('click', () => {\n      this.onClickEvent();\n    });\n\n    return buttonElement;\n  }\n\n  /**\n   * Sets text on the label of the button.\n   * @param text the text to put into the label of the button\n   */\n  setText(text: LocalizableText): void {\n    this.getDomElement().find('.' + this.prefixCss('label')).html(i18n.performLocalization(text));\n  }\n\n  protected onClickEvent() {\n    this.buttonEvents.onClick.dispatch(this);\n  }\n\n  /**\n   * Gets the event that is fired when the button is clicked.\n   * @returns {Event<Button<Config>, NoArgs>}\n   */\n  get onClick(): Event<Button<Config>, NoArgs> {\n    return this.buttonEvents.onClick.getEvent();\n  }\n}","import {ContainerConfig, Container} from './container';\nimport {Label, LabelConfig} from './label';\nimport {UIInstanceManager} from '../uimanager';\nimport { CastStartedEvent, CastWaitingForDeviceEvent, PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Overlays the player and displays the status of a Cast session.\n */\nexport class CastStatusOverlay extends Container<ContainerConfig> {\n\n  private statusLabel: Label<LabelConfig>;\n\n  constructor(config: ContainerConfig = {}) {\n    super(config);\n\n    this.statusLabel = new Label<LabelConfig>({ cssClass: 'ui-cast-status-label' });\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-cast-status-overlay',\n      components: [this.statusLabel],\n      hidden: true,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    player.on(player.exports.PlayerEvent.CastWaitingForDevice,\n      (event: CastWaitingForDeviceEvent) => {\n        this.show();\n        // Get device name and update status text while connecting\n        let castDeviceName = event.castPayload.deviceName;\n        this.statusLabel.setText(i18n.getLocalizer('connectingTo', { castDeviceName }));\n      });\n    player.on(player.exports.PlayerEvent.CastStarted, (event: CastStartedEvent) => {\n      // Session is started or resumed\n      // For cases when a session is resumed, we do not receive the previous events and therefore show the status panel\n      // here too\n      this.show();\n      let castDeviceName = event.deviceName;\n      this.statusLabel.setText(i18n.getLocalizer('playingOn', { castDeviceName }));\n    });\n    player.on(player.exports.PlayerEvent.CastStopped, (event) => {\n      // Cast session gone, hide the status panel\n      this.hide();\n    });\n  }\n}","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles casting to a Cast receiver.\n */\nexport class CastToggleButton extends ToggleButton<ToggleButtonConfig> {\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-casttogglebutton',\n      text: i18n.getLocalizer('googleCast'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onClick.subscribe(() => {\n      if (player.isCastAvailable()) {\n        if (player.isCasting()) {\n          player.castStop();\n        } else {\n          player.castVideo();\n        }\n      } else {\n        if (console) {\n          console.log('Cast unavailable');\n        }\n      }\n    });\n\n    let castAvailableHander = () => {\n      if (player.isCastAvailable()) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.CastAvailable, castAvailableHander);\n\n    // Toggle button 'on' state\n    player.on(player.exports.PlayerEvent.CastWaitingForDevice, () => {\n      this.on();\n    });\n    player.on(player.exports.PlayerEvent.CastStarted, () => {\n      // When a session is resumed, there is no CastStart event, so we also need to toggle here for such cases\n      this.on();\n    });\n    player.on(player.exports.PlayerEvent.CastStopped, () => {\n      this.off();\n    });\n\n    // Startup init\n    castAvailableHander(); // Hide button if Cast not available\n    if (player.isCasting()) {\n      this.on();\n    }\n  }\n}","import {UIContainer, UIContainerConfig} from './uicontainer';\nimport {UIInstanceManager} from '../uimanager';\nimport {Timeout} from '../timeout';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * The base container for Cast receivers that contains all of the UI and takes care that the UI is shown on\n * certain playback events.\n */\nexport class CastUIContainer extends UIContainer {\n\n  private castUiHideTimeout: Timeout;\n\n  constructor(config: UIContainerConfig) {\n    super(config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n\n    /*\n     * Show UI on Cast devices at certain playback events\n     *\n     * Since a Cast receiver does not have a direct HCI, we show the UI on certain playback events to give the user\n     * a chance to see on the screen what's going on, e.g. on play/pause or a seek the UI is shown and the user can\n     * see the current time and position on the seek bar.\n     * The UI is shown permanently while playback is paused, otherwise hides automatically after the configured\n     * hide delay time.\n     */\n\n    let isUiShown = false;\n\n    let hideUi = () => {\n      uimanager.onControlsHide.dispatch(this);\n      isUiShown = false;\n    };\n\n    this.castUiHideTimeout = new Timeout(config.hideDelay, hideUi);\n\n    let showUi = () => {\n      if (!isUiShown) {\n        uimanager.onControlsShow.dispatch(this);\n        isUiShown = true;\n      }\n    };\n\n    let showUiPermanently = () => {\n      showUi();\n      this.castUiHideTimeout.clear();\n    };\n\n    let showUiWithTimeout = () => {\n      showUi();\n      this.castUiHideTimeout.start();\n    };\n\n    let showUiAfterSeek = () => {\n      if (player.isPlaying()) {\n        showUiWithTimeout();\n      } else {\n        showUiPermanently();\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.Play, showUiWithTimeout);\n    player.on(player.exports.PlayerEvent.Paused, showUiPermanently);\n    player.on(player.exports.PlayerEvent.Seek, showUiPermanently);\n    player.on(player.exports.PlayerEvent.Seeked, showUiAfterSeek);\n\n    uimanager.getConfig().events.onUpdated.subscribe(showUiWithTimeout);\n  }\n\n  release(): void {\n    super.release();\n    this.castUiHideTimeout.clear();\n  }\n}","import {Button, ButtonConfig} from './button';\n\n/**\n * Configuration interface for a {@link ClickOverlay}.\n */\nexport interface ClickOverlayConfig extends ButtonConfig {\n  /**\n   * The url to open when the overlay is clicked. Set to null to disable the click handler.\n   */\n  url?: string;\n}\n\n/**\n * A click overlay that opens an url in a new tab if clicked.\n */\nexport class ClickOverlay extends Button<ClickOverlayConfig> {\n\n  constructor(config: ClickOverlayConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-clickoverlay',\n    }, <ClickOverlayConfig>this.config);\n  }\n\n  initialize(): void {\n    super.initialize();\n\n    this.setUrl((<ClickOverlayConfig>this.config).url);\n    let element = this.getDomElement();\n    element.on('click', () => {\n      if (element.data('url')) {\n        window.open(element.data('url'), '_blank');\n      }\n    });\n  }\n\n  /**\n   * Gets the URL that should be followed when the watermark is clicked.\n   * @returns {string} the watermark URL\n   */\n  getUrl(): string {\n    return this.getDomElement().data('url');\n  }\n\n  setUrl(url: string): void {\n    if (url === undefined || url == null) {\n      url = '';\n    }\n    this.getDomElement().data('url', url);\n  }\n}","import {ButtonConfig, Button} from './button';\nimport {UIInstanceManager} from '../uimanager';\nimport {Component, ComponentConfig} from './component';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * Configuration interface for the {@link CloseButton}.\n */\nexport interface CloseButtonConfig extends ButtonConfig {\n  /**\n   * The component that should be closed when the button is clicked.\n   */\n  target: Component<ComponentConfig>;\n}\n\n/**\n * A button that closes (hides) a configured component.\n */\nexport class CloseButton extends Button<CloseButtonConfig> {\n\n  constructor(config: CloseButtonConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-closebutton',\n      text: 'Close',\n    } as CloseButtonConfig, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n\n    this.onClick.subscribe(() => {\n      config.target.hide();\n    });\n  }\n}","import {Guid} from '../guid';\nimport {DOM} from '../dom';\nimport {EventDispatcher, NoArgs, Event} from '../eventdispatcher';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * Base configuration interface for a component.\n * Should be extended by components that want to add additional configuration options.\n */\nexport interface ComponentConfig {\n  /**\n   * The HTML tag name of the component.\n   * Default: 'div'\n   */\n  tag?: string;\n  /**\n   * The HTML ID of the component.\n   * Default: automatically generated with pattern 'ui-id-{guid}'.\n   */\n  id?: string;\n\n  /**\n   * A prefix to prepend all CSS classes with.\n   */\n  cssPrefix?: string;\n\n  /**\n   * The CSS classes of the component. This is usually the class from where the component takes its styling.\n   */\n  cssClass?: string; // 'class' is a reserved keyword, so we need to make the name more complicated\n\n  /**\n   * Additional CSS classes of the component.\n   */\n  cssClasses?: string[];\n\n  /**\n   * Specifies if the component should be hidden at startup.\n   * Default: false\n   */\n  hidden?: boolean;\n\n  /**\n   * Specifies if the component is enabled (interactive) or not.\n   * Default: false\n   */\n  disabled?: boolean;\n}\n\nexport interface ComponentHoverChangedEventArgs extends NoArgs {\n  /**\n   * True is the component is hovered, else false.\n   */\n  hovered: boolean;\n}\n\n/**\n * The base class of the UI framework.\n * Each component must extend this class and optionally the config interface.\n */\nexport class Component<Config extends ComponentConfig> {\n\n  /**\n   * The classname that is attached to the element when it is in the hidden state.\n   * @type {string}\n   */\n  private static readonly CLASS_HIDDEN = 'hidden';\n\n  /**\n   * The classname that is attached to the element when it is in the disabled state.\n   * @type {string}\n   */\n  private static readonly CLASS_DISABLED = 'disabled';\n\n  /**\n   * Configuration object of this component.\n   */\n  protected config: Config;\n\n  /**\n   * The component's DOM element.\n   */\n  private element: DOM;\n\n  /**\n   * Flag that keeps track of the hidden state.\n   */\n  private hidden: boolean;\n\n  /**\n   * Flat that keeps track of the disabled state.\n   */\n  private disabled: boolean;\n\n  /**\n   * Flag that keeps track of the hover state.\n   */\n  private hovered: boolean;\n\n  /**\n   * The list of events that this component offers. These events should always be private and only directly\n   * accessed from within the implementing component.\n   *\n   * Because TypeScript does not support private properties with the same name on different class hierarchy levels\n   * (i.e. superclass and subclass cannot contain a private property with the same name), the default naming\n   * convention for the event list of a component that should be followed by subclasses is the concatenation of the\n   * camel-cased class name + 'Events' (e.g. SubClass extends Component => subClassEvents).\n   * See {@link #componentEvents} for an example.\n   *\n   * Event properties should be named in camel case with an 'on' prefix and in the present tense. Async events may\n   * have a start event (when the operation starts) in the present tense, and must have an end event (when the\n   * operation ends) in the past tense (or present tense in special cases (e.g. onStart/onStarted or onPlay/onPlaying).\n   * See {@link #componentEvents#onShow} for an example.\n   *\n   * Each event should be accompanied with a protected method named by the convention eventName + 'Event'\n   * (e.g. onStartEvent), that actually triggers the event by calling {@link EventDispatcher#dispatch dispatch} and\n   * passing a reference to the component as first parameter. Components should always trigger their events with these\n   * methods. Implementing this pattern gives subclasses means to directly listen to the events by overriding the\n   * method (and saving the overhead of passing a handler to the event dispatcher) and more importantly to trigger\n   * these events without having access to the private event list.\n   * See {@link #onShow} for an example.\n   *\n   * To provide external code the possibility to listen to this component's events (subscribe, unsubscribe, etc.),\n   * each event should also be accompanied by a public getter function with the same name as the event's property,\n   * that returns the {@link Event} obtained from the event dispatcher by calling {@link EventDispatcher#getEvent}.\n   * See {@link #onShow} for an example.\n   *\n   * Full example for an event representing an example action in a example component:\n   *\n   * <code>\n   * // Define an example component class with an example event\n   * class ExampleComponent extends Component<ComponentConfig> {\n     *\n     *     private exampleComponentEvents = {\n     *         onExampleAction: new EventDispatcher<ExampleComponent, NoArgs>()\n     *     }\n     *\n     *     // constructor and other stuff...\n     *\n     *     protected onExampleActionEvent() {\n     *        this.exampleComponentEvents.onExampleAction.dispatch(this);\n     *    }\n     *\n     *    get onExampleAction(): Event<ExampleComponent, NoArgs> {\n     *        return this.exampleComponentEvents.onExampleAction.getEvent();\n     *    }\n     * }\n   *\n   * // Create an instance of the component somewhere\n   * var exampleComponentInstance = new ExampleComponent();\n   *\n   * // Subscribe to the example event on the component\n   * exampleComponentInstance.onExampleAction.subscribe(function (sender: ExampleComponent) {\n     *     console.log('onExampleAction of ' + sender + ' has fired!');\n     * });\n   * </code>\n   */\n  private componentEvents = {\n    onShow: new EventDispatcher<Component<Config>, NoArgs>(),\n    onHide: new EventDispatcher<Component<Config>, NoArgs>(),\n    onHoverChanged: new EventDispatcher<Component<Config>, ComponentHoverChangedEventArgs>(),\n    onEnabled: new EventDispatcher<Component<Config>, NoArgs>(),\n    onDisabled: new EventDispatcher<Component<Config>, NoArgs>(),\n  };\n\n  /**\n   * Constructs a component with an optionally supplied config. All subclasses must call the constructor of their\n   * superclass and then merge their configuration into the component's configuration.\n   * @param config the configuration for the component\n   */\n  constructor(config: ComponentConfig = {}) {\n    // Create the configuration for this component\n    this.config = <Config>this.mergeConfig(config, {\n      tag: 'div',\n      id: '{{PREFIX}}-id-' + Guid.next(),\n      cssPrefix: '{{PREFIX}}',\n      cssClass: 'ui-component',\n      cssClasses: [],\n      hidden: false,\n      disabled: false,\n    }, {});\n  }\n\n  /**\n   * Initializes the component, e.g. by applying config settings.\n   * This method must not be called from outside the UI framework.\n   *\n   * This method is automatically called by the {@link UIInstanceManager}. If the component is an inner component of\n   * some component, and thus encapsulated abd managed internally and never directly exposed to the UIManager,\n   * this method must be called from the managing component's {@link #initialize} method.\n   */\n  initialize(): void {\n    this.hidden = this.config.hidden;\n    this.disabled = this.config.disabled;\n\n    // Hide the component at initialization if it is configured to be hidden\n    if (this.isHidden()) {\n      this.hidden = false; // Set flag to false for the following hide() call to work (hide() checks the flag)\n      this.hide();\n    }\n\n    // Disable the component at initialization if it is configured to be disabled\n    if (this.isDisabled()) {\n      this.disabled = false; // Set flag to false for the following disable() call to work (disable() checks the flag)\n      this.disable();\n    }\n  }\n\n  /**\n   * Configures the component for the supplied Player and UIInstanceManager. This is the place where all the magic\n   * happens, where components typically subscribe and react to events (on their DOM element, the Player, or the\n   * UIInstanceManager), and basically everything that makes them interactive.\n   * This method is called only once, when the UIManager initializes the UI.\n   *\n   * Subclasses usually overwrite this method to add their own functionality.\n   *\n   * @param player the player which this component controls\n   * @param uimanager the UIInstanceManager that manages this component\n   */\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    this.onShow.subscribe(() => {\n      uimanager.onComponentShow.dispatch(this);\n    });\n    this.onHide.subscribe(() => {\n      uimanager.onComponentHide.dispatch(this);\n    });\n\n    // Track the hovered state of the element\n    this.getDomElement().on('mouseenter', () => {\n      this.onHoverChangedEvent(true);\n    });\n    this.getDomElement().on('mouseleave', () => {\n      this.onHoverChangedEvent(false);\n    });\n  }\n\n  /**\n   * Releases all resources and dependencies that the component holds. Player, DOM, and UIManager events are\n   * automatically removed during release and do not explicitly need to be removed here.\n   * This method is called by the UIManager when it releases the UI.\n   *\n   * Subclasses that need to release resources should override this method and call super.release().\n   */\n  release(): void {\n    // Nothing to do here, override where necessary\n  }\n\n  /**\n   * Generate the DOM element for this component.\n   *\n   * Subclasses usually overwrite this method to extend or replace the DOM element with their own design.\n   */\n  protected toDomElement(): DOM {\n    let element = new DOM(this.config.tag, {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n    });\n\n    return element;\n  }\n\n  /**\n   * Returns the DOM element of this component. Creates the DOM element if it does not yet exist.\n   *\n   * Should not be overwritten by subclasses.\n   *\n   * @returns {DOM}\n   */\n  getDomElement(): DOM {\n    if (!this.element) {\n      this.element = this.toDomElement();\n    }\n\n    return this.element;\n  }\n\n  /**\n   * Merges a configuration with a default configuration and a base configuration from the superclass.\n   *\n   * @param config the configuration settings for the components, as usually passed to the constructor\n   * @param defaults a default configuration for settings that are not passed with the configuration\n   * @param base configuration inherited from a superclass\n   * @returns {Config}\n   */\n  protected mergeConfig<Config>(config: Config, defaults: Config, base: Config): Config {\n    // Extend default config with supplied config\n    let merged = Object.assign({}, base, defaults, config);\n\n    // Return the extended config\n    return merged;\n  }\n\n  /**\n   * Helper method that returns a string of all CSS classes of the component.\n   *\n   * @returns {string}\n   */\n  protected getCssClasses(): string {\n    // Merge all CSS classes into single array\n    let flattenedArray = [this.config.cssClass].concat(this.config.cssClasses);\n    // Prefix classes\n    flattenedArray = flattenedArray.map((css) => {\n      return this.prefixCss(css);\n    });\n    // Join array values into a string\n    let flattenedString = flattenedArray.join(' ');\n    // Return trimmed string to prevent whitespace at the end from the join operation\n    return flattenedString.trim();\n  }\n\n  protected prefixCss(cssClassOrId: string): string {\n    return this.config.cssPrefix + '-' + cssClassOrId;\n  }\n\n  /**\n   * Returns the configuration object of the component.\n   * @returns {Config}\n   */\n  public getConfig(): Config {\n    return this.config;\n  }\n\n  /**\n   * Hides the component if shown.\n   * This method basically transfers the component into the hidden state. Actual hiding is done via CSS.\n   */\n  hide() {\n    if (!this.hidden) {\n      this.hidden = true;\n      this.getDomElement().addClass(this.prefixCss(Component.CLASS_HIDDEN));\n      this.onHideEvent();\n    }\n  }\n\n  /**\n   * Shows the component if hidden.\n   */\n  show() {\n    if (this.hidden) {\n      this.getDomElement().removeClass(this.prefixCss(Component.CLASS_HIDDEN));\n      this.hidden = false;\n      this.onShowEvent();\n    }\n  }\n\n  /**\n   * Determines if the component is hidden.\n   * @returns {boolean} true if the component is hidden, else false\n   */\n  isHidden(): boolean {\n    return this.hidden;\n  }\n\n  /**\n   * Determines if the component is shown.\n   * @returns {boolean} true if the component is visible, else false\n   */\n  isShown(): boolean {\n    return !this.isHidden();\n  }\n\n  /**\n   * Toggles the hidden state by hiding the component if it is shown, or showing it if hidden.\n   */\n  toggleHidden() {\n    if (this.isHidden()) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  }\n\n  /**\n   * Disables the component.\n   * This method basically transfers the component into the disabled state. Actual disabling is done via CSS or child\n   * components. (e.g. Button needs to unsubscribe click listeners)\n   */\n  disable(): void {\n    if (!this.disabled) {\n      this.disabled = true;\n      this.getDomElement().addClass(this.prefixCss(Component.CLASS_DISABLED));\n      this.onDisabledEvent();\n    }\n  }\n\n  /**\n   * Enables the component.\n   * This method basically transfers the component into the enabled state. Actual enabling is done via CSS or child\n   * components. (e.g. Button needs to subscribe click listeners)\n   */\n  enable(): void {\n    if (this.disabled) {\n      this.getDomElement().removeClass(this.prefixCss(Component.CLASS_DISABLED));\n      this.disabled = false;\n      this.onEnabledEvent();\n    }\n  }\n\n  /**\n   * Determines if the component is disabled.\n   * @returns {boolean} true if the component is disabled, else false\n   */\n  isDisabled(): boolean {\n    return this.disabled;\n  }\n\n  /**\n   * Determines if the component is enabled.\n   * @returns {boolean} true if the component is enabled, else false\n   */\n  isEnabled(): boolean {\n    return !this.isDisabled();\n  }\n\n  /**\n   * Determines if the component is currently hovered.\n   * @returns {boolean} true if the component is hovered, else false\n   */\n  isHovered(): boolean {\n    return this.hovered;\n  }\n\n  /**\n   * Fires the onShow event.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   */\n  protected onShowEvent(): void {\n    this.componentEvents.onShow.dispatch(this);\n  }\n\n  /**\n   * Fires the onHide event.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   */\n  protected onHideEvent(): void {\n    this.componentEvents.onHide.dispatch(this);\n  }\n\n  /**\n   * Fires the onEnabled event.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   */\n  protected onEnabledEvent(): void {\n    this.componentEvents.onEnabled.dispatch(this);\n  }\n\n  /**\n   * Fires the onDisabled event.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   */\n  protected onDisabledEvent(): void {\n    this.componentEvents.onDisabled.dispatch(this);\n  }\n\n  /**\n   * Fires the onHoverChanged event.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   */\n  protected onHoverChangedEvent(hovered: boolean): void {\n    this.hovered = hovered;\n    this.componentEvents.onHoverChanged.dispatch(this, { hovered: hovered });\n  }\n\n  /**\n   * Gets the event that is fired when the component is showing.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   * @returns {Event<Component<Config>, NoArgs>}\n   */\n  get onShow(): Event<Component<Config>, NoArgs> {\n    return this.componentEvents.onShow.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the component is hiding.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   * @returns {Event<Component<Config>, NoArgs>}\n   */\n  get onHide(): Event<Component<Config>, NoArgs> {\n    return this.componentEvents.onHide.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the component is enabling.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   * @returns {Event<Component<Config>, NoArgs>}\n   */\n  get onEnabled(): Event<Component<Config>, NoArgs> {\n    return this.componentEvents.onEnabled.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the component is disabling.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   * @returns {Event<Component<Config>, NoArgs>}\n   */\n  get onDisabled(): Event<Component<Config>, NoArgs> {\n    return this.componentEvents.onDisabled.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the component's hover-state is changing.\n   * @returns {Event<Component<Config>, ComponentHoverChangedEventArgs>}\n   */\n  get onHoverChanged(): Event<Component<Config>, ComponentHoverChangedEventArgs> {\n    return this.componentEvents.onHoverChanged.getEvent();\n  }\n}","import {ComponentConfig, Component} from './component';\nimport {DOM} from '../dom';\nimport {ArrayUtils} from '../arrayutils';\n\n/**\n * Configuration interface for a {@link Container}.\n */\nexport interface ContainerConfig extends ComponentConfig {\n  /**\n   * Child components of the container.\n   */\n  components?: Component<ComponentConfig>[];\n}\n\n/**\n * A container component that can contain a collection of child components.\n * Components can be added at construction time through the {@link ContainerConfig#components} setting, or later\n * through the {@link Container#addComponent} method. The UIManager automatically takes care of all components, i.e. it\n * initializes and configures them automatically.\n *\n * In the DOM, the container consists of an outer <div> (that can be configured by the config) and an inner wrapper\n * <div> that contains the components. This double-<div>-structure is often required to achieve many advanced effects\n * in CSS and/or JS, e.g. animations and certain formatting with absolute positioning.\n *\n * DOM example:\n * <code>\n *     <div class='ui-container'>\n *         <div class='container-wrapper'>\n *             ... child components ...\n *         </div>\n *     </div>\n * </code>\n */\nexport class Container<Config extends ContainerConfig> extends Component<Config> {\n\n  /**\n   * A reference to the inner element that contains the components of the container.\n   */\n  private innerContainerElement: DOM;\n  private componentsToAdd: Component<ComponentConfig>[];\n  private componentsToRemove: Component<ComponentConfig>[];\n\n  constructor(config: Config) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-container',\n      components: [],\n    } as Config, this.config);\n\n    this.componentsToAdd = [];\n    this.componentsToRemove = [];\n  }\n\n  /**\n   * Adds a child component to the container.\n   * @param component the component to add\n   */\n  addComponent(component: Component<ComponentConfig>) {\n    this.config.components.push(component);\n    this.componentsToAdd.push(component);\n  }\n\n  /**\n   * Removes a child component from the container.\n   * @param component the component to remove\n   * @returns {boolean} true if the component has been removed, false if it is not contained in this container\n   */\n  removeComponent(component: Component<ComponentConfig>): boolean {\n    if (ArrayUtils.remove(this.config.components, component) != null) {\n      this.componentsToRemove.push(component);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Gets an array of all child components in this container.\n   * @returns {Component<ComponentConfig>[]}\n   */\n  getComponents(): Component<ComponentConfig>[] {\n    return this.config.components;\n  }\n\n  /**\n   * Removes all child components from the container.\n   */\n  removeComponents(): void {\n    for (let component of this.getComponents().slice()) {\n      this.removeComponent(component);\n    }\n  }\n\n  /**\n   * Updates the DOM of the container with the current components.\n   */\n  protected updateComponents(): void {\n    /* We cannot just clear the container to remove all elements and then re-add those that should stay, because\n     * IE looses the innerHTML of unattached elements, leading to empty elements within the container (e.g. missing\n     * subtitle text in SubtitleLabel).\n     * Instead, we keep a list of elements to add and remove, leaving remaining elements alone. By keeping them in\n     * the DOM, their content gets preserved in all browsers.\n     */\n    let component;\n\n    while (component = this.componentsToRemove.shift()) {\n      component.getDomElement().remove();\n    }\n\n    while (component = this.componentsToAdd.shift()) {\n      this.innerContainerElement.append(component.getDomElement());\n    }\n  }\n\n  protected toDomElement(): DOM {\n    // Create the container element (the outer <div>)\n    let containerElement = new DOM(this.config.tag, {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n    });\n\n    // Create the inner container element (the inner <div>) that will contain the components\n    let innerContainer = new DOM(this.config.tag, {\n      'class': this.prefixCss('container-wrapper'),\n    });\n    this.innerContainerElement = innerContainer;\n\n    for (let initialComponent of this.config.components) {\n      this.componentsToAdd.push(initialComponent);\n    }\n    this.updateComponents();\n\n    containerElement.append(innerContainer);\n\n    return containerElement;\n  }\n}","import {ContainerConfig, Container} from './container';\nimport {UIInstanceManager} from '../uimanager';\nimport {UIUtils} from '../uiutils';\nimport {Spacer} from './spacer';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * Configuration interface for the {@link ControlBar}.\n */\nexport interface ControlBarConfig extends ContainerConfig {\n  // nothing yet\n}\n\n/**\n * A container for main player control components, e.g. play toggle button, seek bar, volume control, fullscreen toggle\n * button.\n */\nexport class ControlBar extends Container<ControlBarConfig> {\n\n  constructor(config: ControlBarConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-controlbar',\n      hidden: true,\n    }, <ControlBarConfig>this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    uimanager.onControlsShow.subscribe(() => {\n      this.show();\n    });\n\n    uimanager.onControlsHide.subscribe(() => {\n      this.hide();\n    });\n  }\n}\n","import {ContainerConfig, Container} from './container';\nimport {Label, LabelConfig} from './label';\nimport {UIInstanceManager} from '../uimanager';\nimport {TvNoiseCanvas} from './tvnoisecanvas';\nimport {ErrorUtils} from '../errorutils';\nimport { ErrorEvent, PlayerAPI, PlayerEventBase } from 'bitmovin-player';\n\nexport interface ErrorMessageTranslator {\n  (error: ErrorEvent): string;\n}\n\nexport interface ErrorMessageMap {\n  [code: number]: string | ErrorMessageTranslator;\n}\n\n/**\n * Configuration interface for the {@link ErrorMessageOverlay}.\n */\nexport interface ErrorMessageOverlayConfig extends ContainerConfig {\n  /**\n   * Allows overwriting of the error messages displayed in the overlay for customization and localization.\n   * This is either a function that receives any {@link ErrorEvent} as parameter and translates error messages,\n   * or a map of error codes that overwrites specific error messages with a plain string or a function that\n   * receives the {@link ErrorEvent} as parameter and returns a customized string.\n   * The translation functions can be used to extract data (e.g. parameters) from the original error message.\n   *\n   * Example 1 (catch-all translation function):\n   * <code>\n   * errorMessageOverlayConfig = {\n   *   messages: function(error) {\n   *     switch (error.code) {\n   *       // Overwrite error 1000 'Unknown error'\n   *       case 1000:\n   *         return 'Houston, we have a problem'\n   *\n   *       // Transform error 1201 'The downloaded manifest is invalid' to uppercase\n   *       case 1201:\n   *         var description = ErrorUtils.defaultErrorMessages[error.code];\n   *         return description.toUpperCase();\n   *\n   *       // Customize error 1207 'The manifest could not be loaded'\n   *       case 1207:\n   *         var statusCode = error.data.statusCode;\n   *         return 'Manifest loading failed with HTTP error ' + statusCode;\n   *     }\n   *     // Return unmodified error message for all other errors\n   *     return error.message;\n   *   }\n   * };\n   * </code>\n   *\n   * Example 2 (translating specific errors):\n   * <code>\n   * errorMessageOverlayConfig = {\n   *   messages: {\n   *     // Overwrite error 1000 'Unknown error'\n   *     1000: 'Houston, we have a problem',\n   *\n   *     // Transform error 1201 'Unsupported manifest format' to uppercase\n   *     1201: function(error) {\n   *       var description = ErrorUtils.defaultErrorMessages[error.code];\n   *       return description.toUpperCase();\n   *     },\n   *\n   *     // Customize error 1207 'The manifest could not be loaded'\n   *     1207: function(error) {\n   *       var statusCode = error.data.statusCode;\n   *       return 'Manifest loading failed with HTTP error ' + statusCode;\n   *     }\n   *   }\n   * };\n   * </code>\n   */\n  messages?: ErrorMessageMap | ErrorMessageTranslator;\n}\n\n/**\n * Overlays the player and displays error messages.\n */\nexport class ErrorMessageOverlay extends Container<ErrorMessageOverlayConfig> {\n\n  private errorLabel: Label<LabelConfig>;\n  private tvNoiseBackground: TvNoiseCanvas;\n\n  constructor(config: ErrorMessageOverlayConfig = {}) {\n    super(config);\n\n    this.errorLabel = new Label<LabelConfig>({ cssClass: 'ui-errormessage-label' });\n    this.tvNoiseBackground = new TvNoiseCanvas();\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-errormessage-overlay',\n      components: [this.tvNoiseBackground, this.errorLabel],\n      hidden: true,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n\n    player.on(player.exports.PlayerEvent.Error, (event: ErrorEvent) => {\n      let message = ErrorUtils.defaultErrorMessageTranslator(event);\n\n      // errorMessages configured in `UIConfig` take precedence `ErrorMessageOverlayConfig`\n      let errorMessages = uimanager.getConfig().errorMessages || config.messages;\n      // Process message vocabularies\n      if (errorMessages) {\n        if (typeof errorMessages === 'function') {\n          // Translation function for all errors\n          message = errorMessages(event);\n        } else if (errorMessages[event.code]) {\n          // It's not a translation function, so it must be a map of strings or translation functions\n          let customMessage = errorMessages[event.code];\n\n          if (typeof customMessage === 'string') {\n            message = customMessage;\n          } else {\n            // The message is a translation function, so we call it\n            message = customMessage(event);\n          }\n        }\n      }\n\n      this.errorLabel.setText(message);\n      this.tvNoiseBackground.start();\n      this.show();\n    });\n\n    player.on(player.exports.PlayerEvent.SourceLoaded, (event: PlayerEventBase) => {\n      if (this.isShown()) {\n        this.tvNoiseBackground.stop();\n        this.hide();\n      }\n    });\n  }\n\n  release(): void {\n    super.release();\n\n    // Canvas rendering must be explicitly stopped, else it just continues forever and hogs resources\n    this.tvNoiseBackground.stop();\n  }\n}","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles the player between windowed and fullscreen view.\n */\nexport class FullscreenToggleButton extends ToggleButton<ToggleButtonConfig> {\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-fullscreentogglebutton',\n      text: i18n.getLocalizer('fullscreen'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let fullscreenStateHandler = () => {\n      if (player.getViewMode() === player.exports.ViewMode.Fullscreen) {\n        this.on();\n      } else {\n        this.off();\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.ViewModeChanged, fullscreenStateHandler);\n\n    this.onClick.subscribe(() => {\n      if (player.getViewMode() === player.exports.ViewMode.Fullscreen) {\n        player.setViewMode(player.exports.ViewMode.Inline);\n      } else {\n        player.setViewMode(player.exports.ViewMode.Fullscreen);\n      }\n    });\n\n    // Startup init\n    fullscreenStateHandler();\n  }\n}","import {ToggleButtonConfig} from './togglebutton';\nimport {PlaybackToggleButton} from './playbacktogglebutton';\nimport {DOM} from '../dom';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI, PlayerEventBase, WarningEvent } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that overlays the video and toggles between playback and pause.\n */\nexport class HugePlaybackToggleButton extends PlaybackToggleButton {\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-hugeplaybacktogglebutton',\n      text: i18n.getLocalizer('playPause'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    // Update button state through API events\n    super.configure(player, uimanager, false);\n\n    let togglePlayback = () => {\n      if (player.isPlaying() || this.isPlayInitiated) {\n        player.pause('ui');\n      } else {\n        player.play('ui');\n      }\n    };\n\n    let toggleFullscreen = () => {\n      if (player.getViewMode() === player.exports.ViewMode.Fullscreen) {\n        player.setViewMode(player.exports.ViewMode.Inline);\n      } else {\n        player.setViewMode(player.exports.ViewMode.Fullscreen);\n      }\n    };\n\n    let firstPlay = true;\n    let clickTime = 0;\n    let doubleClickTime = 0;\n\n    /*\n     * YouTube-style toggle button handling\n     *\n     * The goal is to prevent a short pause or playback interval between a click, that toggles playback, and a\n     * double click, that toggles fullscreen. In this naive approach, the first click would e.g. start playback,\n     * the second click would be detected as double click and toggle to fullscreen, and as second normal click stop\n     * playback, which results is a short playback interval with max length of the double click detection\n     * period (usually 500ms).\n     *\n     * To solve this issue, we defer handling of the first click for 200ms, which is almost unnoticeable to the user,\n     * and just toggle playback if no second click (double click) has been registered during this period. If a double\n     * click is registered, we just toggle the fullscreen. In the first 200ms, undesired playback changes thus cannot\n     * happen. If a double click is registered within 500ms, we undo the playback change and switch fullscreen mode.\n     * In the end, this method basically introduces a 200ms observing interval in which playback changes are prevented\n     * if a double click happens.\n     */\n    this.onClick.subscribe(() => {\n      // Directly start playback on first click of the button.\n      // This is a required workaround for mobile browsers where video playback needs to be triggered directly\n      // by the user. A deferred playback start through the timeout below is not considered as user action and\n      // therefore ignored by mobile browsers.\n      if (firstPlay) {\n        // Try to start playback. Then we wait for Play and only when it arrives, we disable the firstPlay flag.\n        // If we disable the flag here, onClick was triggered programmatically instead of by a user interaction, and\n        // playback is blocked (e.g. on mobile devices due to the programmatic play() call), we loose the chance to\n        // ever start playback through a user interaction again with this button.\n        togglePlayback();\n        return;\n      }\n\n      let now = Date.now();\n\n      if (now - clickTime < 200) {\n        // We have a double click inside the 200ms interval, just toggle fullscreen mode\n        toggleFullscreen();\n        doubleClickTime = now;\n        return;\n      } else if (now - clickTime < 500) {\n        // We have a double click inside the 500ms interval, undo playback toggle and toggle fullscreen mode\n        toggleFullscreen();\n        togglePlayback();\n        doubleClickTime = now;\n        return;\n      }\n\n      clickTime = now;\n\n      setTimeout(() => {\n        if (Date.now() - doubleClickTime > 200) {\n          // No double click detected, so we toggle playback and wait what happens next\n          togglePlayback();\n        }\n      }, 200);\n    });\n\n    player.on(player.exports.PlayerEvent.Play, () => {\n      // Playback has really started, we can disable the flag to switch to normal toggle button handling\n      firstPlay = false;\n    });\n\n    player.on(player.exports.PlayerEvent.Warning, (event: WarningEvent) => {\n      if (event.code === player.exports.WarningCode.PLAYBACK_COULD_NOT_BE_STARTED) {\n        // if playback could not be started, reset the first play flag as we need the user interaction to start\n        firstPlay = true;\n      }\n    });\n\n    const suppressPlayButtonTransitionAnimation = () => {\n      // Disable the current animation\n      this.setTransitionAnimationsEnabled(false);\n\n      // Enable the transition animations for the next state change\n      this.onToggle.subscribeOnce(() => {\n        this.setTransitionAnimationsEnabled(true);\n      });\n    };\n\n    // Hide the play button animation when the UI is loaded (it should only be animated on state changes)\n    suppressPlayButtonTransitionAnimation();\n\n    const isAutoplayEnabled = player.getConfig().playback && Boolean(player.getConfig().playback.autoplay);\n    // We only know if an autoplay attempt is upcoming if the player is not yet ready. It the player is already ready,\n    // the attempt might be upcoming or might have already happened, but we don't have to handle that because we can\n    // simply rely on isPlaying and the play state events.\n    const isAutoplayUpcoming = !player.getSource() && isAutoplayEnabled;\n\n    // Hide the play button when the player is already playing or autoplay is upcoming\n    if (player.isPlaying() || isAutoplayUpcoming) {\n      // Hide the play button (switch to playing state)\n      this.on();\n      // Disable the animation of the playing state switch\n      suppressPlayButtonTransitionAnimation();\n\n      // Show the play button without an animation if a play attempt is blocked\n      player.on(player.exports.PlayerEvent.Warning, (event: WarningEvent) => {\n        if (event.code === player.exports.WarningCode.PLAYBACK_COULD_NOT_BE_STARTED) {\n          suppressPlayButtonTransitionAnimation();\n        }\n      });\n    }\n  }\n\n  protected toDomElement(): DOM {\n    let buttonElement = super.toDomElement();\n\n    // Add child that contains the play button image\n    // Setting the image directly on the button does not work together with scaling animations, because the button\n    // can cover the whole video player are and scaling would extend it beyond. By adding an inner element, confined\n    // to the size if the image, it can scale inside the player without overshooting.\n    buttonElement.append(new DOM('div', {\n      'class': this.prefixCss('image'),\n    }));\n\n    return buttonElement;\n  }\n\n  /**\n   * Enables or disables the play state transition animations of the play button image. Can be used to suppress\n   * animations.\n   * @param {boolean} enabled true to enable the animations (default), false to disable them\n   */\n  protected setTransitionAnimationsEnabled(enabled: boolean): void {\n    const noTransitionAnimationsClass = this.prefixCss('no-transition-animations');\n\n    if (enabled) {\n      this.getDomElement().removeClass(noTransitionAnimationsClass);\n    } else if (!this.getDomElement().hasClass(noTransitionAnimationsClass)) {\n      this.getDomElement().addClass(noTransitionAnimationsClass);\n    }\n  }\n}\n","import {ButtonConfig, Button} from './button';\nimport {DOM} from '../dom';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button to play/replay a video.\n */\nexport class HugeReplayButton extends Button<ButtonConfig> {\n\n  constructor(config: ButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-hugereplaybutton',\n      text: i18n.getLocalizer('replay'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onClick.subscribe(() => {\n      player.play('ui');\n    });\n  }\n\n  protected toDomElement(): DOM {\n    let buttonElement = super.toDomElement();\n\n    // Add child that contains the play button image\n    // Setting the image directly on the button does not work together with scaling animations, because the button\n    // can cover the whole video player are and scaling would extend it beyond. By adding an inner element, confined\n    // to the size if the image, it can scale inside the player without overshooting.\n    buttonElement.append(new DOM('div', {\n      'class': this.prefixCss('image'),\n    }));\n\n    return buttonElement;\n  }\n}","import {ListSelector, ListSelectorConfig} from './listselector';\nimport {DOM} from '../dom';\nimport { i18n } from '../localization/i18n';\n\nexport class ItemSelectionList extends ListSelector<ListSelectorConfig> {\n\n  private static readonly CLASS_SELECTED = 'selected';\n\n  private listElement: DOM;\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      tag: 'ul',\n      cssClass: 'ui-itemselectionlist',\n    }, this.config);\n  }\n\n  protected isActive(): boolean {\n    return this.items.length > 1;\n  }\n\n  protected toDomElement(): DOM {\n    let listElement = new DOM('ul', {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n    });\n\n    this.listElement = listElement;\n    this.updateDomItems();\n\n    return listElement;\n  }\n\n  protected updateDomItems(selectedValue: string = null) {\n    // Delete all children\n    this.listElement.empty();\n\n    let selectedListItem: DOM = null;\n\n    const selectItem = (listItem: DOM) => {\n      listItem.addClass(this.prefixCss(ItemSelectionList.CLASS_SELECTED));\n    };\n\n    const deselectItem = (listItem: DOM) => {\n      listItem.removeClass(this.prefixCss(ItemSelectionList.CLASS_SELECTED));\n    };\n\n    for (let item of this.items) {\n      let listItem = new DOM('li', {\n        'type': 'li',\n        'class': this.prefixCss('ui-selectionlistitem'),\n      }).append(new DOM('a', {\n      }).html(i18n.performLocalization(item.label)));\n\n      if (!selectedListItem) {\n        if (selectedValue == null) { // If there is no pre-selected value, select the first one\n          selectedListItem = listItem;\n        } else if (String(selectedValue) === item.key) { // convert selectedValue to string to catch 'null'/null case\n          selectedListItem = listItem;\n        }\n      }\n\n      // Handle list item selections\n      listItem.on('click', () => {\n        // Deselect the previous item (if there was a selected item)\n        if (selectedListItem) {\n          deselectItem(selectedListItem);\n        }\n\n        // Select the clicked item\n        selectedListItem = listItem;\n        selectItem(listItem);\n\n        // Fire the event\n        this.onItemSelectedEvent(item.key, false);\n      });\n\n      // Select default item\n      if (selectedListItem) {\n        selectItem(selectedListItem);\n      }\n\n      this.listElement.append(listItem);\n    }\n  }\n\n  protected onItemAddedEvent(value: string) {\n    super.onItemAddedEvent(value);\n    this.updateDomItems(this.selectedItem);\n  }\n\n  protected onItemRemovedEvent(value: string) {\n    super.onItemRemovedEvent(value);\n    this.updateDomItems(this.selectedItem);\n  }\n\n  protected onItemSelectedEvent(value: string, updateDomItems: boolean = true) {\n    super.onItemSelectedEvent(value);\n    if (updateDomItems) {\n      this.updateDomItems(value);\n    }\n  }\n}\n","import {ComponentConfig, Component} from './component';\nimport {DOM} from '../dom';\nimport {EventDispatcher, Event, NoArgs} from '../eventdispatcher';\nimport { LocalizableText, i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for a {@link Label} component.\n */\nexport interface LabelConfig extends ComponentConfig {\n  /**\n   * The text as string or localize callback on the label.\n   */\n  text?: LocalizableText;\n}\n\n/**\n * A simple text label.\n *\n * DOM example:\n * <code>\n *     <span class='ui-label'>...some text...</span>\n * </code>\n */\nexport class Label<Config extends LabelConfig> extends Component<Config> {\n\n  private text: LocalizableText;\n\n  private labelEvents = {\n    onClick: new EventDispatcher<Label<Config>, NoArgs>(),\n    onTextChanged: new EventDispatcher<Label<Config>, string>(),\n  };\n\n  constructor(config: Config = {} as Config) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-label',\n    } as Config, this.config);\n    this.text = this.config.text;\n  }\n\n  protected toDomElement(): DOM {\n    let labelElement = new DOM('span', {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n    }).html(i18n.performLocalization(this.text));\n\n    labelElement.on('click', () => {\n      this.onClickEvent();\n    });\n\n    return labelElement;\n  }\n\n  /**\n   * Set the text on this label.\n   * @param text\n   */\n  setText(text: LocalizableText) {\n    if (text === this.text) {\n      return;\n    }\n\n    this.text = text;\n    const localizedText = i18n.performLocalization(text);\n    this.getDomElement().html(localizedText);\n    this.onTextChangedEvent(localizedText);\n  }\n\n  /**\n   * Gets the text on this label.\n   * @return {string} The text on the label\n   */\n  getText(): string {\n    return i18n.performLocalization(this.text);\n  }\n\n  /**\n   * Clears the text on this label.\n   */\n  clearText() {\n    this.getDomElement().html('');\n    this.onTextChangedEvent(null);\n  }\n\n  /**\n   * Tests if the label is empty and does not contain any text.\n   * @return {boolean} True if the label is empty, else false\n   */\n  isEmpty(): boolean {\n    return !this.text;\n  }\n\n  /**\n   * Fires the {@link #onClick} event.\n   * Can be used by subclasses to listen to this event without subscribing an event listener by overwriting the method\n   * and calling the super method.\n   */\n  protected onClickEvent() {\n    this.labelEvents.onClick.dispatch(this);\n  }\n\n  /**\n   * Fires the {@link #onClick} event.\n   * Can be used by subclasses to listen to this event without subscribing an event listener by overwriting the method\n   * and calling the super method.\n   */\n  protected onTextChangedEvent(text: string) {\n    this.labelEvents.onTextChanged.dispatch(this, text);\n  }\n\n  /**\n   * Gets the event that is fired when the label is clicked.\n   * @returns {Event<Label<LabelConfig>, NoArgs>}\n   */\n  get onClick(): Event<Label<LabelConfig>, NoArgs> {\n    return this.labelEvents.onClick.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the text on the label is changed.\n   * @returns {Event<Label<LabelConfig>, string>}\n   */\n  get onTextChanged(): Event<Label<LabelConfig>, string> {\n    return this.labelEvents.onTextChanged.getEvent();\n  }\n}\n","import { ToggleButton, ToggleButtonConfig } from './togglebutton';\nimport { ListItem, ListSelector, ListSelectorConfig } from './listselector';\nimport {DOM} from '../dom';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { UIInstanceManager } from '../uimanager';\nimport { ArrayUtils } from '../arrayutils';\n\n/**\n * A element to select a single item out of a list of available items.\n *\n * DOM example:\n * <code>\n *   <div class='ui-listbox'>\n *     <button class='ui-listbox-button'>label</button>\n *     ...\n *   </div\n * </code>\n */\n// TODO: change ListSelector to extends container in v4 to improve usage of ListBox.\n//       Currently we are creating the dom element of the list box with child elements manually here.\n//       But this functionality is already covered within the Container component.\nexport class ListBox extends ListSelector<ListSelectorConfig> {\n  private listBoxElement: DOM;\n  private components: ListBoxItemButton[] = [];\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-listbox',\n    } as ListSelectorConfig, this.config);\n  }\n\n  public configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    // Subscribe before super call to receive initial events\n    this.onItemAdded.subscribe(this.addListBoxDomItem);\n    this.onItemRemoved.subscribe(this.removeListBoxDomItem);\n    this.onItemSelected.subscribe(this.refreshSelectedItem);\n\n    super.configure(player, uimanager);\n  }\n\n  protected toDomElement(): DOM {\n    let listBoxElement = new DOM('div', {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n    });\n\n    this.listBoxElement = listBoxElement;\n    this.createListBoxDomItems();\n    this.refreshSelectedItem();\n\n    return listBoxElement;\n  }\n\n  private createListBoxDomItems() {\n    // Delete all children\n    this.listBoxElement.empty();\n    this.components = [];\n\n    // Add updated children\n    for (let item of this.items) {\n      this.addListBoxDomItem(this, item.key);\n    }\n  }\n\n  private removeListBoxDomItem = (_: ListBox, key: string) => {\n    const component = this.getComponentForKey(key);\n    if (component) {\n      component.getDomElement().remove();\n      ArrayUtils.remove(this.components, component);\n    }\n  };\n\n  private addListBoxDomItem = (_: ListBox, key: string) => {\n    const component = this.getComponentForKey(key);\n    const newItem = this.getItemForKey(key);\n    if (component) {\n      // Update existing component\n      component.setText(newItem.label);\n    } else {\n      const listBoxItemButton = this.buildListBoxItemButton(newItem);\n\n      listBoxItemButton.onClick.subscribe(() => {\n        this.handleSelectionChange(listBoxItemButton);\n      });\n\n      this.components.push(listBoxItemButton);\n      this.listBoxElement.append(listBoxItemButton.getDomElement());\n    }\n  };\n\n  private refreshSelectedItem = () => {\n    // This gets called twice because the first time is triggered when the user clicks on the ListBoxItemButton. And the\n    // second call comes from the player event when the actual item is selected (Subtitle / AudioTrack in this case).\n    // As this is a generic component we can't prohibit this behaviour. We need to treat this component as it acts\n    // independent from PlayerEvents and on the other hand we need to react to PlayerEvents as it could be triggered\n    // from outside.\n\n    for (let item of this.items) {\n      const component = this.getComponentForKey(item.key);\n      if (component) {\n        String(component.key) === String(this.selectedItem) ? component.on() : component.off();\n      }\n    }\n  };\n\n  private buildListBoxItemButton(listItem: ListItem): ListBoxItemButton {\n    return new ListBoxItemButton({\n      key: listItem.key,\n      text: listItem.label,\n    });\n  }\n\n  private getComponentForKey(key: string): ListBoxItemButton {\n    return this.components.find((c) => key === c.key);\n  }\n\n  private handleSelectionChange = (sender: ListBoxItemButton) => {\n    this.onItemSelectedEvent(sender.key);\n  };\n}\n\ninterface ListBoxItemButtonConfig extends ToggleButtonConfig {\n  /**\n   * key to identify selected item. Similar to the value attribute of an select option.\n   */\n  key: string;\n}\n\nclass ListBoxItemButton extends ToggleButton<ListBoxItemButtonConfig> {\n\n  constructor(config: ListBoxItemButtonConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-listbox-button',\n      onClass: 'selected',\n      offClass: '',\n    } as ListBoxItemButtonConfig, this.config);\n  }\n\n  get key(): string {\n    return (this.config as ListBoxItemButtonConfig).key;\n  }\n}\n","import {Component, ComponentConfig} from './component';\nimport {EventDispatcher, Event} from '../eventdispatcher';\nimport {ArrayUtils} from '../arrayutils';\nimport { LocalizableText, i18n } from '../localization/i18n';\n\n/**\n * A map of items (key/value -> label} for a {@link ListSelector} in a {@link ListSelectorConfig}.\n */\nexport interface ListItem {\n  key: string;\n  label: LocalizableText;\n}\n\n/**\n * Filter function that can be used to filter out list items added through {@link ListSelector.addItem}.\n *\n * This is intended to be used in conjunction with subclasses that populate themselves automatically\n * via the player API, e.g. {@link SubtitleSelectBox}.\n */\nexport interface ListItemFilter {\n  /**\n   * Takes a list item and decides whether it should pass or be discarded.\n   * @param {ListItem} listItem the item to apply the filter to\n   * @returns {boolean} true to let the item pass through the filter, false to discard the item\n   */\n  (listItem: ListItem): boolean;\n}\n\n/**\n * Translator function to translate labels of list items added through {@link ListSelector.addItem}.\n *\n * This is intended to be used in conjunction with subclasses that populate themselves automatically\n * via the player API, e.g. {@link SubtitleSelectBox}.\n */\nexport interface ListItemLabelTranslator {\n  /**\n   * Takes a list item, optionally changes the label, and returns the new label.\n   * @param {ListItem} listItem the item to translate\n   * @returns {string} the translated or original label\n   */\n  (listItem: ListItem): string;\n}\n\n/**\n * Configuration interface for a {@link ListSelector}.\n */\nexport interface ListSelectorConfig extends ComponentConfig {\n  items?: ListItem[];\n  filter?: ListItemFilter;\n  translator?: ListItemLabelTranslator;\n}\n\nexport abstract class ListSelector<Config extends ListSelectorConfig> extends Component<ListSelectorConfig> {\n\n  protected items: ListItem[];\n  protected selectedItem: string;\n\n  private listSelectorEvents = {\n    onItemAdded: new EventDispatcher<ListSelector<Config>, string>(),\n    onItemRemoved: new EventDispatcher<ListSelector<Config>, string>(),\n    onItemSelected: new EventDispatcher<ListSelector<Config>, string>(),\n  };\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      items: [],\n      cssClass: 'ui-listselector',\n    }, this.config);\n\n    this.items = this.config.items;\n  }\n\n  private getItemIndex(key: string): number {\n    for (let index in this.items) {\n      if (key === this.items[index].key) {\n        return parseInt(index);\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Returns all current items of this selector.\n   * * @returns {ListItem[]}\n   */\n  getItems(): ListItem[] {\n    return this.items;\n  }\n\n  /**\n   * Checks if the specified item is part of this selector.\n   * @param key the key of the item to check\n   * @returns {boolean} true if the item is part of this selector, else false\n   */\n  hasItem(key: string): boolean {\n    return this.getItemIndex(key) > -1;\n  }\n\n  /**\n   * Adds an item to this selector by appending it to the end of the list of items. If an item with the specified\n   * key already exists, it is replaced.\n   * @param key the key of the item to add\n   * @param label the (human-readable) label of the item to add\n   */\n  addItem(key: string, label: LocalizableText) {\n    const listItem = { key: key, label: i18n.performLocalization(label) };\n\n    // Apply filter function\n    if (this.config.filter && !this.config.filter(listItem)) {\n      return;\n    }\n\n    // Apply translator function\n    if (this.config.translator) {\n      listItem.label = this.config.translator(listItem);\n    }\n\n    // Try to remove key first to get overwrite behavior and avoid duplicate keys\n    this.removeItem(key); // This will trigger an ItemRemoved and an ItemAdded event\n\n    this.items.push(listItem);\n    this.onItemAddedEvent(key);\n  }\n\n  /**\n   * Removes an item from this selector.\n   * @param key the key of the item to remove\n   * @returns {boolean} true if removal was successful, false if the item is not part of this selector\n   */\n  removeItem(key: string): boolean {\n    let index = this.getItemIndex(key);\n    if (index > -1) {\n      ArrayUtils.remove(this.items, this.items[index]);\n      this.onItemRemovedEvent(key);\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Selects an item from the items in this selector.\n   * @param key the key of the item to select\n   * @returns {boolean} true is the selection was successful, false if the selected item is not part of the selector\n   */\n  selectItem(key: string): boolean {\n    if (key === this.selectedItem) {\n      // itemConfig is already selected, suppress any further action\n      return true;\n    }\n\n    let index = this.getItemIndex(key);\n\n    if (index > -1) {\n      this.selectedItem = key;\n      this.onItemSelectedEvent(key);\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Returns the key of the selected item.\n   * @returns {string} the key of the selected item or null if no item is selected\n   */\n  getSelectedItem(): string | null {\n    return this.selectedItem;\n  }\n\n  /**\n   * Returns the items for the given key or undefined if no item with the given key exists.\n   * @param key the key of the item to return\n   * @returns {ListItem} the item with the requested key. Undefined if no item with the given key exists.\n   */\n  getItemForKey(key: string): ListItem {\n    return this.items.find((item) => item.key === key);\n  }\n\n  /**\n   * Synchronize the current items of this selector with the given ones. This will remove and add items selectively.\n   * For each removed item the ItemRemovedEvent and for each added item the ItemAddedEvent will be triggered. Favour\n   * this method over using clearItems and adding all items again afterwards.\n   * @param newItems\n   */\n  synchronizeItems(newItems: ListItem[]): void {\n    newItems\n      .filter((item) => !this.hasItem(item.key))\n      .forEach((item) => this.addItem(item.key, item.label));\n\n    this.items\n      .filter((item) => newItems.filter((i) => i.key === item.key).length === 0)\n      .forEach((item) => this.removeItem(item.key));\n  }\n\n  /**\n   * Removes all items from this selector.\n   */\n  clearItems() {\n    // local copy for iteration after clear\n    let items = this.items;\n    // clear items\n    this.items = [];\n\n    // clear the selection as the selected item is also removed\n    this.selectedItem = null;\n\n    // fire events\n    for (let item of items) {\n      this.onItemRemovedEvent(item.key);\n    }\n  }\n\n  /**\n   * Returns the number of items in this selector.\n   * @returns {number}\n   */\n  itemCount(): number {\n    return Object.keys(this.items).length;\n  }\n\n  protected onItemAddedEvent(key: string) {\n    this.listSelectorEvents.onItemAdded.dispatch(this, key);\n  }\n\n  protected onItemRemovedEvent(key: string) {\n    this.listSelectorEvents.onItemRemoved.dispatch(this, key);\n  }\n\n  protected onItemSelectedEvent(key: string) {\n    this.listSelectorEvents.onItemSelected.dispatch(this, key);\n  }\n\n  /**\n   * Gets the event that is fired when an item is added to the list of items.\n   * @returns {Event<ListSelector<Config>, string>}\n   */\n  get onItemAdded(): Event<ListSelector<Config>, string> {\n    return this.listSelectorEvents.onItemAdded.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when an item is removed from the list of items.\n   * @returns {Event<ListSelector<Config>, string>}\n   */\n  get onItemRemoved(): Event<ListSelector<Config>, string> {\n    return this.listSelectorEvents.onItemRemoved.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when an item is selected from the list of items.\n   * @returns {Event<ListSelector<Config>, string>}\n   */\n  get onItemSelected(): Event<ListSelector<Config>, string> {\n    return this.listSelectorEvents.onItemSelected.getEvent();\n  }\n}","import {LabelConfig, Label} from './label';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * Enumerates the types of content that the {@link MetadataLabel} can display.\n */\nexport enum MetadataLabelContent {\n  /**\n   * Title of the data source.\n   */\n  Title,\n  /**\n   * Description fo the data source.\n   */\n  Description,\n}\n\n/**\n * Configuration interface for {@link MetadataLabel}.\n */\nexport interface MetadataLabelConfig extends LabelConfig {\n  /**\n   * The type of content that should be displayed in the label.\n   */\n  content: MetadataLabelContent;\n}\n\n/**\n * A label that can be configured to display certain metadata.\n */\nexport class MetadataLabel extends Label<MetadataLabelConfig> {\n\n  constructor(config: MetadataLabelConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['label-metadata', 'label-metadata-' + MetadataLabelContent[config.content].toLowerCase()],\n    } as MetadataLabelConfig, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let uiconfig = uimanager.getConfig();\n\n    let init = () => {\n      switch (config.content) {\n        case MetadataLabelContent.Title:\n          this.setText(uiconfig.metadata.title);\n          break;\n        case MetadataLabelContent.Description:\n          this.setText(uiconfig.metadata.description);\n          break;\n      }\n    };\n\n    let unload = () => {\n      this.setText(null);\n    };\n\n    // Init label\n    init();\n    // Clear labels when source is unloaded\n    player.on(player.exports.PlayerEvent.SourceUnloaded, unload);\n\n    uimanager.getConfig().events.onUpdated.subscribe(init);\n  }\n}","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles Apple macOS picture-in-picture mode.\n */\nexport class PictureInPictureToggleButton extends ToggleButton<ToggleButtonConfig> {\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-piptogglebutton',\n      text: i18n.getLocalizer('pictureInPicture'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onClick.subscribe(() => {\n      if (player.isViewModeAvailable(player.exports.ViewMode.PictureInPicture)) {\n        if (player.getViewMode() === player.exports.ViewMode.PictureInPicture) {\n          player.setViewMode(player.exports.ViewMode.Inline);\n        } else {\n          player.setViewMode(player.exports.ViewMode.PictureInPicture);\n        }\n      } else {\n        if (console) {\n          console.log('PIP unavailable');\n        }\n      }\n    });\n\n    let pipAvailableHander = () => {\n      if (player.isViewModeAvailable(player.exports.ViewMode.PictureInPicture)) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    };\n\n    uimanager.getConfig().events.onUpdated.subscribe(pipAvailableHander);\n\n    // Toggle button 'on' state\n    player.on(player.exports.PlayerEvent.ViewModeChanged, () => {\n      if (player.getViewMode() === player.exports.ViewMode.PictureInPicture) {\n        this.on();\n      } else {\n        this.off();\n      }\n    });\n\n    // Startup init\n    pipAvailableHander(); // Hide button if PIP not available\n    if (player.getViewMode() === player.exports.ViewMode.PictureInPicture) {\n      this.on();\n    }\n  }\n}","import {SelectBox} from './selectbox';\nimport {ListSelectorConfig} from './listselector';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A select box providing a selection of different playback speeds.\n */\nexport class PlaybackSpeedSelectBox extends SelectBox {\n  protected defaultPlaybackSpeeds: number[];\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n    this.defaultPlaybackSpeeds = [0.25, 0.5, 0.75, 1, 1.25, 1.5, 2];\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-playbackspeedselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addDefaultItems();\n\n    this.onItemSelected.subscribe((sender: PlaybackSpeedSelectBox, value: string) => {\n      player.setPlaybackSpeed(parseFloat(value));\n      this.selectItem(value);\n    });\n\n    const setDefaultValue = (): void => {\n      const playbackSpeed = player.getPlaybackSpeed();\n      this.setSpeed(playbackSpeed);\n    };\n\n    player.on(player.exports.PlayerEvent.PlaybackSpeedChanged, setDefaultValue);\n    uimanager.getConfig().events.onUpdated.subscribe(setDefaultValue);\n  }\n\n  setSpeed(speed: number): void {\n    if (!this.selectItem(String(speed))) {\n      // a playback speed was set which is not in the list, add it to the list to show it to the user\n      this.clearItems();\n      this.addDefaultItems([speed]);\n      this.selectItem(String(speed));\n    }\n  }\n\n  addDefaultItems(customItems: number[] = []): void {\n    const sortedSpeeds = this.defaultPlaybackSpeeds.concat(customItems).sort();\n\n    sortedSpeeds.forEach(element => {\n      if (element !== 1) {\n        this.addItem(String(element), `${element}x`);\n      } else {\n        this.addItem(String(element), i18n.getLocalizer('normal'));\n      }\n    });\n  }\n\n  clearItems(): void {\n    this.items = [];\n    this.selectedItem = null;\n  }\n}\n","import {LabelConfig, Label} from './label';\nimport {UIInstanceManager} from '../uimanager';\nimport LiveStreamDetectorEventArgs = PlayerUtils.LiveStreamDetectorEventArgs;\nimport {PlayerUtils} from '../playerutils';\nimport {StringUtils} from '../stringutils';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\nexport enum PlaybackTimeLabelMode {\n  /**\n   * Displays the current time\n   */\n  CurrentTime,\n  /**\n   * Displays the duration of the content\n   */\n  TotalTime,\n  /**\n   * Displays the current time and the duration of the content\n   * Format: ${currentTime} / ${totalTime}\n   */\n  CurrentAndTotalTime,\n  /**\n   * Displays the remaining time of the content\n   */\n  RemainingTime,\n}\n\nexport interface PlaybackTimeLabelConfig extends LabelConfig {\n  /**\n   * The type of which time should be displayed in the label.\n   * Default: PlaybackTimeLabelMode.CurrentAndTotalTime\n   */\n  timeLabelMode?: PlaybackTimeLabelMode;\n  /**\n   * Boolean if the label should be hidden in live playback\n   */\n  hideInLivePlayback?: boolean;\n}\n\n/**\n * A label that display the current playback time and the total time through {@link PlaybackTimeLabel#setTime setTime}\n * or any string through {@link PlaybackTimeLabel#setText setText}.\n */\nexport class PlaybackTimeLabel extends Label<PlaybackTimeLabelConfig> {\n\n  private timeFormat: string;\n\n  constructor(config: PlaybackTimeLabelConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, <PlaybackTimeLabelConfig>{\n      cssClass: 'ui-playbacktimelabel',\n      timeLabelMode: PlaybackTimeLabelMode.CurrentAndTotalTime,\n      hideInLivePlayback: false,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let live = false;\n    let liveCssClass = this.prefixCss('ui-playbacktimelabel-live');\n    let liveEdgeCssClass = this.prefixCss('ui-playbacktimelabel-live-edge');\n    let minWidth = 0;\n\n    let liveClickHandler = () => {\n      player.timeShift(0);\n    };\n\n    let updateLiveState = () => {\n      // Player is playing a live stream when the duration is infinite\n      live = player.isLive();\n\n      // Attach/detach live marker class\n      if (live) {\n        this.getDomElement().addClass(liveCssClass);\n        this.setText(i18n.getLocalizer('live'));\n        if (config.hideInLivePlayback) {\n          this.hide();\n        }\n        this.onClick.subscribe(liveClickHandler);\n        updateLiveTimeshiftState();\n      } else {\n        this.getDomElement().removeClass(liveCssClass);\n        this.getDomElement().removeClass(liveEdgeCssClass);\n        this.show();\n        this.onClick.unsubscribe(liveClickHandler);\n      }\n    };\n\n    let updateLiveTimeshiftState = () => {\n      if (!live) {\n        return;\n      }\n\n      // The player is only at the live edge iff the stream is not shifted and it is actually playing or playback has\n      // never been started (meaning it isn't paused). A player that is paused is always behind the live edge.\n      // An exception is made for live streams without a timeshift window, because here we \"stop\" playback instead\n      // of pausing it (from a UI perspective), so we keep the live edge indicator on because a play would always\n      // resume at the live edge.\n      const isTimeshifted = player.getTimeShift() < 0;\n      const isTimeshiftAvailable = player.getMaxTimeShift() < 0;\n      if (!isTimeshifted && (!player.isPaused() || !isTimeshiftAvailable)) {\n        this.getDomElement().addClass(liveEdgeCssClass);\n      } else {\n        this.getDomElement().removeClass(liveEdgeCssClass);\n      }\n    };\n\n    let liveStreamDetector = new PlayerUtils.LiveStreamDetector(player, uimanager);\n    liveStreamDetector.onLiveChanged.subscribe((sender, args: LiveStreamDetectorEventArgs) => {\n      live = args.live;\n      updateLiveState();\n    });\n    liveStreamDetector.detect(); // Initial detection\n\n    let playbackTimeHandler = () => {\n      if (!live && player.getDuration() !== Infinity) {\n        this.setTime(PlayerUtils.getCurrentTimeRelativeToSeekableRange(player), player.getDuration());\n      }\n\n      // To avoid 'jumping' in the UI by varying label sizes due to non-monospaced fonts,\n      // we gradually increase the min-width with the content to reach a stable size.\n      let width = this.getDomElement().width();\n      if (width > minWidth) {\n        minWidth = width;\n        this.getDomElement().css({\n          'min-width': minWidth + 'px',\n        });\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.TimeChanged, playbackTimeHandler);\n    player.on(player.exports.PlayerEvent.Seeked, playbackTimeHandler);\n\n    player.on(player.exports.PlayerEvent.TimeShift, updateLiveTimeshiftState);\n    player.on(player.exports.PlayerEvent.TimeShifted, updateLiveTimeshiftState);\n    player.on(player.exports.PlayerEvent.Playing, updateLiveTimeshiftState);\n    player.on(player.exports.PlayerEvent.Paused, updateLiveTimeshiftState);\n\n    let init = () => {\n      // Reset min-width when a new source is ready (especially for switching VOD/Live modes where the label content\n      // changes)\n      minWidth = 0;\n      this.getDomElement().css({\n        'min-width': null,\n      });\n\n      // Set time format depending on source duration\n      this.timeFormat = Math.abs(player.isLive() ? player.getMaxTimeShift() : player.getDuration()) >= 3600 ?\n        StringUtils.FORMAT_HHMMSS : StringUtils.FORMAT_MMSS;\n\n      // Update time after the format has been set\n      playbackTimeHandler();\n    };\n    uimanager.getConfig().events.onUpdated.subscribe(init);\n\n    init();\n  }\n\n  /**\n   * Sets the current playback time and total duration.\n   * @param playbackSeconds the current playback time in seconds\n   * @param durationSeconds the total duration in seconds\n   */\n  setTime(playbackSeconds: number, durationSeconds: number) {\n    let currentTime = StringUtils.secondsToTime(playbackSeconds, this.timeFormat);\n    let totalTime = StringUtils.secondsToTime(durationSeconds, this.timeFormat);\n\n    switch ((<PlaybackTimeLabelConfig>this.config).timeLabelMode) {\n      case PlaybackTimeLabelMode.CurrentTime:\n        this.setText(`${currentTime}`);\n        break;\n      case PlaybackTimeLabelMode.TotalTime:\n        this.setText(`${totalTime}`);\n        break;\n      case PlaybackTimeLabelMode.CurrentAndTotalTime:\n        this.setText(`${currentTime} / ${totalTime}`);\n        break;\n      case PlaybackTimeLabelMode.RemainingTime:\n        let remainingTime = StringUtils.secondsToTime(durationSeconds - playbackSeconds, this.timeFormat);\n        this.setText(`${remainingTime}`);\n        break;\n    }\n  }\n\n  /**\n   * Sets the current time format\n   * @param timeFormat the time format\n   */\n  protected setTimeFormat(timeFormat: string): void {\n    this.timeFormat = timeFormat;\n  }\n}\n","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport {PlayerUtils} from '../playerutils';\nimport { PlayerAPI, WarningEvent } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles between playback and pause.\n */\nexport class PlaybackToggleButton extends ToggleButton<ToggleButtonConfig> {\n\n  private static readonly CLASS_STOPTOGGLE = 'stoptoggle';\n  protected isPlayInitiated: boolean;\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-playbacktogglebutton',\n      text: i18n.getLocalizer('playPause'),\n    }, this.config);\n\n    this.isPlayInitiated = false;\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager, handleClickEvent: boolean = true): void {\n    super.configure(player, uimanager);\n\n    let isSeeking = false;\n\n    // Handler to update button state based on player state\n    let playbackStateHandler = () => {\n      // If the UI is currently seeking, playback is temporarily stopped but the buttons should\n      // not reflect that and stay as-is (e.g indicate playback while seeking).\n      if (isSeeking) {\n        return;\n      }\n\n      if (player.isPlaying() || this.isPlayInitiated) {\n        this.on();\n      } else {\n        this.off();\n      }\n    };\n\n    // Call handler upon these events\n    player.on(player.exports.PlayerEvent.Play, (e) => {\n      this.isPlayInitiated = true;\n      playbackStateHandler();\n    });\n\n    player.on(player.exports.PlayerEvent.Paused, (e) => {\n      this.isPlayInitiated = false;\n      playbackStateHandler();\n    });\n\n    player.on(player.exports.PlayerEvent.Playing, (e) => {\n      this.isPlayInitiated = false;\n      playbackStateHandler();\n    });\n    // after unloading + loading a new source, the player might be in a different playing state (from playing into stopped)\n    player.on(player.exports.PlayerEvent.SourceLoaded, playbackStateHandler);\n    uimanager.getConfig().events.onUpdated.subscribe(playbackStateHandler);\n    player.on(player.exports.PlayerEvent.SourceUnloaded, playbackStateHandler);\n    // when playback finishes, player turns to paused mode\n    player.on(player.exports.PlayerEvent.PlaybackFinished, playbackStateHandler);\n    player.on(player.exports.PlayerEvent.CastStarted, playbackStateHandler);\n\n    // When a playback attempt is rejected with warning 5008, we switch the button state back to off\n    // This is required for blocked autoplay, because there is no Paused event in such case\n    player.on(player.exports.PlayerEvent.Warning, (event: WarningEvent) => {\n      if (event.code === player.exports.WarningCode.PLAYBACK_COULD_NOT_BE_STARTED) {\n        this.isPlayInitiated = false;\n        this.off();\n      }\n    });\n\n    const updateLiveState = () => {\n      const showStopToggle = player.isLive() && !PlayerUtils.isTimeShiftAvailable(player);\n\n      if (showStopToggle) {\n        this.getDomElement().addClass(this.prefixCss(PlaybackToggleButton.CLASS_STOPTOGGLE));\n      } else {\n        this.getDomElement().removeClass(this.prefixCss(PlaybackToggleButton.CLASS_STOPTOGGLE));\n      }\n    };\n\n    // Detect absence of timeshifting on live streams and add tagging class to convert button icons to play/stop\n    let timeShiftDetector = new PlayerUtils.TimeShiftAvailabilityDetector(player);\n    let liveStreamDetector = new PlayerUtils.LiveStreamDetector(player, uimanager);\n\n    timeShiftDetector.onTimeShiftAvailabilityChanged.subscribe(() => updateLiveState());\n    liveStreamDetector.onLiveChanged.subscribe(() => updateLiveState());\n\n    timeShiftDetector.detect(); // Initial detection\n    liveStreamDetector.detect();\n\n    if (handleClickEvent) {\n      // Control player by button events\n      // When a button event triggers a player API call, events are fired which in turn call the event handler\n      // above that updated the button state.\n      this.onClick.subscribe(() => {\n        if (player.isPlaying() || this.isPlayInitiated) {\n          player.pause('ui');\n        } else {\n          player.play('ui');\n        }\n      });\n    }\n\n    // Track UI seeking status\n    uimanager.onSeek.subscribe(() => {\n      isSeeking = true;\n    });\n    uimanager.onSeeked.subscribe(() => {\n      isSeeking = false;\n    });\n\n    // Startup init\n    playbackStateHandler();\n  }\n}\n","import {Container, ContainerConfig} from './container';\nimport {HugePlaybackToggleButton} from './hugeplaybacktogglebutton';\n\n/**\n * Overlays the player and displays error messages.\n */\nexport class PlaybackToggleOverlay extends Container<ContainerConfig> {\n\n  private playbackToggleButton: HugePlaybackToggleButton;\n\n  constructor(config: ContainerConfig = {}) {\n    super(config);\n\n    this.playbackToggleButton = new HugePlaybackToggleButton();\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-playbacktoggle-overlay',\n      components: [this.playbackToggleButton],\n    }, this.config);\n  }\n}","import {ContainerConfig, Container} from './container';\nimport {Component, ComponentConfig} from './component';\nimport {DOM} from '../dom';\nimport {UIInstanceManager} from '../uimanager';\nimport {StringUtils} from '../stringutils';\nimport {HugeReplayButton} from './hugereplaybutton';\nimport { UIRecommendationConfig } from '../uiconfig';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * Overlays the player and displays recommended videos.\n */\nexport class RecommendationOverlay extends Container<ContainerConfig> {\n\n  private replayButton: HugeReplayButton;\n\n  constructor(config: ContainerConfig = {}) {\n    super(config);\n\n    this.replayButton = new HugeReplayButton();\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-recommendation-overlay',\n      hidden: true,\n      components: [this.replayButton],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let clearRecommendations = () => {\n      for (let component of this.getComponents().slice()) {\n        if (component instanceof RecommendationItem) {\n          this.removeComponent(component);\n        }\n      }\n      this.updateComponents();\n      this.getDomElement().removeClass(this.prefixCss('recommendations'));\n    };\n\n    let setupRecommendations = () => {\n      clearRecommendations();\n\n      const recommendations = uimanager.getConfig().recommendations;\n\n      if (recommendations.length > 0) {\n        let index = 1;\n        for (let item of recommendations) {\n          this.addComponent(new RecommendationItem({\n            itemConfig: item,\n            cssClasses: ['recommendation-item-' + (index++)],\n          }));\n        }\n        this.updateComponents(); // create container DOM elements\n\n        this.getDomElement().addClass(this.prefixCss('recommendations'));\n      }\n    };\n\n    uimanager.getConfig().events.onUpdated.subscribe(setupRecommendations);\n    // Remove recommendations and hide overlay when source is unloaded\n    player.on(player.exports.PlayerEvent.SourceUnloaded, () => {\n      clearRecommendations();\n      this.hide();\n    });\n    // Display recommendations when playback has finished\n    player.on(player.exports.PlayerEvent.PlaybackFinished, () => {\n      this.show();\n    });\n    // Hide recommendations when playback starts, e.g. a restart\n    player.on(player.exports.PlayerEvent.Play, () => {\n      this.hide();\n    });\n\n    // Init on startup\n    setupRecommendations();\n  }\n}\n\n/**\n * Configuration interface for the {@link RecommendationItem}\n */\ninterface RecommendationItemConfig extends ComponentConfig {\n  itemConfig: UIRecommendationConfig;\n}\n\n/**\n * An item of the {@link RecommendationOverlay}. Used only internally in {@link RecommendationOverlay}.\n */\nclass RecommendationItem extends Component<RecommendationItemConfig> {\n\n  constructor(config: RecommendationItemConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-recommendation-item',\n      itemConfig: null, // this must be passed in from outside\n    }, this.config);\n  }\n\n  protected toDomElement(): DOM {\n    let config = this.config.itemConfig;\n\n    let itemElement = new DOM('a', {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n      'href': config.url,\n    }).css({ 'background-image': `url(${config.thumbnail})` });\n\n    let bgElement = new DOM('div', {\n      'class': this.prefixCss('background'),\n    });\n    itemElement.append(bgElement);\n\n    let titleElement = new DOM('span', {\n      'class': this.prefixCss('title'),\n    }).append(new DOM('span', {\n      'class': this.prefixCss('innertitle'),\n    }).html(config.title));\n    itemElement.append(titleElement);\n\n    let timeElement = new DOM('span', {\n      'class': this.prefixCss('duration'),\n    }).append(new DOM('span', {\n      'class': this.prefixCss('innerduration'),\n    }).html(config.duration ? StringUtils.secondsToTime(config.duration) : ''));\n    itemElement.append(timeElement);\n\n    return itemElement;\n  }\n}","import {Component, ComponentConfig} from './component';\nimport {DOM} from '../dom';\nimport {Event, EventDispatcher, NoArgs} from '../eventdispatcher';\nimport {SeekBarLabel} from './seekbarlabel';\nimport {UIInstanceManager, SeekPreviewArgs} from '../uimanager';\nimport {Timeout} from '../timeout';\nimport {PlayerUtils} from '../playerutils';\nimport TimeShiftAvailabilityChangedArgs = PlayerUtils.TimeShiftAvailabilityChangedArgs;\nimport LiveStreamDetectorEventArgs = PlayerUtils.LiveStreamDetectorEventArgs;\nimport { TimelineMarker } from '../uiconfig';\nimport { PlayerAPI, PlayerEventBase } from 'bitmovin-player';\n\n/**\n * Configuration interface for the {@link SeekBar} component.\n */\nexport interface SeekBarConfig extends ComponentConfig {\n  /**\n   * The label above the seek position.\n   */\n  label?: SeekBarLabel;\n  /**\n   * Bar will be vertical instead of horizontal if set to true.\n   */\n  vertical?: boolean;\n  /**\n   * The interval in milliseconds in which the playback position on the seek bar will be updated. The shorter the\n   * interval, the smoother it looks and the more resource intense it is. The update interval will be kept as steady\n   * as possible to avoid jitter.\n   * Set to -1 to disable smooth updating and update it on player TimeChanged events instead.\n   * Default: 50 (50ms = 20fps).\n   */\n  smoothPlaybackPositionUpdateIntervalMs?: number;\n}\n\n/**\n * Event argument interface for a seek preview event.\n */\nexport interface SeekPreviewEventArgs extends SeekPreviewArgs {\n  /**\n   * Tells if the seek preview event comes from a scrubbing.\n   */\n  scrubbing: boolean;\n}\n\nexport interface SeekBarMarker {\n  marker: TimelineMarker;\n  position: number;\n  duration?: number;\n}\n\n/**\n * A seek bar to seek within the player's media. It displays the current playback position, amount of buffed data, seek\n * target, and keeps status about an ongoing seek.\n *\n * The seek bar displays different 'bars':\n *  - the playback position, i.e. the position in the media at which the player current playback pointer is positioned\n *  - the buffer position, which usually is the playback position plus the time span that is already buffered ahead\n *  - the seek position, used to preview to where in the timeline a seek will jump to\n */\nexport class SeekBar extends Component<SeekBarConfig> {\n\n  public static readonly SMOOTH_PLAYBACK_POSITION_UPDATE_DISABLED = -1;\n\n  /**\n   * The CSS class that is added to the DOM element while the seek bar is in 'seeking' state.\n   */\n  private static readonly CLASS_SEEKING = 'seeking';\n\n  private seekBar: DOM;\n  private seekBarPlaybackPosition: DOM;\n  private seekBarPlaybackPositionMarker: DOM;\n  private seekBarBufferPosition: DOM;\n  private seekBarSeekPosition: DOM;\n  private seekBarBackdrop: DOM;\n  private seekBarMarkersContainer: DOM;\n\n  private label: SeekBarLabel;\n\n  private timelineMarkers: SeekBarMarker[];\n\n  private player: PlayerAPI;\n\n  /**\n   * Buffer of the the current playback position. The position must be buffered in case the element\n   * needs to be refreshed with {@link #refreshPlaybackPosition}.\n   * @type {number}\n   */\n  private playbackPositionPercentage = 0;\n\n  private smoothPlaybackPositionUpdater: Timeout;\n  private pausedTimeshiftUpdater: Timeout;\n\n  // https://hacks.mozilla.org/2013/04/detecting-touch-its-the-why-not-the-how/\n  private touchSupported = ('ontouchstart' in window);\n\n  private seekBarEvents = {\n    /**\n     * Fired when a scrubbing seek operation is started.\n     */\n    onSeek: new EventDispatcher<SeekBar, NoArgs>(),\n    /**\n     * Fired during a scrubbing seek to indicate that the seek preview (i.e. the video frame) should be updated.\n     */\n    onSeekPreview: new EventDispatcher<SeekBar, SeekPreviewEventArgs>(),\n    /**\n     * Fired when a scrubbing seek has finished or when a direct seek is issued.\n     */\n    onSeeked: new EventDispatcher<SeekBar, number>(),\n  };\n\n  constructor(config: SeekBarConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-seekbar',\n      vertical: false,\n      smoothPlaybackPositionUpdateIntervalMs: 50,\n    }, this.config);\n\n    this.label = this.config.label;\n    this.timelineMarkers = [];\n  }\n\n  initialize(): void {\n    super.initialize();\n\n    if (this.hasLabel()) {\n      this.getLabel().initialize();\n    }\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager, configureSeek: boolean = true): void {\n    super.configure(player, uimanager);\n\n    this.player = player;\n\n    // Apply scaling transform to the backdrop bar to have all bars rendered similarly\n    // (the call must be up here to be executed for the volume slider as well)\n    this.setPosition(this.seekBarBackdrop, 100);\n\n    if (!configureSeek) {\n      // The configureSeek flag can be used by subclasses to disable configuration as seek bar. E.g. the volume\n      // slider is reusing this component but adds its own functionality, and does not need the seek functionality.\n      // This is actually a hack, the proper solution would be for both seek bar and volume sliders to extend\n      // a common base slider component and implement their functionality there.\n      return;\n    }\n\n    let isPlaying = false;\n    let isUserSeeking = false;\n    let isPlayerSeeking = false;\n\n    // Update playback and buffer positions\n    let playbackPositionHandler = (event: PlayerEventBase = null, forceUpdate: boolean = false) => {\n      if (isUserSeeking) {\n        // We caught a seek preview seek, do not update the seekbar\n        return;\n      }\n\n      if (player.isLive()) {\n        if (player.getMaxTimeShift() === 0) {\n          // This case must be explicitly handled to avoid division by zero\n          this.setPlaybackPosition(100);\n        } else {\n          let playbackPositionPercentage = 100 - (100 / player.getMaxTimeShift() * player.getTimeShift());\n          this.setPlaybackPosition(playbackPositionPercentage);\n        }\n\n        // Always show full buffer for live streams\n        this.setBufferPosition(100);\n      } else {\n        let playbackPositionPercentage = 100 / player.getDuration() * this.getRelativeCurrentTime();\n\n        let videoBufferLength = player.getVideoBufferLength();\n        let audioBufferLength = player.getAudioBufferLength();\n        // Calculate the buffer length which is the smaller length of the audio and video buffers. If one of these\n        // buffers is not available, we set it's value to MAX_VALUE to make sure that the other real value is taken\n        // as the buffer length.\n        let bufferLength = Math.min(\n          videoBufferLength != null ? videoBufferLength : Number.MAX_VALUE,\n          audioBufferLength != null ? audioBufferLength : Number.MAX_VALUE);\n        // If both buffer lengths are missing, we set the buffer length to zero\n        if (bufferLength === Number.MAX_VALUE) {\n          bufferLength = 0;\n        }\n\n        let bufferPercentage = 100 / player.getDuration() * bufferLength;\n\n        // Update playback position only in paused state or in the initial startup state where player is neither\n        // paused nor playing. Playback updates are handled in the Timeout below.\n        if (this.config.smoothPlaybackPositionUpdateIntervalMs === SeekBar.SMOOTH_PLAYBACK_POSITION_UPDATE_DISABLED\n          || forceUpdate || player.isPaused() || (player.isPaused() === player.isPlaying())) {\n          this.setPlaybackPosition(playbackPositionPercentage);\n        }\n\n        this.setBufferPosition(playbackPositionPercentage + bufferPercentage);\n      }\n    };\n\n    // Update seekbar upon these events\n    // init playback position when the player is ready\n    player.on(player.exports.PlayerEvent.Ready, playbackPositionHandler);\n    // update playback position when it changes\n    player.on(player.exports.PlayerEvent.TimeChanged, playbackPositionHandler);\n    // update bufferlevel when buffering is complete\n    player.on(player.exports.PlayerEvent.StallEnded, playbackPositionHandler);\n    // update playback position when a seek has finished\n    player.on(player.exports.PlayerEvent.Seeked, playbackPositionHandler);\n    // update playback position when a timeshift has finished\n    player.on(player.exports.PlayerEvent.TimeShifted, playbackPositionHandler);\n    // update bufferlevel when a segment has been downloaded\n    player.on(player.exports.PlayerEvent.SegmentRequestFinished, playbackPositionHandler);\n\n    this.configureLivePausedTimeshiftUpdater(player, uimanager, playbackPositionHandler);\n\n    // Seek handling\n    let onPlayerSeek = () => {\n      isPlayerSeeking = true;\n      this.setSeeking(true);\n    };\n\n    let onPlayerSeeked = () => {\n      isPlayerSeeking = false;\n      this.setSeeking(false);\n    };\n\n    let restorePlayingState = function() {\n      // Continue playback after seek if player was playing when seek started\n      if (isPlaying) {\n        // use the same issuer here as in the pause on seek\n        player.play('ui-seek');\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.Seek, onPlayerSeek);\n    player.on(player.exports.PlayerEvent.Seeked, onPlayerSeeked);\n    player.on(player.exports.PlayerEvent.TimeShift, onPlayerSeek);\n    player.on(player.exports.PlayerEvent.TimeShifted, onPlayerSeeked);\n\n    this.onSeek.subscribe((sender) => {\n      isUserSeeking = true; // track seeking status so we can catch events from seek preview seeks\n\n      // Notify UI manager of started seek\n      uimanager.onSeek.dispatch(sender);\n\n      // Save current playback state before performing the seek\n      if (!isPlayerSeeking) {\n        isPlaying = player.isPlaying();\n\n        // Pause playback while seeking\n        if (isPlaying) {\n          // use a different issuer here, as play/pause on seek is not \"really\" triggerd by the user\n          player.pause('ui-seek');\n        }\n      }\n\n    });\n    this.onSeekPreview.subscribe((sender: SeekBar, args: SeekPreviewEventArgs) => {\n      // Notify UI manager of seek preview\n      uimanager.onSeekPreview.dispatch(sender, args);\n    });\n\n    // Rate-limited scrubbing seek\n    this.onSeekPreview.subscribeRateLimited(this.seekWhileScrubbing, 200);\n    this.onSeeked.subscribe((sender, percentage) => {\n      isUserSeeking = false;\n\n      // Do the seek\n      this.seek(percentage);\n\n      // Notify UI manager of finished seek\n      uimanager.onSeeked.dispatch(sender);\n\n      // Continue playback after seek if player was playing when seek started\n      restorePlayingState();\n    });\n\n    if (this.hasLabel()) {\n      // Configure a seekbar label that is internal to the seekbar)\n      this.getLabel().configure(player, uimanager);\n    }\n\n    // Hide seekbar for live sources without timeshift\n    let isLive = false;\n    let hasTimeShift = false;\n    let switchVisibility = (isLive: boolean, hasTimeShift: boolean) => {\n      if (isLive && !hasTimeShift) {\n        this.hide();\n      } else {\n        this.show();\n      }\n      playbackPositionHandler(null, true);\n      this.refreshPlaybackPosition();\n    };\n    let liveStreamDetector = new PlayerUtils.LiveStreamDetector(player, uimanager);\n    liveStreamDetector.onLiveChanged.subscribe((sender, args: LiveStreamDetectorEventArgs) => {\n      isLive = args.live;\n      if (isLive && this.smoothPlaybackPositionUpdater != null) {\n        this.smoothPlaybackPositionUpdater.clear();\n      }\n      switchVisibility(isLive, hasTimeShift);\n    });\n    let timeShiftDetector = new PlayerUtils.TimeShiftAvailabilityDetector(player);\n    timeShiftDetector.onTimeShiftAvailabilityChanged.subscribe((sender, args: TimeShiftAvailabilityChangedArgs) => {\n        hasTimeShift = args.timeShiftAvailable;\n        switchVisibility(isLive, hasTimeShift);\n      },\n    );\n    // Initial detection\n    liveStreamDetector.detect();\n    timeShiftDetector.detect();\n\n    // Refresh the playback position when the player resized or the UI is configured. The playback position marker\n    // is positioned absolutely and must therefore be updated when the size of the seekbar changes.\n    player.on(player.exports.PlayerEvent.PlayerResized, () => {\n      this.refreshPlaybackPosition();\n    });\n    // Additionally, when this code is called, the seekbar is not part of the UI yet and therefore does not have a size,\n    // resulting in a wrong initial position of the marker. Refreshing it once the UI is configured solved this issue.\n    uimanager.onConfigured.subscribe(() => {\n      this.refreshPlaybackPosition();\n    });\n    // It can also happen when a new source is loaded\n    player.on(player.exports.PlayerEvent.SourceLoaded, () => {\n      this.refreshPlaybackPosition();\n    });\n    // Add markers when a source is loaded or update when a marker is added or removed\n    uimanager.getConfig().events.onUpdated.subscribe(() => {\n      playbackPositionHandler();\n    });\n\n    // Initialize seekbar\n    playbackPositionHandler(); // Set the playback position\n    this.setBufferPosition(0);\n    this.setSeekPosition(0);\n    if (this.config.smoothPlaybackPositionUpdateIntervalMs !== SeekBar.SMOOTH_PLAYBACK_POSITION_UPDATE_DISABLED) {\n      this.configureSmoothPlaybackPositionUpdater(player, uimanager);\n    }\n    this.configureMarkers(player, uimanager);\n  }\n\n  private seekWhileScrubbing = (sender: SeekBar, args: SeekPreviewEventArgs) => {\n    if (args.scrubbing) {\n      this.seek(args.position);\n    }\n  };\n\n  private seek = (percentage: number) => {\n    if (this.player.isLive()) {\n      const maxTimeShift = this.player.getMaxTimeShift();\n      this.player.timeShift(maxTimeShift - (maxTimeShift * (percentage / 100)), 'ui');\n    } else {\n      const seekableRangeStart = PlayerUtils.getSeekableRangeStart(this.player, 0);\n      const relativeSeekTarget = this.player.getDuration() * (percentage / 100);\n      const absoluteSeekTarget = relativeSeekTarget + seekableRangeStart;\n      this.player.seek(absoluteSeekTarget, 'ui');\n    }\n  };\n\n  /**\n   * Update seekbar while a live stream with DVR window is paused.\n   * The playback position stays still and the position indicator visually moves towards the back.\n   */\n  private configureLivePausedTimeshiftUpdater(\n    player: PlayerAPI,\n    uimanager: UIInstanceManager,\n    playbackPositionHandler: () => void,\n  ): void {\n    // Regularly update the playback position while the timeout is active\n    this.pausedTimeshiftUpdater = new Timeout(1000, playbackPositionHandler, true);\n\n    // Start updater when a live stream with timeshift window is paused\n    player.on(player.exports.PlayerEvent.Paused, () => {\n      if (player.isLive() && player.getMaxTimeShift() < 0) {\n        this.pausedTimeshiftUpdater.start();\n      }\n    });\n\n    // Stop updater when playback continues (no matter if the updater was started before)\n    player.on(player.exports.PlayerEvent.Play, () => this.pausedTimeshiftUpdater.clear());\n  }\n\n  private configureSmoothPlaybackPositionUpdater(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    /*\n     * Playback position update\n     *\n     * We do not update the position directly from the TimeChanged event, because it arrives very jittery and\n     * results in a jittery position indicator since the CSS transition time is statically set.\n     * To work around this issue, we maintain a local playback position that is updated in a stable regular interval\n     * and kept in sync with the player.\n     */\n    let currentTimeSeekBar = 0;\n    let currentTimePlayer = 0;\n    let updateIntervalMs = 50;\n    let currentTimeUpdateDeltaSecs = updateIntervalMs / 1000;\n\n    this.smoothPlaybackPositionUpdater = new Timeout(updateIntervalMs, () => {\n      currentTimeSeekBar += currentTimeUpdateDeltaSecs;\n\n      try {\n        currentTimePlayer = this.getRelativeCurrentTime();\n      } catch (error) {\n        // Detect if the player has been destroyed and stop updating if so\n        if (error instanceof player.exports.PlayerAPINotAvailableError) {\n          this.smoothPlaybackPositionUpdater.clear();\n        }\n\n        // If the current time cannot be read it makes no sense to continue\n        return;\n      }\n\n      // Sync currentTime of seekbar to player\n      let currentTimeDelta = currentTimeSeekBar - currentTimePlayer;\n      // If the delta is larger that 2 secs, directly jump the seekbar to the\n      // player time instead of smoothly fast forwarding/rewinding.\n      if (Math.abs(currentTimeDelta) > 2) {\n        currentTimeSeekBar = currentTimePlayer;\n      }\n      // If currentTimeDelta is negative and below the adjustment threshold,\n      // the player is ahead of the seekbar and we 'fast forward' the seekbar\n      else if (currentTimeDelta <= -currentTimeUpdateDeltaSecs) {\n        currentTimeSeekBar += currentTimeUpdateDeltaSecs;\n      }\n      // If currentTimeDelta is positive and above the adjustment threshold,\n      // the player is behind the seekbar and we 'rewind' the seekbar\n      else if (currentTimeDelta >= currentTimeUpdateDeltaSecs) {\n        currentTimeSeekBar -= currentTimeUpdateDeltaSecs;\n      }\n\n      let playbackPositionPercentage = 100 / player.getDuration() * currentTimeSeekBar;\n      this.setPlaybackPosition(playbackPositionPercentage);\n    }, true);\n\n    let startSmoothPlaybackPositionUpdater = () => {\n      if (!player.isLive()) {\n        currentTimeSeekBar = this.getRelativeCurrentTime();\n        this.smoothPlaybackPositionUpdater.start();\n      }\n    };\n\n    let stopSmoothPlaybackPositionUpdater = () => {\n      this.smoothPlaybackPositionUpdater.clear();\n    };\n\n    player.on(player.exports.PlayerEvent.Play, startSmoothPlaybackPositionUpdater);\n    player.on(player.exports.PlayerEvent.Playing, startSmoothPlaybackPositionUpdater);\n    player.on(player.exports.PlayerEvent.Paused, stopSmoothPlaybackPositionUpdater);\n    player.on(player.exports.PlayerEvent.PlaybackFinished, stopSmoothPlaybackPositionUpdater);\n    player.on(player.exports.PlayerEvent.Seeked, () => {\n      currentTimeSeekBar = this.getRelativeCurrentTime();\n    });\n    player.on(player.exports.PlayerEvent.SourceUnloaded, stopSmoothPlaybackPositionUpdater);\n\n    if (player.isPlaying()) {\n      startSmoothPlaybackPositionUpdater();\n    }\n  }\n\n  private getRelativeCurrentTime(): number {\n    return PlayerUtils.getCurrentTimeRelativeToSeekableRange(this.player);\n  }\n\n  private configureMarkers(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    let clearMarkers = () => {\n      this.timelineMarkers = [];\n      this.updateMarkers();\n    };\n\n    let setupMarkers = () => {\n      clearMarkers();\n\n      const duration = player.getDuration();\n\n      if (duration === Infinity) {\n        // Don't generate timeline markers if we don't yet have a duration\n        // The duration check is for buggy platforms where the duration is not available instantly (Chrome on Android 4.3)\n        return;\n      }\n\n      for (let marker of uimanager.getConfig().metadata.markers) {\n        const markerPosition = 100 / duration * marker.time; // convert absolute time to percentage\n        const markerDuration = 100 / duration * marker.duration;\n        this.timelineMarkers.push({ marker, position: markerPosition, duration: markerDuration });\n      }\n\n      // Populate the timeline with the markers\n      this.updateMarkers();\n    };\n\n    // Remove markers when unloaded\n    player.on(player.exports.PlayerEvent.SourceUnloaded, clearMarkers);\n    // Update markers when the size of the seekbar changes\n    player.on(player.exports.PlayerEvent.PlayerResized, () => this.updateMarkers());\n    uimanager.getConfig().events.onUpdated.subscribe(setupMarkers);\n    uimanager.onRelease.subscribe(() => uimanager.getConfig().events.onUpdated.unsubscribe(setupMarkers));\n\n    // Init markers at startup\n    setupMarkers();\n  }\n\n  release(): void {\n    super.release();\n\n    if (this.smoothPlaybackPositionUpdater) { // object must not necessarily exist, e.g. in volume slider subclass\n      this.smoothPlaybackPositionUpdater.clear();\n    }\n\n    if (this.pausedTimeshiftUpdater) {\n      this.pausedTimeshiftUpdater.clear();\n    }\n\n    this.onSeekPreview.unsubscribe(this.seekWhileScrubbing);\n  }\n\n  protected toDomElement(): DOM {\n    if (this.config.vertical) {\n      this.config.cssClasses.push('vertical');\n    }\n\n    let seekBarContainer = new DOM('div', {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n    });\n\n    let seekBar = new DOM('div', {\n      'class': this.prefixCss('seekbar'),\n    });\n    this.seekBar = seekBar;\n\n    // Indicator that shows the buffer fill level\n    let seekBarBufferLevel = new DOM('div', {\n      'class': this.prefixCss('seekbar-bufferlevel'),\n    });\n    this.seekBarBufferPosition = seekBarBufferLevel;\n\n    // Indicator that shows the current playback position\n    let seekBarPlaybackPosition = new DOM('div', {\n      'class': this.prefixCss('seekbar-playbackposition'),\n    });\n    this.seekBarPlaybackPosition = seekBarPlaybackPosition;\n\n    // A marker of the current playback position, e.g. a dot or line\n    let seekBarPlaybackPositionMarker = new DOM('div', {\n      'class': this.prefixCss('seekbar-playbackposition-marker'),\n    });\n    this.seekBarPlaybackPositionMarker = seekBarPlaybackPositionMarker;\n\n    // Indicator that show where a seek will go to\n    let seekBarSeekPosition = new DOM('div', {\n      'class': this.prefixCss('seekbar-seekposition'),\n    });\n    this.seekBarSeekPosition = seekBarSeekPosition;\n\n    // Indicator that shows the full seekbar\n    let seekBarBackdrop = new DOM('div', {\n      'class': this.prefixCss('seekbar-backdrop'),\n    });\n    this.seekBarBackdrop = seekBarBackdrop;\n\n    let seekBarChapterMarkersContainer = new DOM('div', {\n      'class': this.prefixCss('seekbar-markers'),\n    });\n    this.seekBarMarkersContainer = seekBarChapterMarkersContainer;\n\n    seekBar.append(this.seekBarBackdrop, this.seekBarBufferPosition, this.seekBarSeekPosition,\n      this.seekBarPlaybackPosition, this.seekBarMarkersContainer, this.seekBarPlaybackPositionMarker);\n\n    let seeking = false;\n\n    // Define handler functions so we can attach/remove them later\n    let mouseTouchMoveHandler = (e: MouseEvent | TouchEvent) => {\n      e.preventDefault();\n      // Avoid propagation to VR handler\n      e.stopPropagation();\n\n      let targetPercentage = 100 * this.getOffset(e);\n      this.setSeekPosition(targetPercentage);\n      this.setPlaybackPosition(targetPercentage);\n      this.onSeekPreviewEvent(targetPercentage, true);\n    };\n    let mouseTouchUpHandler = (e: MouseEvent | TouchEvent) => {\n      e.preventDefault();\n\n      // Remove handlers, seek operation is finished\n      new DOM(document).off('touchmove mousemove', mouseTouchMoveHandler);\n      new DOM(document).off('touchend mouseup', mouseTouchUpHandler);\n\n      let targetPercentage = 100 * this.getOffset(e);\n      let snappedChapter = this.getMarkerAtPosition(targetPercentage);\n\n      this.setSeeking(false);\n      seeking = false;\n\n      // Fire seeked event\n      this.onSeekedEvent(snappedChapter ? snappedChapter.position : targetPercentage);\n    };\n\n    // A seek always start with a touchstart or mousedown directly on the seekbar.\n    // To track a mouse seek also outside the seekbar (for touch events this works automatically),\n    // so the user does not need to take care that the mouse always stays on the seekbar, we attach the mousemove\n    // and mouseup handlers to the whole document. A seek is triggered when the user lifts the mouse key.\n    // A seek mouse gesture is thus basically a click with a long time frame between down and up events.\n    seekBar.on('touchstart mousedown', (e: MouseEvent | TouchEvent) => {\n      let isTouchEvent = this.touchSupported && e instanceof TouchEvent;\n\n      // Prevent selection of DOM elements (also prevents mousedown if current event is touchstart)\n      e.preventDefault();\n      // Avoid propagation to VR handler\n      e.stopPropagation();\n\n      this.setSeeking(true); // Set seeking class on DOM element\n      seeking = true; // Set seek tracking flag\n\n      // Fire seeked event\n      this.onSeekEvent();\n\n      // Add handler to track the seek operation over the whole document\n      new DOM(document).on(isTouchEvent ? 'touchmove' : 'mousemove', mouseTouchMoveHandler);\n      new DOM(document).on(isTouchEvent ? 'touchend' : 'mouseup', mouseTouchUpHandler);\n    });\n\n    // Display seek target indicator when mouse hovers or finger slides over seekbar\n    seekBar.on('touchmove mousemove', (e: MouseEvent | TouchEvent) => {\n      e.preventDefault();\n\n      if (seeking) {\n        // During a seek (when mouse is down or touch move active), we need to stop propagation to avoid\n        // the VR viewport reacting to the moves.\n        e.stopPropagation();\n        // Because the stopped propagation inhibits the event on the document, we need to call it from here\n        mouseTouchMoveHandler(e);\n      }\n\n      let position = 100 * this.getOffset(e);\n      this.setSeekPosition(position);\n      this.onSeekPreviewEvent(position, false);\n\n      if (this.hasLabel() && this.getLabel().isHidden()) {\n        this.getLabel().show();\n      }\n    });\n\n    // Hide seek target indicator when mouse or finger leaves seekbar\n    seekBar.on('touchend mouseleave', (e: MouseEvent | TouchEvent) => {\n      e.preventDefault();\n\n      this.setSeekPosition(0);\n\n      if (this.hasLabel()) {\n        this.getLabel().hide();\n      }\n    });\n\n    seekBarContainer.append(seekBar);\n\n    if (this.label) {\n      seekBarContainer.append(this.label.getDomElement());\n    }\n\n    return seekBarContainer;\n  }\n\n  protected updateMarkers(): void {\n    this.seekBarMarkersContainer.empty();\n\n    const seekBarWidthPx = this.seekBar.width();\n\n    for (let marker of this.timelineMarkers) {\n      const markerClasses = ['seekbar-marker'].concat(marker.marker.cssClasses || [])\n        .map(cssClass => this.prefixCss(cssClass));\n\n      const cssProperties: {[propertyName: string]: string} = {\n        'width': marker.position + '%',\n      };\n\n      if (marker.duration > 0) {\n        const markerWidthPx = Math.round(seekBarWidthPx / 100 * marker.duration);\n        cssProperties['border-right-width'] = markerWidthPx + 'px';\n        cssProperties['margin-left'] = '0';\n      }\n\n      this.seekBarMarkersContainer.append(new DOM('div', {\n        'class': markerClasses.join(' '),\n        'data-marker-time': String(marker.marker.time),\n        'data-marker-title': String(marker.marker.title),\n      }).css(cssProperties));\n    }\n  }\n\n  protected getMarkerAtPosition(percentage: number): SeekBarMarker | null {\n    const snappingRange = 1;\n\n    if (this.timelineMarkers.length > 0) {\n      for (let marker of this.timelineMarkers) {\n        // Handle interval markers\n        if (marker.duration > 0\n          && percentage >= marker.position - snappingRange\n          && percentage <= marker.position + marker.duration + snappingRange) {\n          return marker;\n        }\n        // Handle position markers\n        else if (percentage >= marker.position - snappingRange\n          && percentage <= marker.position + snappingRange) {\n          return marker;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Gets the horizontal offset of a mouse/touch event point from the left edge of the seek bar.\n   * @param eventPageX the pageX coordinate of an event to calculate the offset from\n   * @returns {number} a number in the range of [0, 1], where 0 is the left edge and 1 is the right edge\n   */\n  private getHorizontalOffset(eventPageX: number): number {\n    let elementOffsetPx = this.seekBar.offset().left;\n    let widthPx = this.seekBar.width();\n    let offsetPx = eventPageX - elementOffsetPx;\n    let offset = 1 / widthPx * offsetPx;\n\n    return this.sanitizeOffset(offset);\n  }\n\n  /**\n   * Gets the vertical offset of a mouse/touch event point from the bottom edge of the seek bar.\n   * @param eventPageY the pageX coordinate of an event to calculate the offset from\n   * @returns {number} a number in the range of [0, 1], where 0 is the bottom edge and 1 is the top edge\n   */\n  private getVerticalOffset(eventPageY: number): number {\n    let elementOffsetPx = this.seekBar.offset().top;\n    let widthPx = this.seekBar.height();\n    let offsetPx = eventPageY - elementOffsetPx;\n    let offset = 1 / widthPx * offsetPx;\n\n    return 1 - this.sanitizeOffset(offset);\n  }\n\n  /**\n   * Gets the mouse or touch event offset for the current configuration (horizontal or vertical).\n   * @param e the event to calculate the offset from\n   * @returns {number} a number in the range of [0, 1]\n   * @see #getHorizontalOffset\n   * @see #getVerticalOffset\n   */\n  private getOffset(e: MouseEvent | TouchEvent): number {\n    if (this.touchSupported && e instanceof TouchEvent) {\n      if (this.config.vertical) {\n        return this.getVerticalOffset(e.type === 'touchend' ? e.changedTouches[0].pageY : e.touches[0].pageY);\n      } else {\n        return this.getHorizontalOffset(e.type === 'touchend' ? e.changedTouches[0].pageX : e.touches[0].pageX);\n      }\n    }\n    else if (e instanceof MouseEvent) {\n      if (this.config.vertical) {\n        return this.getVerticalOffset(e.pageY);\n      } else {\n        return this.getHorizontalOffset(e.pageX);\n      }\n    }\n    else {\n      if (console) {\n        console.warn('invalid event');\n      }\n      return 0;\n    }\n  }\n\n  /**\n   * Sanitizes the mouse offset to the range of [0, 1].\n   *\n   * When tracking the mouse outside the seek bar, the offset can be outside the desired range and this method\n   * limits it to the desired range. E.g. a mouse event left of the left edge of a seek bar yields an offset below\n   * zero, but to display the seek target on the seek bar, we need to limit it to zero.\n   *\n   * @param offset the offset to sanitize\n   * @returns {number} the sanitized offset.\n   */\n  private sanitizeOffset(offset: number) {\n    // Since we track mouse moves over the whole document, the target can be outside the seek range,\n    // and we need to limit it to the [0, 1] range.\n    if (offset < 0) {\n      offset = 0;\n    } else if (offset > 1) {\n      offset = 1;\n    }\n\n    return offset;\n  }\n\n  /**\n   * Sets the position of the playback position indicator.\n   * @param percent a number between 0 and 100 as returned by the player\n   */\n  setPlaybackPosition(percent: number) {\n    this.playbackPositionPercentage = percent;\n\n    // Set position of the bar\n    this.setPosition(this.seekBarPlaybackPosition, percent);\n\n    // Set position of the marker\n    let totalSize = (this.config.vertical ? (this.seekBar.height() - this.seekBarPlaybackPositionMarker.height()) : this.seekBar.width());\n    let px = (totalSize) / 100 * percent;\n    if (this.config.vertical) {\n      px = this.seekBar.height() - px - this.seekBarPlaybackPositionMarker.height();\n    }\n\n    let style = this.config.vertical ?\n      // -ms-transform required for IE9\n      // -webkit-transform required for Android 4.4 WebView\n      {\n        'transform': 'translateY(' + px + 'px)',\n        '-ms-transform': 'translateY(' + px + 'px)',\n        '-webkit-transform': 'translateY(' + px + 'px)',\n      } :\n      {\n        'transform': 'translateX(' + px + 'px)',\n        '-ms-transform': 'translateX(' + px + 'px)',\n        '-webkit-transform': 'translateX(' + px + 'px)',\n      };\n    this.seekBarPlaybackPositionMarker.css(style);\n  }\n\n  /**\n   * Refreshes the playback position. Can be used by subclasses to refresh the position when\n   * the size of the component changes.\n   */\n  protected refreshPlaybackPosition() {\n    this.setPlaybackPosition(this.playbackPositionPercentage);\n  }\n\n  /**\n   * Sets the position until which media is buffered.\n   * @param percent a number between 0 and 100\n   */\n  setBufferPosition(percent: number) {\n    this.setPosition(this.seekBarBufferPosition, percent);\n  }\n\n  /**\n   * Sets the position where a seek, if executed, would jump to.\n   * @param percent a number between 0 and 100\n   */\n  setSeekPosition(percent: number) {\n    this.setPosition(this.seekBarSeekPosition, percent);\n  }\n\n  /**\n   * Set the actual position (width or height) of a DOM element that represent a bar in the seek bar.\n   * @param element the element to set the position for\n   * @param percent a number between 0 and 100\n   */\n  private setPosition(element: DOM, percent: number) {\n    let scale = percent / 100;\n\n    // When the scale is exactly 1 or very near 1 (and the browser internally rounds it to 1), browsers seem to render\n    // the elements differently and the height gets slightly off, leading to mismatching heights when e.g. the buffer\n    // level bar has a width of 1 and the playback position bar has a width < 1. A jittering buffer level around 1\n    // leads to an even worse flickering effect.\n    // Various changes in CSS styling and DOM hierarchy did not solve the issue so the workaround is to avoid a scale\n    // of exactly 1.\n    if (scale >= 0.99999 && scale <= 1.00001) {\n      scale = 0.99999;\n    }\n\n    let style = this.config.vertical ?\n      // -ms-transform required for IE9\n      // -webkit-transform required for Android 4.4 WebView\n      {\n        'transform': 'scaleY(' + scale + ')',\n        '-ms-transform': 'scaleY(' + scale + ')',\n        '-webkit-transform': 'scaleY(' + scale + ')',\n      } :\n      {\n        'transform': 'scaleX(' + scale + ')',\n        '-ms-transform': 'scaleX(' + scale + ')',\n        '-webkit-transform': 'scaleX(' + scale + ')',\n      };\n    element.css(style);\n  }\n\n  /**\n   * Puts the seek bar into or out of seeking state by adding/removing a class to the DOM element. This can be used\n   * to adjust the styling while seeking.\n   *\n   * @param seeking should be true when entering seek state, false when exiting the seek state\n   */\n  setSeeking(seeking: boolean) {\n    if (seeking) {\n      this.getDomElement().addClass(this.prefixCss(SeekBar.CLASS_SEEKING));\n    } else {\n      this.getDomElement().removeClass(this.prefixCss(SeekBar.CLASS_SEEKING));\n    }\n  }\n\n  /**\n   * Checks if the seek bar is currently in the seek state.\n   * @returns {boolean} true if in seek state, else false\n   */\n  isSeeking(): boolean {\n    return this.getDomElement().hasClass(this.prefixCss(SeekBar.CLASS_SEEKING));\n  }\n\n  /**\n   * Checks if the seek bar has a {@link SeekBarLabel}.\n   * @returns {boolean} true if the seek bar has a label, else false\n   */\n  hasLabel(): boolean {\n    return this.label != null;\n  }\n\n  /**\n   * Gets the label of this seek bar.\n   * @returns {SeekBarLabel} the label if this seek bar has a label, else null\n   */\n  getLabel(): SeekBarLabel | null {\n    return this.label;\n  }\n\n  protected onSeekEvent() {\n    this.seekBarEvents.onSeek.dispatch(this);\n  }\n\n  protected onSeekPreviewEvent(percentage: number, scrubbing: boolean) {\n    let snappedMarker = this.getMarkerAtPosition(percentage);\n\n    let seekPositionPercentage = percentage;\n\n    if (snappedMarker) {\n      if (snappedMarker.duration > 0) {\n        if (percentage < snappedMarker.position) {\n          // Snap the position to the start of the interval if the seek is within the left snap margin\n          // We know that we are within a snap margin when we are outside the marker interval but still\n          // have a snappedMarker\n          seekPositionPercentage = snappedMarker.position;\n        } else if (percentage > snappedMarker.position + snappedMarker.duration) {\n          // Snap the position to the end of the interval if the seek is within the right snap margin\n          seekPositionPercentage = snappedMarker.position + snappedMarker.duration;\n        }\n      } else {\n        // Position markers always snap to their marker position\n        seekPositionPercentage = snappedMarker.position;\n      }\n    }\n\n    if (this.label) {\n      this.label.getDomElement().css({\n        'left': seekPositionPercentage + '%',\n      });\n    }\n\n    this.seekBarEvents.onSeekPreview.dispatch(this, {\n      scrubbing: scrubbing,\n      position: seekPositionPercentage,\n      marker: snappedMarker,\n    });\n  }\n\n  protected onSeekedEvent(percentage: number) {\n    this.seekBarEvents.onSeeked.dispatch(this, percentage);\n  }\n\n  /**\n   * Gets the event that is fired when a scrubbing seek operation is started.\n   * @returns {Event<SeekBar, NoArgs>}\n   */\n  get onSeek(): Event<SeekBar, NoArgs> {\n    return this.seekBarEvents.onSeek.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired during a scrubbing seek (to indicate that the seek preview, i.e. the video frame,\n   * should be updated), or during a normal seek preview when the seek bar is hovered (and the seek target,\n   * i.e. the seek bar label, should be updated).\n   * @returns {Event<SeekBar, SeekPreviewEventArgs>}\n   */\n  get onSeekPreview(): Event<SeekBar, SeekPreviewEventArgs> {\n    return this.seekBarEvents.onSeekPreview.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when a scrubbing seek has finished or when a direct seek is issued.\n   * @returns {Event<SeekBar, number>}\n   */\n  get onSeeked(): Event<SeekBar, number> {\n    return this.seekBarEvents.onSeeked.getEvent();\n  }\n\n\n  protected onShowEvent(): void {\n    super.onShowEvent();\n\n    // Refresh the position of the playback position when the seek bar becomes visible. To correctly set the position,\n    // the DOM element must be fully initialized an have its size calculated, because the position is set as an absolute\n    // value calculated from the size. This required size is not known when it is hidden.\n    // For such cases, we refresh the position here in onShow because here it is guaranteed that the component knows\n    // its size and can set the position correctly.\n    this.refreshPlaybackPosition();\n  }\n}\n","import {Container, ContainerConfig} from './container';\nimport {Label, LabelConfig} from './label';\nimport {Component, ComponentConfig} from './component';\nimport { UIInstanceManager } from '../uimanager';\nimport {StringUtils} from '../stringutils';\nimport {ImageLoader} from '../imageloader';\nimport {CssProperties} from '../dom';\nimport { PlayerAPI, Thumbnail } from 'bitmovin-player';\nimport { SeekBar, SeekPreviewEventArgs } from './seekbar';\nimport { PlayerUtils } from '../playerutils';\n\n/**\n * Configuration interface for a {@link SeekBarLabel}.\n */\nexport interface SeekBarLabelConfig extends ContainerConfig {\n  // nothing yet\n}\n\n/**\n * A label for a {@link SeekBar} that can display the seek target time, a thumbnail, and title (e.g. chapter title).\n */\nexport class SeekBarLabel extends Container<SeekBarLabelConfig> {\n\n  private timeLabel: Label<LabelConfig>;\n  private titleLabel: Label<LabelConfig>;\n  private thumbnail: Component<ComponentConfig>;\n\n  private thumbnailImageLoader: ImageLoader;\n\n  private timeFormat: string;\n\n  private appliedMarkerCssClasses: string[] = [];\n  private player: PlayerAPI;\n  private uiManager: UIInstanceManager;\n\n  constructor(config: SeekBarLabelConfig = {}) {\n    super(config);\n\n    this.timeLabel = new Label({ cssClasses: ['seekbar-label-time'] });\n    this.titleLabel = new Label({ cssClasses: ['seekbar-label-title'] });\n    this.thumbnail = new Component({ cssClasses: ['seekbar-thumbnail'] });\n    this.thumbnailImageLoader = new ImageLoader();\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-seekbar-label',\n      components: [new Container({\n        components: [\n          this.thumbnail,\n          new Container({\n            components: [this.titleLabel, this.timeLabel],\n            cssClass: 'seekbar-label-metadata',\n          })],\n        cssClass: 'seekbar-label-inner',\n      })],\n      hidden: true,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.player = player;\n    this.uiManager = uimanager;\n    uimanager.onSeekPreview.subscribeRateLimited(this.handleSeekPreview, 100);\n\n    let init = () => {\n      // Set time format depending on source duration\n      this.timeFormat = Math.abs(player.isLive() ? player.getMaxTimeShift() : player.getDuration()) >= 3600 ?\n        StringUtils.FORMAT_HHMMSS : StringUtils.FORMAT_MMSS;\n      // Set initial state of title and thumbnail to handle sourceLoaded when switching to a live-stream\n      this.setTitleText(null);\n      this.setThumbnail(null);\n    };\n\n    uimanager.getConfig().events.onUpdated.subscribe(init);\n    init();\n  }\n\n  private handleSeekPreview = (sender: SeekBar, args: SeekPreviewEventArgs) => {\n    if (this.player.isLive()) {\n      let maxTimeShift = this.player.getMaxTimeShift();\n      let timeShiftPreview = maxTimeShift - maxTimeShift * (args.position / 100);\n\n      this.setTime(timeShiftPreview);\n\n      // In case of a live stream the player expects the time passed into the getThumbnail as a wallClockTime and not\n      // as a relative timeShift value.\n      const convertTimeShiftPreviewToWallClockTime = (targetTimeShift: number): number => {\n        const currentTimeShift = this.player.getTimeShift();\n        const currentTime = this.player.getCurrentTime();\n\n        const wallClockTimeOfLiveEdge = currentTime - currentTimeShift;\n        return wallClockTimeOfLiveEdge + targetTimeShift;\n      };\n\n      const wallClockTime = convertTimeShiftPreviewToWallClockTime(timeShiftPreview);\n      this.setThumbnail(this.player.getThumbnail(wallClockTime));\n\n    } else {\n      if (args.marker) {\n        this.setTitleText(args.marker.marker.title);\n      } else {\n        this.setTitleText(null);\n      }\n      let time = this.player.getDuration() * (args.position / 100);\n      this.setTime(time);\n\n      const seekableRangeStart = PlayerUtils.getSeekableRangeStart(this.player, 0);\n      const absoluteSeekTarget = time + seekableRangeStart;\n      this.setThumbnail(this.player.getThumbnail(absoluteSeekTarget));\n    }\n\n    // Remove CSS classes from previous marker\n    if (this.appliedMarkerCssClasses.length > 0) {\n      this.getDomElement().removeClass(this.appliedMarkerCssClasses.join(' '));\n      this.appliedMarkerCssClasses = [];\n    }\n\n    // Add CSS classes of current marker\n    if (args.marker) {\n      const cssClasses = (args.marker.marker.cssClasses || []).map(cssClass => this.prefixCss(cssClass));\n      this.getDomElement().addClass(cssClasses.join(' '));\n      this.appliedMarkerCssClasses = cssClasses;\n    }\n  };\n\n  /**\n   * Sets arbitrary text on the label.\n   * @param text the text to show on the label\n   */\n  setText(text: string) {\n    this.timeLabel.setText(text);\n  }\n\n  /**\n   * Sets a time to be displayed on the label.\n   * @param seconds the time in seconds to display on the label\n   */\n  setTime(seconds: number) {\n    this.setText(StringUtils.secondsToTime(seconds, this.timeFormat));\n  }\n\n  /**\n   * Sets the text on the title label.\n   * @param text the text to show on the label\n   */\n  setTitleText(text: string) {\n    this.titleLabel.setText(text);\n  }\n\n  /**\n   * Sets or removes a thumbnail on the label.\n   * @param thumbnail the thumbnail to display on the label or null to remove a displayed thumbnail\n   */\n  setThumbnail(thumbnail: Thumbnail = null) {\n    let thumbnailElement = this.thumbnail.getDomElement();\n\n    if (thumbnail == null) {\n      thumbnailElement.css({\n        'background-image': null,\n        'display': null,\n        'width': null,\n        'height': null,\n      });\n    }\n    else {\n      // We use the thumbnail image loader to make sure the thumbnail is loaded and it's size is known before be can\n      // calculate the CSS properties and set them on the element.\n      this.thumbnailImageLoader.load(thumbnail.url, (url, width, height) => {\n        // can be checked like that because x/y/w/h are either all present or none\n        // https://www.w3.org/TR/media-frags/#naming-space\n        if (thumbnail.x !== undefined) {\n          thumbnailElement.css(this.thumbnailCssSprite(thumbnail, width, height));\n        } else {\n          thumbnailElement.css(this.thumbnailCssSingleImage(thumbnail, width, height));\n        }\n      });\n    }\n  }\n\n  private thumbnailCssSprite(thumbnail: Thumbnail, width: number, height: number): CssProperties {\n    let thumbnailCountX = width / thumbnail.width;\n    let thumbnailCountY = height / thumbnail.height;\n\n    let thumbnailIndexX = thumbnail.x / thumbnail.width;\n    let thumbnailIndexY = thumbnail.y / thumbnail.height;\n\n    let sizeX = 100 * thumbnailCountX;\n    let sizeY = 100 * thumbnailCountY;\n\n    let offsetX = 100 * thumbnailIndexX;\n    let offsetY = 100 * thumbnailIndexY;\n\n    let aspectRatio = 1 / thumbnail.width * thumbnail.height;\n\n    // The thumbnail size is set by setting the CSS 'width' and 'padding-bottom' properties. 'padding-bottom' is\n    // used because it is relative to the width and can be used to set the aspect ratio of the thumbnail.\n    // A default value for width is set in the stylesheet and can be overwritten from there or anywhere else.\n    return {\n      'display': 'inherit',\n      'background-image': `url(${thumbnail.url})`,\n      'padding-bottom': `${100 * aspectRatio}%`,\n      'background-size': `${sizeX}% ${sizeY}%`,\n      'background-position': `-${offsetX}% -${offsetY}%`,\n    };\n  }\n\n  private thumbnailCssSingleImage(thumbnail: Thumbnail, width: number, height: number): CssProperties {\n    let aspectRatio = 1 / width * height;\n\n    return {\n      'display': 'inherit',\n      'background-image': `url(${thumbnail.url})`,\n      'padding-bottom': `${100 * aspectRatio}%`,\n      'background-size': `100% 100%`,\n      'background-position': `0 0`,\n    };\n  }\n\n  release(): void {\n    super.release();\n\n    this.uiManager.onSeekPreview.unsubscribe(this.handleSeekPreview);\n  }\n}\n","import {ListSelector, ListSelectorConfig} from './listselector';\nimport {DOM} from '../dom';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A simple select box providing the possibility to select a single item out of a list of available items.\n *\n * DOM example:\n * <code>\n *     <select class='ui-selectbox'>\n *         <option value='key'>label</option>\n *         ...\n *     </select>\n * </code>\n */\nexport class SelectBox extends ListSelector<ListSelectorConfig> {\n\n  private selectElement: DOM;\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-selectbox',\n    }, this.config);\n  }\n\n  protected toDomElement(): DOM {\n    let selectElement = new DOM('select', {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n    });\n\n    this.selectElement = selectElement;\n    this.updateDomItems();\n\n    selectElement.on('change', () => {\n      let value = selectElement.val();\n      this.onItemSelectedEvent(value, false);\n    });\n\n    return selectElement;\n  }\n\n  protected updateDomItems(selectedValue: string = null) {\n    // Delete all children\n    this.selectElement.empty();\n\n    // Add updated children\n    for (let item of this.items) {\n      let optionElement = new DOM('option', {\n        'value': String(item.key),\n      }).html(i18n.performLocalization(item.label));\n\n      if (item.key === String(selectedValue)) { // convert selectedValue to string to catch 'null'/null case\n        optionElement.attr('selected', 'selected');\n      }\n\n      this.selectElement.append(optionElement);\n    }\n  }\n\n  protected onItemAddedEvent(value: string) {\n    super.onItemAddedEvent(value);\n    this.updateDomItems(this.selectedItem);\n  }\n\n  protected onItemRemovedEvent(value: string) {\n    super.onItemRemovedEvent(value);\n    this.updateDomItems(this.selectedItem);\n  }\n\n  protected onItemSelectedEvent(value: string, updateDomItems: boolean = true) {\n    super.onItemSelectedEvent(value);\n    if (updateDomItems) {\n      this.updateDomItems(value);\n    }\n  }\n}\n","import { Container, ContainerConfig } from './container';\nimport { SelectBox } from './selectbox';\nimport { UIInstanceManager } from '../uimanager';\nimport { Timeout } from '../timeout';\nimport { Event, EventDispatcher, NoArgs } from '../eventdispatcher';\nimport { SettingsPanelPage } from './settingspanelpage';\nimport { SettingsPanelItem } from './settingspanelitem';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { Component, ComponentConfig } from './component';\n\n/**\n * Configuration interface for a {@link SettingsPanel}.\n */\nexport interface SettingsPanelConfig extends ContainerConfig {\n  /**\n   * The delay in milliseconds after which the settings panel will be hidden when there is no user interaction.\n   * Set to -1 to disable automatic hiding.\n   * Default: 3 seconds (3000)\n   */\n  hideDelay?: number;\n\n  /**\n   * Flag to specify if there should be an animation when switching SettingsPanelPages.\n   * Default: true\n   */\n  pageTransitionAnimation?: boolean;\n}\n\nenum NavigationDirection {\n  Forwards,\n  Backwards,\n}\n\n/**\n * A panel containing a list of {@link SettingsPanelPage items}.\n *\n * To configure pages just pass them in the components array.\n *\n * Example:\n *  let settingsPanel = new SettingsPanel({\n *    hidden: true,\n *  });\n *\n *  let settingsPanelPage = new SettingsPanelPage({\n *    components: […]\n *  });\n *\n *  let secondSettingsPanelPage = new SettingsPanelPage({\n *    components: […]\n *  });\n *\n *  settingsPanel.addComponent(settingsPanelPage);\n *  settingsPanel.addComponent(secondSettingsPanelPage);\n *\n * For an example how to navigate between pages @see SettingsPanelPageNavigatorButton\n */\nexport class SettingsPanel extends Container<SettingsPanelConfig> {\n\n  private static readonly CLASS_ACTIVE_PAGE = 'active';\n\n  // navigation handling\n  private activePage: SettingsPanelPage;\n  private navigationStack: SettingsPanelPage[] = [];\n\n  private settingsPanelEvents = {\n    onSettingsStateChanged: new EventDispatcher<SettingsPanel, NoArgs>(),\n  };\n\n  private hideTimeout: Timeout;\n\n  constructor(config: SettingsPanelConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-settings-panel',\n      hideDelay: 3000,\n      pageTransitionAnimation: true,\n    } as SettingsPanelConfig, this.config);\n\n    this.activePage = this.getRootPage();\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n\n    uimanager.onControlsHide.subscribe(() => this.hideHoveredSelectBoxes());\n\n    if (config.hideDelay > -1) {\n      this.hideTimeout = new Timeout(config.hideDelay, () => {\n        this.hide();\n        this.hideHoveredSelectBoxes();\n      });\n\n      this.onShow.subscribe(() => {\n        // Reset navigation when te panel gets visible to avoid a weird animation when hiding\n        this.resetNavigation(true);\n        // Since we don't need to navigate to the root page again we need to fire the onActive event when the settings\n        // panel gets visible.\n        this.activePage.onActiveEvent();\n        // Activate timeout when shown\n        this.hideTimeout.start();\n      });\n      this.getDomElement().on('mouseenter', () => {\n        // On mouse enter clear the timeout\n        this.hideTimeout.clear();\n      });\n      this.getDomElement().on('mouseleave', () => {\n        // On mouse leave activate the timeout\n        this.hideTimeout.reset();\n      });\n      this.onHide.subscribe(() => {\n        // Clear timeout when hidden from outside\n        this.hideTimeout.clear();\n        // Since we don't reset the actual navigation here we need to simulate a onInactive event in case some panel\n        // needs to do something when they become invisible / inactive.\n        this.activePage.onInactiveEvent();\n      });\n    }\n\n    // pass event from root page through\n    this.getRootPage().onSettingsStateChanged.subscribe(() => {\n      this.onSettingsStateChangedEvent();\n    });\n\n    this.updateActivePageClass();\n  }\n\n  /**\n   * Returns the current active / visible page\n   * @return {SettingsPanelPage}\n   */\n  getActivePage(): SettingsPanelPage {\n    return this.activePage;\n  }\n\n  /**\n   * Sets the\n   * @deprecated Use {@link setActivePage} instead\n   * @param index\n   */\n  setActivePageIndex(index: number): void {\n    this.setActivePage(this.getPages()[index]);\n  }\n\n  /**\n   * Adds the passed page to the navigation stack and makes it visible.\n   * Use {@link popSettingsPanelPage} to navigate backwards.\n   *\n   * Results in no-op if the target page is the current page.\n   * @params page\n   */\n  setActivePage(targetPage: SettingsPanelPage): void {\n    if (targetPage === this.getActivePage()) {\n      console.warn('Page is already the current one ... skipping navigation');\n      return;\n    }\n\n    this.navigateToPage(\n      targetPage,\n      this.getActivePage(),\n      NavigationDirection.Forwards,\n      !(this.config as SettingsPanelConfig).pageTransitionAnimation,\n    );\n  }\n\n  /**\n   * Resets the navigation stack by navigating back to the root page and displaying it.\n   */\n  popToRootSettingsPanelPage(): void {\n    this.resetNavigation((this.config as SettingsPanelConfig).pageTransitionAnimation);\n  }\n\n  /**\n   * Removes the current page from the navigation stack and makes the previous one visible.\n   * Results in a no-op if we are already on the root page.\n   */\n  popSettingsPanelPage() {\n    if (this.navigationStack.length === 0) {\n      console.warn('Already on the root page ... skipping navigation');\n      return;\n    }\n\n    let targetPage = this.navigationStack[this.navigationStack.length - 2];\n    // The root part isn't part of the navigation stack so handle it explicitly here\n    if (!targetPage) {\n      targetPage = this.getRootPage();\n    }\n\n    this.navigateToPage(\n      targetPage,\n      this.activePage,\n      NavigationDirection.Backwards,\n      !(this.config as SettingsPanelConfig).pageTransitionAnimation,\n    );\n  }\n\n  /**\n   * Checks if there are active settings within the root page of the settings panel.\n   * An active setting is a setting that is visible and enabled, which the user can interact with.\n   * @returns {boolean} true if there are active settings, false if the panel is functionally empty to a user\n   */\n  rootPageHasActiveSettings(): boolean {\n    return this.getRootPage().hasActiveSettings();\n  }\n\n  /**\n   * Return all configured pages\n   * @returns {SettingsPanelPage[]}\n   */\n  getPages(): SettingsPanelPage[] {\n    return <SettingsPanelPage[]>this.config.components.filter(component => component instanceof SettingsPanelPage);\n  }\n\n  get onSettingsStateChanged(): Event<SettingsPanel, NoArgs> {\n    return this.settingsPanelEvents.onSettingsStateChanged.getEvent();\n  }\n\n  release(): void {\n    super.release();\n    if (this.hideTimeout) {\n      this.hideTimeout.clear();\n    }\n  }\n\n  // Support adding settingsPanelPages after initialization\n  addComponent(component: Component<ComponentConfig>) {\n    if (this.getPages().length === 0 && component instanceof SettingsPanelPage) {\n      this.activePage = component;\n    }\n    super.addComponent(component);\n  }\n\n  private updateActivePageClass(): void {\n    this.getPages().forEach((page: SettingsPanelPage) => {\n      if (page === this.activePage) {\n        page.getDomElement().addClass(this.prefixCss(SettingsPanel.CLASS_ACTIVE_PAGE));\n      } else {\n        page.getDomElement().removeClass(this.prefixCss(SettingsPanel.CLASS_ACTIVE_PAGE));\n      }\n    });\n  }\n\n  private resetNavigation(resetNavigationOnShow: boolean): void {\n    const sourcePage = this.getActivePage();\n    const rootPage = this.getRootPage();\n    if (sourcePage) {\n      // Since the onInactiveEvent was already fired in the onHide we need to suppress it here\n      if (!resetNavigationOnShow) {\n        sourcePage.onInactiveEvent();\n      }\n    }\n    this.navigationStack = [];\n    this.animateNavigation(rootPage, sourcePage, resetNavigationOnShow);\n    this.activePage = rootPage;\n    this.updateActivePageClass();\n  }\n\n  private navigateToPage(\n    targetPage: SettingsPanelPage,\n    sourcePage: SettingsPanelPage,\n    direction: NavigationDirection,\n    skipAnimation: boolean,\n  ): void {\n    this.activePage = targetPage;\n\n    if (direction === NavigationDirection.Forwards) {\n      this.navigationStack.push(targetPage);\n    } else {\n      this.navigationStack.pop();\n    }\n\n    this.animateNavigation(targetPage, sourcePage, skipAnimation);\n\n    this.updateActivePageClass();\n    targetPage.onActiveEvent();\n    sourcePage.onInactiveEvent();\n  }\n\n  /**\n   * @param targetPage\n   * @param sourcePage\n   * @param skipAnimation This is just an internal flag if we want to have an animation. It is set true when we reset\n   * the navigation within the onShow callback of the settingsPanel. In this case we don't want an actual animation but\n   * the recalculation of the dimension of the settingsPanel.\n   * This is independent of the pageTransitionAnimation flag.\n   */\n  private animateNavigation(targetPage: SettingsPanelPage, sourcePage: SettingsPanelPage, skipAnimation: boolean) {\n    if (!(this.config as SettingsPanelConfig).pageTransitionAnimation) {\n      return;\n    }\n\n    const settingsPanelDomElement = this.getDomElement();\n    const settingsPanelHTMLElement = this.getDomElement().get(0);\n\n    // get current dimension\n    const settingsPanelWidth = settingsPanelHTMLElement.scrollWidth;\n    const settingsPanelHeight = settingsPanelHTMLElement.scrollHeight;\n\n    // calculate target size of the settings panel\n    sourcePage.getDomElement().css('display', 'none');\n    this.getDomElement().css({ width: '', height: '' }); // let css auto settings kick in again\n\n    const targetPageHtmlElement = targetPage.getDomElement().get(0);\n    // clone the targetPage DOM element so that we can calculate the width / height how they will be after\n    // switching the page. We are using a clone to prevent (mostly styling) side-effects on the real DOM element\n    const clone = targetPageHtmlElement.cloneNode(true) as HTMLElement;\n    // append to parent so we get the 'real' size\n    const containerWrapper = targetPageHtmlElement.parentNode;\n    containerWrapper.appendChild(clone);\n    // set clone visible\n    clone.style.display = 'block';\n\n    // collect target dimension\n    const targetSettingsPanelWidth = settingsPanelHTMLElement.scrollWidth;\n    const targetSettingsPanelHeight = settingsPanelHTMLElement.scrollHeight;\n\n    // remove clone from the DOM\n    clone.parentElement.removeChild(clone); // .remove() is not working in IE\n    sourcePage.getDomElement().css('display', '');\n\n    // set the values back to the current ones that the browser animates it (browsers don't animate 'auto' values)\n    settingsPanelDomElement.css({\n      width: settingsPanelWidth + 'px',\n      height: settingsPanelHeight + 'px',\n    });\n\n    if (!skipAnimation) {\n      // We need to force the browser to reflow between setting the width and height that we actually get a animation\n      this.forceBrowserReflow();\n    }\n\n    // set the values to the target dimension\n    settingsPanelDomElement.css({\n      width: targetSettingsPanelWidth + 'px',\n      height: targetSettingsPanelHeight + 'px',\n    });\n  }\n\n  private forceBrowserReflow(): void {\n    // Force the browser to reflow the layout\n    // https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n    this.getDomElement().get(0).offsetLeft;\n  }\n\n  /**\n   * Hack for IE + Firefox\n   * when the settings panel fades out while an item of a select box is still hovered, the select box will not fade out\n   * while the settings panel does. This would leave a floating select box, which is just weird\n   */\n  private hideHoveredSelectBoxes(): void {\n    this.getComputedItems().forEach((item: SettingsPanelItem) => {\n      if (item.isActive() && (item as any).setting instanceof SelectBox) {\n        const selectBox = (item as any).setting as SelectBox;\n        const oldDisplay = selectBox.getDomElement().css('display');\n        // updating the display to none marks the select-box as inactive, so it will be hidden with the rest\n        // we just have to make sure to reset this as soon as possible\n        selectBox.getDomElement().css('display', 'none');\n        if (window.requestAnimationFrame) {\n          requestAnimationFrame(() => {\n            selectBox.getDomElement().css('display', oldDisplay);\n          });\n        } else {\n          // IE9 has no requestAnimationFrame, set the value directly. It has no optimization about ignoring DOM-changes\n          // between animationFrames\n          selectBox.getDomElement().css('display', oldDisplay);\n        }\n      }\n    });\n  }\n\n  // collect all items from all pages (see hideHoveredSelectBoxes)\n  private getComputedItems(): SettingsPanelItem[] {\n    const allItems: SettingsPanelItem[] = [];\n    for (let page of this.getPages()) {\n      allItems.push(...page.getItems());\n    }\n    return allItems;\n  }\n\n  private getRootPage(): SettingsPanelPage {\n    return this.getPages()[0];\n  }\n\n  protected onSettingsStateChangedEvent() {\n    this.settingsPanelEvents.onSettingsStateChanged.dispatch(this);\n  }\n}\n","import {Container, ContainerConfig} from './container';\nimport {Component, ComponentConfig} from './component';\nimport {Event, EventDispatcher, NoArgs} from '../eventdispatcher';\nimport { Label, LabelConfig } from './label';\nimport {UIInstanceManager} from '../uimanager';\nimport {SelectBox} from './selectbox';\nimport {ListBox} from './listbox';\nimport {VideoQualitySelectBox} from './videoqualityselectbox';\nimport {AudioQualitySelectBox} from './audioqualityselectbox';\nimport {PlaybackSpeedSelectBox} from './playbackspeedselectbox';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { LocalizableText } from '../localization/i18n';\n\n/**\n * An item for a {@link SettingsPanelPage},\n * Containing an optional {@link Label} and a component that configures a setting.\n * If the components is a {@link SelectBox} it will handle the logic of displaying it or not\n */\nexport class SettingsPanelItem extends Container<ContainerConfig> {\n\n  private label: Component<ComponentConfig>;\n  private setting: Component<ComponentConfig>;\n\n  private settingsPanelItemEvents = {\n    onActiveChanged: new EventDispatcher<SettingsPanelItem, NoArgs>(),\n  };\n\n  constructor(label: LocalizableText | Component<ComponentConfig>, setting: Component<ComponentConfig>, config: ContainerConfig = {}) {\n    super(config);\n\n    this.setting = setting;\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-settings-panel-item',\n    }, this.config);\n\n    if (label !== null) {\n      if (label instanceof Component) {\n        this.label = label;\n      } else {\n        this.label = new Label({text: label} as LabelConfig);\n      }\n      this.addComponent(this.label);\n    }\n\n    this.addComponent(this.setting);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    if (this.setting instanceof SelectBox || this.setting instanceof ListBox) {\n      let handleConfigItemChanged = () => {\n        if (!(this.setting instanceof SelectBox) && !(this.setting instanceof ListBox)) {\n          return;\n        }\n        // The minimum number of items that must be available for the setting to be displayed\n        // By default, at least two items must be available, else a selection is not possible\n        let minItemsToDisplay = 2;\n        // Audio/video quality select boxes contain an additional 'auto' mode, which in combination with a single\n        // available quality also does not make sense\n        if ((this.setting instanceof VideoQualitySelectBox && this.setting.hasAutoItem())\n          || this.setting instanceof AudioQualitySelectBox) {\n          minItemsToDisplay = 3;\n        }\n\n        if (this.setting.itemCount() < minItemsToDisplay) {\n          // Hide the setting if no meaningful choice is available\n          this.hide();\n        } else if (this.setting instanceof PlaybackSpeedSelectBox\n          && !uimanager.getConfig().playbackSpeedSelectionEnabled) {\n          // Hide the PlaybackSpeedSelectBox if disabled in config\n          this.hide();\n        } else {\n          this.show();\n        }\n\n        // Visibility might have changed and therefore the active state might have changed so we fire the event\n        // TODO fire only when state has really changed (e.g. check if visibility has really changed)\n        this.onActiveChangedEvent();\n      };\n\n      this.setting.onItemAdded.subscribe(handleConfigItemChanged);\n      this.setting.onItemRemoved.subscribe(handleConfigItemChanged);\n\n      // Initialize hidden state\n      handleConfigItemChanged();\n    }\n  }\n\n  /**\n   * Checks if this settings panel item is active, i.e. visible and enabled and a user can interact with it.\n   * @returns {boolean} true if the panel is active, else false\n   */\n  isActive(): boolean {\n    return this.isShown();\n  }\n\n  protected onActiveChangedEvent() {\n    this.settingsPanelItemEvents.onActiveChanged.dispatch(this);\n  }\n\n  /**\n   * Gets the event that is fired when the 'active' state of this item changes.\n   * @see #isActive\n   * @returns {Event<SettingsPanelItem, NoArgs>}\n   */\n  get onActiveChanged(): Event<SettingsPanelItem, NoArgs> {\n    return this.settingsPanelItemEvents.onActiveChanged.getEvent();\n  }\n}\n","import {Container, ContainerConfig} from './container';\nimport {SettingsPanelItem} from './settingspanelitem';\nimport {UIInstanceManager} from '../uimanager';\nimport {Event, EventDispatcher, NoArgs} from '../eventdispatcher';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * A panel containing a list of {@link SettingsPanelItem items} that represent labelled settings.\n */\nexport class SettingsPanelPage extends Container<ContainerConfig> {\n\n  private static readonly CLASS_LAST = 'last';\n\n  private settingsPanelPageEvents = {\n    onSettingsStateChanged: new EventDispatcher<SettingsPanelPage, NoArgs>(),\n    onActive: new EventDispatcher<SettingsPanelPage, NoArgs>(),\n    onInactive: new EventDispatcher<SettingsPanelPage, NoArgs>(),\n  };\n\n  constructor(config: ContainerConfig) {\n    super(config);\n\n    this.config = this.mergeConfig<ContainerConfig>(config, {\n      cssClass: 'ui-settings-panel-page',\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    // Fire event when the state of a settings-item has changed\n    let settingsStateChangedHandler = () => {\n      this.onSettingsStateChangedEvent();\n\n      // Attach marker class to last visible item\n      let lastShownItem = null;\n      for (let component of this.getItems()) {\n        component.getDomElement().removeClass(this.prefixCss(SettingsPanelPage.CLASS_LAST));\n        if (component.isShown()) {\n          lastShownItem = component;\n        }\n      }\n      if (lastShownItem) {\n        lastShownItem.getDomElement().addClass(this.prefixCss(SettingsPanelPage.CLASS_LAST));\n      }\n    };\n    for (let component of this.getItems()) {\n      component.onActiveChanged.subscribe(settingsStateChangedHandler);\n    }\n  }\n\n  hasActiveSettings(): boolean {\n    for (let component of this.getItems()) {\n      if (component.isActive()) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  getItems(): SettingsPanelItem[] {\n    return <SettingsPanelItem[]>this.config.components.filter(component => component instanceof SettingsPanelItem);\n  }\n\n  onSettingsStateChangedEvent() {\n    this.settingsPanelPageEvents.onSettingsStateChanged.dispatch(this);\n  }\n\n  get onSettingsStateChanged(): Event<SettingsPanelPage, NoArgs> {\n    return this.settingsPanelPageEvents.onSettingsStateChanged.getEvent();\n  }\n\n  onActiveEvent() {\n    this.settingsPanelPageEvents.onActive.dispatch(this);\n  }\n\n  get onActive(): Event<SettingsPanelPage, NoArgs> {\n    return this.settingsPanelPageEvents.onActive.getEvent();\n  }\n\n  onInactiveEvent() {\n    this.settingsPanelPageEvents.onInactive.dispatch(this);\n  }\n\n  get onInactive(): Event<SettingsPanelPage, NoArgs> {\n    return this.settingsPanelPageEvents.onInactive.getEvent();\n  }\n}\n","import {UIInstanceManager} from '../uimanager';\nimport {SettingsPanelPageNavigatorButton, SettingsPanelPageNavigatorConfig} from './settingspanelpagenavigatorbutton';\nimport { PlayerAPI } from 'bitmovin-player';\n\nexport class SettingsPanelPageBackButton extends SettingsPanelPageNavigatorButton {\n\n  constructor(config: SettingsPanelPageNavigatorConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-settingspanelpagebackbutton',\n      text: 'back',\n    } as SettingsPanelPageNavigatorConfig, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onClick.subscribe(() => {\n      this.popPage();\n    });\n  }\n}\n","import {Button, ButtonConfig} from './button';\nimport {SettingsPanel} from './settingspanel';\nimport {SettingsPanelPage} from './settingspanelpage';\n\n/**\n * Configuration interface for a {@link SettingsPanelPageNavigatorButton}\n */\nexport interface SettingsPanelPageNavigatorConfig extends ButtonConfig {\n  /**\n   * Container `SettingsPanel` where the navigation takes place\n   */\n  container: SettingsPanel;\n  /**\n   * Page where the button should navigate to\n   * If empty it will navigate to the root page (not intended to use as navigate back behavior)\n   */\n  targetPage?: SettingsPanelPage;\n}\n\n/**\n * Can be used to navigate between SettingsPanelPages\n *\n * Example:\n *  let settingPanelNavigationButton = new SettingsPanelPageNavigatorButton({\n *    container: settingsPanel,\n *    targetPage: settingsPanelPage,\n *  });\n *\n *  settingsPanelPage.addComponent(settingPanelNavigationButton);\n *\n * Don't forget to add the settingPanelNavigationButton to the settingsPanelPage.\n */\nexport class SettingsPanelPageNavigatorButton extends Button<SettingsPanelPageNavigatorConfig> {\n  private readonly container: SettingsPanel;\n  private readonly targetPage?: SettingsPanelPage;\n\n  constructor(config: SettingsPanelPageNavigatorConfig) {\n    super(config);\n    this.config = this.mergeConfig(config, {} as SettingsPanelPageNavigatorConfig, this.config);\n\n    this.container = (this.config as SettingsPanelPageNavigatorConfig).container;\n    this.targetPage = (this.config as SettingsPanelPageNavigatorConfig).targetPage;\n  }\n\n  /**\n   * navigate one level back\n   */\n  popPage() {\n    this.container.popSettingsPanelPage();\n  }\n\n  /**\n   * navigate to the target page\n   */\n  pushTargetPage() {\n    this.container.setActivePage(this.targetPage);\n  }\n}\n","import {UIInstanceManager} from '../uimanager';\nimport {SettingsPanelPageNavigatorButton, SettingsPanelPageNavigatorConfig} from './settingspanelpagenavigatorbutton';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\nexport class SettingsPanelPageOpenButton extends SettingsPanelPageNavigatorButton {\n  constructor(config: SettingsPanelPageNavigatorConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-settingspanelpageopenbutton',\n      text: i18n.getLocalizer('open'),\n    } as SettingsPanelPageNavigatorConfig, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onClick.subscribe(() => {\n      this.pushTargetPage();\n    });\n  }\n}\n","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport {SettingsPanel} from './settingspanel';\nimport {UIInstanceManager} from '../uimanager';\nimport {Component, ComponentConfig} from './component';\nimport {ArrayUtils} from '../arrayutils';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for the {@link SettingsToggleButton}.\n */\nexport interface SettingsToggleButtonConfig extends ToggleButtonConfig {\n  /**\n   * The settings panel whose visibility the button should toggle.\n   */\n  settingsPanel: SettingsPanel;\n\n  /**\n   * Decides if the button should be automatically hidden when the settings panel does not contain any active settings.\n   * Default: true\n   */\n  autoHideWhenNoActiveSettings?: boolean;\n}\n\n/**\n * A button that toggles visibility of a settings panel.\n */\nexport class SettingsToggleButton extends ToggleButton<SettingsToggleButtonConfig> {\n\n  private visibleSettingsPanels: SettingsPanel[] = [];\n\n  constructor(config: SettingsToggleButtonConfig) {\n    super(config);\n\n    if (!config.settingsPanel) {\n      throw new Error('Required SettingsPanel is missing');\n    }\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-settingstogglebutton',\n      text: i18n.getLocalizer('settings'),\n      settingsPanel: null,\n      autoHideWhenNoActiveSettings: true,\n    }, <SettingsToggleButtonConfig>this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let settingsPanel = config.settingsPanel;\n\n    this.onClick.subscribe(() => {\n      // only hide other `SettingsPanel`s if a new one will be opened\n      if (!settingsPanel.isShown()) {\n        // Hide all open SettingsPanels before opening this button's panel\n        // (We need to iterate a copy because hiding them will automatically remove themselves from the array\n        // due to the subscribeOnce above)\n        this.visibleSettingsPanels.slice().forEach(settingsPanel => settingsPanel.hide());\n      }\n      settingsPanel.toggleHidden();\n    });\n    settingsPanel.onShow.subscribe(() => {\n      // Set toggle status to on when the settings panel shows\n      this.on();\n    });\n    settingsPanel.onHide.subscribe(() => {\n      // Set toggle status to off when the settings panel hides\n      this.off();\n    });\n\n    // Ensure that only one `SettingPanel` is visible at once\n    // Keep track of shown SettingsPanels\n    uimanager.onComponentShow.subscribe((sender: Component<ComponentConfig>) => {\n      if (sender instanceof SettingsPanel) {\n        this.visibleSettingsPanels.push(sender);\n        sender.onHide.subscribeOnce(() => ArrayUtils.remove(this.visibleSettingsPanels, sender));\n      }\n    });\n\n    // Handle automatic hiding of the button if there are no settings for the user to interact with\n    if (config.autoHideWhenNoActiveSettings) {\n      // Setup handler to show/hide button when the settings change\n      let settingsPanelItemsChangedHandler = () => {\n        if (settingsPanel.rootPageHasActiveSettings()) {\n          if (this.isHidden()) {\n            this.show();\n          }\n        } else {\n          if (this.isShown()) {\n            this.hide();\n          }\n        }\n      };\n      // Wire the handler to the event\n      settingsPanel.onSettingsStateChanged.subscribe(settingsPanelItemsChangedHandler);\n      // Call handler for first init at startup\n      settingsPanelItemsChangedHandler();\n    }\n  }\n}","import {Component, ComponentConfig} from './component';\n\n/**\n * A dummy component that just reserves some space and does nothing else.\n */\nexport class Spacer extends Component<ComponentConfig> {\n\n  constructor(config: ComponentConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-spacer',\n    }, this.config);\n  }\n\n\n  protected onShowEvent(): void {\n    // disable event firing by overwriting and not calling super\n  }\n\n  protected onHideEvent(): void {\n    // disable event firing by overwriting and not calling super\n  }\n\n  protected onHoverChangedEvent(hovered: boolean): void {\n    // disable event firing by overwriting and not calling super\n  }\n}","import {ListBox} from './listbox';\nimport {UIInstanceManager} from '../uimanager';\nimport {SubtitleSwitchHandler} from '../subtitleutils';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * A element that is similar to a select box where the user can select a subtitle\n */\nexport class SubtitleListBox extends ListBox {\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    new SubtitleSwitchHandler(player, this, uimanager);\n  }\n}\n","import {Container, ContainerConfig} from './container';\nimport {UIInstanceManager} from '../uimanager';\nimport {Label, LabelConfig} from './label';\nimport {ComponentConfig, Component} from './component';\nimport {ControlBar} from './controlbar';\nimport { EventDispatcher } from '../eventdispatcher';\nimport {DOM} from '../dom';\nimport { PlayerAPI, SubtitleCueEvent } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Overlays the player to display subtitles.\n */\nexport class SubtitleOverlay extends Container<ContainerConfig> {\n\n  private subtitleManager: ActiveSubtitleManager;\n  private previewSubtitleActive: boolean;\n  private previewSubtitle: SubtitleLabel;\n\n  private preprocessLabelEventCallback = new EventDispatcher<SubtitleCueEvent, SubtitleLabel>();\n  private subtitleContainerManager: SubtitleRegionContainerManager;\n\n  private static readonly CLASS_CONTROLBAR_VISIBLE = 'controlbar-visible';\n  private static readonly CLASS_CEA_608 = 'cea608';\n\n  // The number of rows in a cea608 grid\n  private static readonly CEA608_NUM_ROWS = 15;\n  // The number of columns in a cea608 grid\n  private static readonly CEA608_NUM_COLUMNS = 32;\n  // The offset in percent for one row (which is also the height of a row)\n  private static readonly CEA608_ROW_OFFSET = 100 / SubtitleOverlay.CEA608_NUM_ROWS;\n  // The offset in percent for one column (which is also the width of a column)\n  private static readonly CEA608_COLUMN_OFFSET = 100 / SubtitleOverlay.CEA608_NUM_COLUMNS;\n\n  constructor(config: ContainerConfig = {}) {\n    super(config);\n\n    this.previewSubtitleActive = false;\n    this.previewSubtitle = new SubtitleLabel({ text: i18n.getLocalizer('subtitle.example') });\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-subtitle-overlay',\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let subtitleManager = new ActiveSubtitleManager();\n    this.subtitleManager = subtitleManager;\n\n    this.subtitleContainerManager = new SubtitleRegionContainerManager(this);\n\n    player.on(player.exports.PlayerEvent.CueEnter, (event: SubtitleCueEvent) => {\n      // Sanitize cue data (must be done before the cue ID is generated in subtitleManager.cueEnter)\n      if (event.position) {\n        // Sometimes the positions are undefined, we assume them to be zero\n        event.position.row = event.position.row || 0;\n        event.position.column = event.position.column || 0;\n      }\n\n      let labelToAdd = subtitleManager.cueEnter(event);\n\n      this.preprocessLabelEventCallback.dispatch(event, labelToAdd);\n\n      if (this.previewSubtitleActive) {\n        this.subtitleContainerManager.removeLabel(this.previewSubtitle);\n      }\n\n      this.subtitleContainerManager.addLabel(labelToAdd);\n      this.updateComponents();\n      this.show();\n    });\n\n    player.on(player.exports.PlayerEvent.CueExit, (event: SubtitleCueEvent) => {\n      let labelToRemove = subtitleManager.cueExit(event);\n\n      if (labelToRemove) {\n        this.subtitleContainerManager.removeLabel(labelToRemove);\n        this.updateComponents();\n      }\n\n      if (!subtitleManager.hasCues) {\n        if (!this.previewSubtitleActive) {\n          this.hide();\n        } else {\n          this.subtitleContainerManager.addLabel(this.previewSubtitle);\n          this.updateComponents();\n        }\n      }\n    });\n\n    let subtitleClearHandler = () => {\n      this.hide();\n      this.subtitleContainerManager.clear();\n      subtitleManager.clear();\n      this.removeComponents();\n      this.updateComponents();\n    };\n\n    player.on(player.exports.PlayerEvent.AudioChanged, subtitleClearHandler);\n    player.on(player.exports.PlayerEvent.SubtitleEnabled, subtitleClearHandler);\n    player.on(player.exports.PlayerEvent.SubtitleDisabled, subtitleClearHandler);\n    player.on(player.exports.PlayerEvent.Seek, subtitleClearHandler);\n    player.on(player.exports.PlayerEvent.TimeShift, subtitleClearHandler);\n    player.on(player.exports.PlayerEvent.PlaybackFinished, subtitleClearHandler);\n    player.on(player.exports.PlayerEvent.SourceUnloaded, subtitleClearHandler);\n\n    uimanager.onComponentShow.subscribe((component: Component<ComponentConfig>) => {\n      if (component instanceof ControlBar) {\n        this.getDomElement().addClass(this.prefixCss(SubtitleOverlay.CLASS_CONTROLBAR_VISIBLE));\n      }\n    });\n    uimanager.onComponentHide.subscribe((component: Component<ComponentConfig>) => {\n      if (component instanceof ControlBar) {\n        this.getDomElement().removeClass(this.prefixCss(SubtitleOverlay.CLASS_CONTROLBAR_VISIBLE));\n      }\n    });\n\n    this.configureCea608Captions(player, uimanager);\n    // Init\n    subtitleClearHandler();\n  }\n\n  configureCea608Captions(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    // The calculated font size\n    let fontSize = 0;\n    // The required letter spacing spread the text characters evenly across the grid\n    let fontLetterSpacing = 0;\n    // Flag telling if a font size calculation is required of if the current values are valid\n    let fontSizeCalculationRequired = true;\n    // Flag telling if the CEA-608 mode is enabled\n    let enabled = false;\n\n    const updateCEA608FontSize = () => {\n      const dummyLabel = new SubtitleLabel({ text: 'X' });\n      dummyLabel.getDomElement().css({\n        // By using a large font size we do not need to use multiple letters and can get still an\n        // accurate measurement even though the returned size is an integer value\n        'font-size': '200px',\n        'line-height': '200px',\n        'visibility': 'hidden',\n      });\n      this.addComponent(dummyLabel);\n      this.updateComponents();\n      this.show();\n\n      const dummyLabelCharWidth = dummyLabel.getDomElement().width();\n      const dummyLabelCharHeight = dummyLabel.getDomElement().height();\n      const fontSizeRatio = dummyLabelCharWidth / dummyLabelCharHeight;\n\n      this.removeComponent(dummyLabel);\n      this.updateComponents();\n      if (!this.subtitleManager.hasCues) {\n        this.hide();\n      }\n\n      // We subtract 1px here to avoid line breaks at the right border of the subtitle overlay that can happen\n      // when texts contain whitespaces. It's probably some kind of pixel rounding issue in the browser's\n      // layouting, but the actual reason could not be determined. Aiming for a target width - 1px would work in\n      // most browsers, but Safari has a \"quantized\" font size rendering with huge steps in between so we need\n      // to subtract some more pixels to avoid line breaks there as well.\n      const subtitleOverlayWidth = this.getDomElement().width() - 10;\n      const subtitleOverlayHeight = this.getDomElement().height();\n\n      // The size ratio of the letter grid\n      const fontGridSizeRatio = (dummyLabelCharWidth * SubtitleOverlay.CEA608_NUM_COLUMNS) /\n        (dummyLabelCharHeight * SubtitleOverlay.CEA608_NUM_ROWS);\n      // The size ratio of the available space for the grid\n      const subtitleOverlaySizeRatio = subtitleOverlayWidth / subtitleOverlayHeight;\n\n      if (subtitleOverlaySizeRatio > fontGridSizeRatio) {\n        // When the available space is wider than the text grid, the font size is simply\n        // determined by the height of the available space.\n        fontSize = subtitleOverlayHeight / SubtitleOverlay.CEA608_NUM_ROWS;\n\n        // Calculate the additional letter spacing required to evenly spread the text across the grid's width\n        const gridSlotWidth = subtitleOverlayWidth / SubtitleOverlay.CEA608_NUM_COLUMNS;\n        const fontCharWidth = fontSize * fontSizeRatio;\n        fontLetterSpacing = gridSlotWidth - fontCharWidth;\n      } else {\n        // When the available space is not wide enough, texts would vertically overlap if we take\n        // the height as a base for the font size, so we need to limit the height. We do that\n        // by determining the font size by the width of the available space.\n        fontSize = subtitleOverlayWidth / SubtitleOverlay.CEA608_NUM_COLUMNS / fontSizeRatio;\n        fontLetterSpacing = 0;\n      }\n\n      // Update font-size of all active subtitle labels\n      for (let label of this.getComponents()) {\n        if (label instanceof SubtitleLabel) {\n          label.getDomElement().css({\n            'font-size': `${fontSize}px`,\n            'letter-spacing': `${fontLetterSpacing}px`,\n          });\n        }\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.PlayerResized, () => {\n      if (enabled) {\n        updateCEA608FontSize();\n      } else {\n        fontSizeCalculationRequired = true;\n      }\n    });\n\n    this.preprocessLabelEventCallback.subscribe((event: SubtitleCueEvent, label: SubtitleLabel) => {\n      const isCEA608 = event.position != null;\n      if (!isCEA608) {\n        // Skip all non-CEA608 cues\n        return;\n      }\n\n      if (!enabled) {\n        enabled = true;\n        this.getDomElement().addClass(this.prefixCss(SubtitleOverlay.CLASS_CEA_608));\n\n        // We conditionally update the font size by this flag here to avoid updating every time a subtitle\n        // is added into an empty overlay. Because we reset the overlay when all subtitles are gone, this\n        // would trigger an unnecessary update every time, but it's only required under certain conditions,\n        // e.g. after the player size has changed.\n        if (fontSizeCalculationRequired) {\n          updateCEA608FontSize();\n          fontSizeCalculationRequired = false;\n        }\n      }\n\n      label.getDomElement().css({\n        'left': `${event.position.column * SubtitleOverlay.CEA608_COLUMN_OFFSET}%`,\n        'top': `${event.position.row * SubtitleOverlay.CEA608_ROW_OFFSET}%`,\n        'font-size': `${fontSize}px`,\n        'letter-spacing': `${fontLetterSpacing}px`,\n      });\n    });\n\n    const reset = () => {\n      this.getDomElement().removeClass(this.prefixCss(SubtitleOverlay.CLASS_CEA_608));\n      enabled = false;\n    };\n\n    player.on(player.exports.PlayerEvent.CueExit, () => {\n      if (!this.subtitleManager.hasCues) {\n        // Disable CEA-608 mode when all subtitles are gone (to allow correct formatting and\n        // display of other types of subtitles, e.g. the formatting preview subtitle)\n        reset();\n      }\n    });\n\n    player.on(player.exports.PlayerEvent.SourceUnloaded, reset);\n    player.on(player.exports.PlayerEvent.SubtitleEnabled, reset);\n    player.on(player.exports.PlayerEvent.SubtitleDisabled, reset);\n  }\n\n  enablePreviewSubtitleLabel(): void {\n    this.previewSubtitleActive = true;\n    if (!this.subtitleManager.hasCues) {\n      this.subtitleContainerManager.addLabel(this.previewSubtitle);\n      this.updateComponents();\n      this.show();\n    }\n  }\n\n  removePreviewSubtitleLabel(): void {\n    this.previewSubtitleActive = false;\n    this.subtitleContainerManager.removeLabel(this.previewSubtitle);\n    this.updateComponents();\n  }\n}\n\ninterface ActiveSubtitleCue {\n  event: SubtitleCueEvent;\n  label: SubtitleLabel;\n}\n\ninterface ActiveSubtitleCueMap {\n  [id: string]: ActiveSubtitleCue[];\n}\n\ninterface SubtitleLabelConfig extends LabelConfig {\n  region?: string;\n  regionStyle?: string;\n}\n\nclass SubtitleLabel extends Label<SubtitleLabelConfig> {\n\n  constructor(config: SubtitleLabelConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-subtitle-label',\n    }, this.config);\n  }\n\n  get region(): string {\n    return this.config.region;\n  }\n\n  get regionStyle(): string {\n    return this.config.regionStyle;\n  }\n}\n\nclass ActiveSubtitleManager {\n\n  private activeSubtitleCueMap: ActiveSubtitleCueMap;\n  private activeSubtitleCueCount: number;\n\n  constructor() {\n    this.activeSubtitleCueMap = {};\n    this.activeSubtitleCueCount = 0;\n  }\n\n  /**\n   * Calculates a unique ID for a subtitle cue, which is needed to associate an CueEnter with its CueExit\n   * event so we can remove the correct subtitle in CueExit when multiple subtitles are active at the same time.\n   * The start time plus the text should make a unique identifier, and in the only case where a collision\n   * can happen, two similar texts will be displayed at a similar time and a similar position (or without position).\n   * The start time should always be known, because it is required to schedule the CueEnter event. The end time\n   * must not necessarily be known and therefore cannot be used for the ID.\n   * @param event\n   * @return {string}\n   */\n  private static calculateId(event: SubtitleCueEvent): string {\n    let id = event.start + '-' + event.text;\n\n    if (event.position) {\n      id += '-' + event.position.row + '-' + event.position.column;\n    }\n\n    return id;\n  }\n\n  /**\n   * Adds a subtitle cue to the manager and returns the label that should be added to the subtitle overlay.\n   * @param event\n   * @return {SubtitleLabel}\n   */\n  cueEnter(event: SubtitleCueEvent): SubtitleLabel {\n    let id = ActiveSubtitleManager.calculateId(event);\n\n    let label = new SubtitleLabel({\n      // Prefer the HTML subtitle text if set, else try generating a image tag as string from the image attribute,\n      // else use the plain text\n      text: event.html || ActiveSubtitleManager.generateImageTagText(event.image) || event.text,\n      region: event.region,\n      regionStyle: event.regionStyle,\n    });\n\n    // Create array for id if it does not exist\n    this.activeSubtitleCueMap[id] = this.activeSubtitleCueMap[id] || [];\n\n    // Add cue\n    this.activeSubtitleCueMap[id].push({ event, label });\n    this.activeSubtitleCueCount++;\n\n    return label;\n  }\n\n  private static generateImageTagText(imageData: string): string {\n    if (!imageData) {\n      return;\n    }\n\n    const imgTag = new DOM('img', {\n      src: imageData,\n    });\n    imgTag.css('width', '100%');\n    return imgTag.get(0).outerHTML; // return the html as string\n  }\n\n  /**\n   * Returns the label associated with an already added cue.\n   * @param event\n   * @return {SubtitleLabel}\n   */\n  getCues(event: SubtitleCueEvent): SubtitleLabel[] {\n    let id = ActiveSubtitleManager.calculateId(event);\n    let activeSubtitleCues = this.activeSubtitleCueMap[id];\n    if (activeSubtitleCues && activeSubtitleCues.length > 0) {\n      return activeSubtitleCues.map((cue) => cue.label);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Removes the subtitle cue from the manager and returns the label that should be removed from the subtitle overlay,\n   * or null if there is no associated label existing (e.g. because all labels have been {@link #clear cleared}.\n   * @param event\n   * @return {SubtitleLabel|null}\n   */\n  cueExit(event: SubtitleCueEvent): SubtitleLabel {\n    let id = ActiveSubtitleManager.calculateId(event);\n    let activeSubtitleCues = this.activeSubtitleCueMap[id];\n\n    if (activeSubtitleCues && activeSubtitleCues.length > 0) {\n      // Remove cue\n      /* We apply the FIFO approach here and remove the oldest cue from the associated id. When there are multiple cues\n       * with the same id, there is no way to know which one of the cues is to be deleted, so we just hope that FIFO\n       * works fine. Theoretically it can happen that two cues with colliding ids are removed at different times, in\n       * the wrong order. This rare case has yet to be observed. If it ever gets an issue, we can take the unstable\n       * cue end time (which can change between CueEnter and CueExit IN CueUpdate) and use it as an\n       * additional hint to try and remove the correct one of the colliding cues.\n       */\n      let activeSubtitleCue = activeSubtitleCues.shift();\n      this.activeSubtitleCueCount--;\n\n      return activeSubtitleCue.label;\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Returns the number of active subtitle cues.\n   * @return {number}\n   */\n  get cueCount(): number {\n    // We explicitly count the cues to save an Array.reduce on every cueCount call (which can happen frequently)\n    return this.activeSubtitleCueCount;\n  }\n\n  /**\n   * Returns true if there are active subtitle cues, else false.\n   * @return {boolean}\n   */\n  get hasCues(): boolean {\n    return this.cueCount > 0;\n  }\n\n  /**\n   * Removes all subtitle cues from the manager.\n   */\n  clear(): void {\n    this.activeSubtitleCueMap = {};\n    this.activeSubtitleCueCount = 0;\n  }\n}\n\nexport class SubtitleRegionContainerManager {\n  private subtitleRegionContainers: { [regionName: string]: SubtitleRegionContainer } = {};\n\n  /**\n   * @param subtitleOverlay Reference to the subtitle overlay for adding and removing the containers.\n   */\n  constructor(private subtitleOverlay: SubtitleOverlay) {\n    this.subtitleOverlay = subtitleOverlay;\n  }\n\n  /**\n   * Creates and wraps a subtitle label into a container div based on the subtitle region.\n   * If the subtitle has positioning information it is added to the container.\n   * @param label The subtitle label to wrap\n   */\n  addLabel(label: SubtitleLabel): void {\n    const regionName = label.region || 'default';\n    if (!this.subtitleRegionContainers[regionName]) {\n      const regionContainer = new SubtitleRegionContainer({\n        cssClass: `subtitle-position-${regionName}`,\n      });\n\n      this.subtitleRegionContainers[regionName] = regionContainer;\n\n      if (label.regionStyle) {\n        regionContainer.getDomElement().attr('style', label.regionStyle);\n      } else {\n        // getDomElement needs to be called at least once to ensure the component exists\n        regionContainer.getDomElement();\n      }\n\n      for (const regionName in this.subtitleRegionContainers) {\n        this.subtitleOverlay.addComponent(this.subtitleRegionContainers[regionName]);\n      }\n    }\n\n    this.subtitleRegionContainers[regionName].addLabel(label);\n  }\n\n  /**\n   * Removes a subtitle label from a container.\n   */\n  removeLabel(label: SubtitleLabel): void {\n    const region = label.region || 'default';\n    for (const regionName in this.subtitleRegionContainers) {\n      this.subtitleRegionContainers[regionName].removeLabel(label);\n    }\n\n    // Remove container if no more labels are displayed\n    if (this.subtitleRegionContainers[region].isEmpty()) {\n      this.subtitleOverlay.removeComponent(this.subtitleRegionContainers[region]);\n      delete this.subtitleRegionContainers[region];\n    }\n  }\n\n  /**\n   * Removes all subtitle containers.\n   */\n  clear(): void {\n    for (const regionName in this.subtitleRegionContainers) {\n      this.subtitleOverlay.removeComponent(this.subtitleRegionContainers[regionName]);\n    }\n\n    this.subtitleRegionContainers = {};\n  }\n}\n\nclass SubtitleRegionContainer extends Container<ContainerConfig> {\n  private labelCount = 0;\n\n  constructor(config: ContainerConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['subtitle-region-container'],\n    }, this.config);\n  }\n\n  addLabel(labelToAdd: SubtitleLabel) {\n    this.labelCount++;\n    this.addComponent(labelToAdd);\n    this.updateComponents();\n  }\n\n  removeLabel(labelToRemove: SubtitleLabel): void {\n    this.labelCount--;\n    this.removeComponent(labelToRemove);\n    this.updateComponents();\n  }\n\n  public isEmpty(): boolean {\n    return this.labelCount === 0;\n  }\n}","import {SelectBox} from './selectbox';\nimport {ListSelectorConfig} from './listselector';\nimport {UIInstanceManager} from '../uimanager';\nimport {SubtitleSwitchHandler} from '../subtitleutils';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * A select box providing a selection between available subtitle and caption tracks.\n */\nexport class SubtitleSelectBox extends SelectBox {\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitleselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    new SubtitleSwitchHandler(player, this, uimanager);\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different background colors.\n */\nexport class BackgroundColorSelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingsbackgroundcolorselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('white', i18n.getLocalizer('colors.white'));\n    this.addItem('black', i18n.getLocalizer('colors.black'));\n    this.addItem('red', i18n.getLocalizer('colors.red'));\n    this.addItem('green', i18n.getLocalizer('colors.green'));\n    this.addItem('blue', i18n.getLocalizer('colors.blue'));\n    this.addItem('cyan', i18n.getLocalizer('colors.cyan'));\n    this.addItem('yellow', i18n.getLocalizer('colors.yellow'));\n    this.addItem('magenta', i18n.getLocalizer('colors.magenta'));\n\n    let setColorAndOpacity = () => {\n      if (this.settingsManager.backgroundColor.isSet() && this.settingsManager.backgroundOpacity.isSet()) {\n        this.toggleOverlayClass(\n          'bgcolor-' + this.settingsManager.backgroundColor.value + this.settingsManager.backgroundOpacity.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n    };\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.backgroundColor.value = key;\n    });\n\n    this.settingsManager.backgroundColor.onChanged.subscribe((sender, property) => {\n      // Color and opacity go together, so we need to...\n      if (!this.settingsManager.backgroundColor.isSet()) {\n        // ... clear the opacity when the color is not set\n        this.settingsManager.backgroundOpacity.clear();\n      } else if (!this.settingsManager.backgroundOpacity.isSet()) {\n        // ... set an opacity when the color is set\n        this.settingsManager.backgroundOpacity.value = '100';\n      }\n      this.selectItem(property.value);\n      setColorAndOpacity();\n    });\n\n    this.settingsManager.backgroundOpacity.onChanged.subscribe(() => {\n      setColorAndOpacity();\n    });\n\n    // Load initial value\n    if (this.settingsManager.backgroundColor.isSet()) {\n      this.selectItem(this.settingsManager.backgroundColor.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different background opacity.\n */\nexport class BackgroundOpacitySelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingsbackgroundopacityselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('100', i18n.getLocalizer('percent', { value: 100 }));\n    this.addItem('75', i18n.getLocalizer('percent', { value: 75 }));\n    this.addItem('50', i18n.getLocalizer('percent', { value: 50 }));\n    this.addItem('25', i18n.getLocalizer('percent', { value: 25 }));\n    this.addItem('0', i18n.getLocalizer('percent', { value: 0 }));\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.backgroundOpacity.value = key;\n\n      // Color and opacity go together, so we need to...\n      if (!this.settingsManager.backgroundOpacity.isSet()) {\n        // ... clear the color when the opacity is not set\n        this.settingsManager.backgroundColor.clear();\n      } else if (!this.settingsManager.backgroundColor.isSet()) {\n        // ... set a color when the opacity is set\n        this.settingsManager.backgroundColor.value = 'black';\n      }\n    });\n\n    // Update selected item when value is set from somewhere else\n    this.settingsManager.backgroundOpacity.onChanged.subscribe((sender, property) => {\n      this.selectItem(property.value);\n    });\n\n    // Load initial value\n    if (this.settingsManager.backgroundOpacity.isSet()) {\n      this.selectItem(this.settingsManager.backgroundOpacity.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different character edge.\n */\nexport class CharacterEdgeSelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingscharacteredgeselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('raised', i18n.getLocalizer('settings.subtitles.characterEdge.raised'));\n    this.addItem('depressed', i18n.getLocalizer('settings.subtitles.characterEdge.depressed'));\n    this.addItem('uniform', i18n.getLocalizer('settings.subtitles.characterEdge.uniform'));\n    this.addItem('dropshadowed', i18n.getLocalizer('settings.subtitles.characterEdge.dropshadowed'));\n\n    this.settingsManager.characterEdge.onChanged.subscribe((sender, property) => {\n      if (property.isSet()) {\n        this.toggleOverlayClass('characteredge-' + property.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n\n      // Select the item in case the property was set from outside\n      this.selectItem(property.value);\n    });\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.characterEdge.value = key;\n    });\n\n    // Load initial value\n    if (this.settingsManager.characterEdge.isSet()) {\n      this.selectItem(this.settingsManager.characterEdge.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different font colors.\n */\nexport class FontColorSelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingsfontcolorselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('white', i18n.getLocalizer('colors.white'));\n    this.addItem('black', i18n.getLocalizer('colors.black'));\n    this.addItem('red', i18n.getLocalizer('colors.red'));\n    this.addItem('green', i18n.getLocalizer('colors.green'));\n    this.addItem('blue', i18n.getLocalizer('colors.blue'));\n    this.addItem('cyan', i18n.getLocalizer('colors.cyan'));\n    this.addItem('yellow', i18n.getLocalizer('colors.yellow'));\n    this.addItem('magenta', i18n.getLocalizer('colors.magenta'));\n\n    let setColorAndOpacity = () => {\n      if (this.settingsManager.fontColor.isSet() && this.settingsManager.fontOpacity.isSet()) {\n        this.toggleOverlayClass(\n          'fontcolor-' + this.settingsManager.fontColor.value + this.settingsManager.fontOpacity.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n    };\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.fontColor.value = key;\n    });\n\n    this.settingsManager.fontColor.onChanged.subscribe((sender, property) => {\n      // Color and opacity go together, so we need to...\n      if (!this.settingsManager.fontColor.isSet()) {\n        // ... clear the opacity when the color is not set\n        this.settingsManager.fontOpacity.clear();\n      } else if (!this.settingsManager.fontOpacity.isSet()) {\n        // ... set an opacity when the color is set\n        this.settingsManager.fontOpacity.value = '100';\n      }\n      this.selectItem(property.value);\n      setColorAndOpacity();\n    });\n\n    this.settingsManager.fontOpacity.onChanged.subscribe(() => {\n      setColorAndOpacity();\n    });\n\n    // Load initial value\n    if (this.settingsManager.fontColor.isSet()) {\n      this.selectItem(this.settingsManager.fontColor.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different font family.\n */\nexport class FontFamilySelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingsfontfamilyselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('monospacedserif', i18n.getLocalizer('settings.subtitles.font.family.monospacedserif'));\n    this.addItem('proportionalserif', i18n.getLocalizer('settings.subtitles.font.family.proportionalserif'));\n    this.addItem('monospacedsansserif', i18n.getLocalizer('settings.subtitles.font.family.monospacedsansserif'));\n    this.addItem('proportionalsansserif', i18n.getLocalizer('settings.subtitles.font.family.proportionalserif'));\n    this.addItem('casual', i18n.getLocalizer('settings.subtitles.font.family.casual'));\n    this.addItem('cursive', i18n.getLocalizer('settings.subtitles.font.family.cursive'));\n    this.addItem('smallcapital', i18n.getLocalizer('settings.subtitles.font.family.smallcapital'));\n\n    this.settingsManager.fontFamily.onChanged.subscribe((sender, property) => {\n      if (property.isSet()) {\n        this.toggleOverlayClass('fontfamily-' + property.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n\n      // Select the item in case the property was set from outside\n      this.selectItem(property.value);\n    });\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.fontFamily.value = key;\n    });\n\n    // Load initial value\n    if (this.settingsManager.fontFamily.isSet()) {\n      this.selectItem(this.settingsManager.fontFamily.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different font colors.\n */\nexport class FontOpacitySelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingsfontopacityselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('100', i18n.getLocalizer('percent', { value: 100 }));\n    this.addItem('75', i18n.getLocalizer('percent', { value: 75 }));\n    this.addItem('50', i18n.getLocalizer('percent', { value: 50 }));\n    this.addItem('25', i18n.getLocalizer('percent', { value: 25 }));\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.fontOpacity.value = key;\n\n      // Color and opacity go together, so we need to...\n      if (!this.settingsManager.fontOpacity.isSet()) {\n        // ... clear the color when the opacity is not set\n        this.settingsManager.fontColor.clear();\n      } else if (!this.settingsManager.fontColor.isSet()) {\n        // ... set a color when the opacity is set\n        this.settingsManager.fontColor.value = 'white';\n      }\n    });\n\n    // Update selected item when value is set from somewhere else\n    this.settingsManager.fontOpacity.onChanged.subscribe((sender, property) => {\n      this.selectItem(property.value);\n    });\n\n    // Load initial value\n    if (this.settingsManager.fontOpacity.isSet()) {\n      this.selectItem(this.settingsManager.fontOpacity.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different font colors.\n */\nexport class FontSizeSelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingsfontsizeselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('50', i18n.getLocalizer('percent', { value: 50 }));\n    this.addItem('75', i18n.getLocalizer('percent', { value: 75 }));\n    this.addItem('100', i18n.getLocalizer('percent', { value: 100 }));\n    this.addItem('150', i18n.getLocalizer('percent', { value: 150 }));\n    this.addItem('200', i18n.getLocalizer('percent', { value: 200 }));\n    this.addItem('300', i18n.getLocalizer('percent', { value: 300 }));\n    this.addItem('400', i18n.getLocalizer('percent', { value: 400 }));\n\n    this.settingsManager.fontSize.onChanged.subscribe((sender, property) => {\n      if (property.isSet()) {\n        this.toggleOverlayClass('fontsize-' + property.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n\n      // Select the item in case the property was set from outside\n      this.selectItem(property.value);\n    });\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.fontSize.value = key;\n    });\n\n    // Load initial value\n    if (this.settingsManager.fontSize.isSet()) {\n      this.selectItem(this.settingsManager.fontSize.value);\n    }\n  }\n}\n","import {SubtitleOverlay} from '../subtitleoverlay';\nimport {ListSelectorConfig} from '../listselector';\nimport {SelectBox} from '../selectbox';\nimport {SubtitleSettingsManager} from './subtitlesettingsmanager';\n\nexport interface SubtitleSettingSelectBoxConfig extends ListSelectorConfig {\n  overlay: SubtitleOverlay;\n  settingsManager: SubtitleSettingsManager;\n}\n\n/**\n * Base class for all subtitles settings select box\n **/\nexport class SubtitleSettingSelectBox extends SelectBox {\n\n  protected settingsManager: SubtitleSettingsManager;\n  protected overlay: SubtitleOverlay;\n  private currentCssClass: string;\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.settingsManager = config.settingsManager;\n    this.overlay = config.overlay;\n  }\n\n  /**\n   * Removes a previously set class and adds the passed in class.\n   * @param cssClass The new class to replace the previous class with or null to just remove the previous class\n   */\n  protected toggleOverlayClass(cssClass: string): void {\n    // Remove previous class if existing\n    if (this.currentCssClass) {\n      this.overlay.getDomElement().removeClass(this.currentCssClass);\n      this.currentCssClass = null;\n    }\n\n    // Add new class if specified. If the new class is null, we don't add anything.\n    if (cssClass) {\n      this.currentCssClass = this.prefixCss(cssClass);\n      this.overlay.getDomElement().addClass(this.currentCssClass);\n    }\n  }\n}\n","import {LabelConfig} from '../label';\nimport {Container, ContainerConfig} from '../container';\nimport {DOM} from '../../dom';\nimport {SettingsPanelPageOpenButton} from '../settingspanelpageopenbutton';\nimport { LocalizableText, i18n } from '../../localization/i18n';\n\nexport interface SubtitleSettingsLabelConfig extends LabelConfig {\n  opener: SettingsPanelPageOpenButton;\n}\n\nexport class SubtitleSettingsLabel extends Container<ContainerConfig> {\n\n  private opener: SettingsPanelPageOpenButton;\n\n  private text: LocalizableText;\n\n  constructor(config: SubtitleSettingsLabelConfig) {\n    super(config);\n\n    this.opener = config.opener;\n    this.text = config.text;\n\n    this.config = this.mergeConfig(<ContainerConfig>config, {\n      cssClass: 'ui-label',\n      components: [\n        this.opener,\n      ],\n    }, this.config);\n  }\n\n  protected toDomElement(): DOM {\n    let labelElement = new DOM('span', {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n    }).append(\n      new DOM('span', {}).html(i18n.performLocalization(this.text)),\n      this.opener.getDomElement(),\n    );\n\n    return labelElement;\n  }\n}\n","import {StorageUtils} from '../../storageutils';\nimport {Component, ComponentConfig} from '../component';\nimport {EventDispatcher, Event} from '../../eventdispatcher';\n\ninterface SubtitleSettings {\n  fontColor?: string;\n  fontOpacity?: string;\n  fontFamily?: string;\n  fontSize?: string;\n  characterEdge?: string;\n  backgroundColor?: string;\n  backgroundOpacity?: string;\n  windowColor?: string;\n  windowOpacity?: string;\n}\n\ninterface Properties {\n  [name: string]: SubtitleSettingsProperty<string>;\n}\n\nexport class SubtitleSettingsManager {\n\n  private userSettings: SubtitleSettings;\n  private localStorageKey: string;\n\n  private _properties: Properties = {\n    fontColor: new SubtitleSettingsProperty<string>(this),\n    fontOpacity: new SubtitleSettingsProperty<string>(this),\n    fontFamily: new SubtitleSettingsProperty<string>(this),\n    fontSize: new SubtitleSettingsProperty<string>(this),\n    characterEdge: new SubtitleSettingsProperty<string>(this),\n    backgroundColor: new SubtitleSettingsProperty<string>(this),\n    backgroundOpacity: new SubtitleSettingsProperty<string>(this),\n    windowColor: new SubtitleSettingsProperty<string>(this),\n    windowOpacity: new SubtitleSettingsProperty<string>(this),\n  };\n\n  constructor() {\n    this.userSettings = {};\n    this.localStorageKey = DummyComponent.instance().prefixCss('subtitlesettings');\n\n    for (let propertyName in this._properties) {\n      this._properties[propertyName].onChanged.subscribe((sender, property) => {\n        if (property.isSet()) {\n          (<any>this.userSettings)[propertyName] = property.value;\n        } else {\n          // Delete the property from the settings object if unset to avoid serialization of null values\n          delete (<any>this.userSettings)[propertyName];\n        }\n\n        // Save the settings object when a property has changed\n        this.save();\n      });\n    }\n\n    this.load();\n  }\n\n  public reset(): void {\n    for (let propertyName in this._properties) {\n      this._properties[propertyName].clear();\n    }\n  }\n\n  public get fontColor(): SubtitleSettingsProperty<string> {\n    return this._properties.fontColor;\n  }\n\n  public get fontOpacity(): SubtitleSettingsProperty<string> {\n    return this._properties.fontOpacity;\n  }\n\n  public get fontFamily(): SubtitleSettingsProperty<string> {\n    return this._properties.fontFamily;\n  }\n\n  public get fontSize(): SubtitleSettingsProperty<string> {\n    return this._properties.fontSize;\n  }\n\n  public get characterEdge(): SubtitleSettingsProperty<string> {\n    return this._properties.characterEdge;\n  }\n\n  public get backgroundColor(): SubtitleSettingsProperty<string> {\n    return this._properties.backgroundColor;\n  }\n\n  public get backgroundOpacity(): SubtitleSettingsProperty<string> {\n    return this._properties.backgroundOpacity;\n  }\n\n  public get windowColor(): SubtitleSettingsProperty<string> {\n    return this._properties.windowColor;\n  }\n\n  public get windowOpacity(): SubtitleSettingsProperty<string> {\n    return this._properties.windowOpacity;\n  }\n\n  /**\n   * Saves the settings to local storage.\n   */\n  public save(): void {\n    StorageUtils.setObject(this.localStorageKey, this.userSettings);\n  }\n\n  /**\n   * Loads the settings from local storage\n   */\n  public load(): void {\n    this.userSettings = StorageUtils.getObject<SubtitleSettings>(this.localStorageKey) || {};\n\n    // Apply the loaded settings\n    for (let property in this.userSettings) {\n      this._properties[property].value = (<any>this.userSettings)[property];\n    }\n  }\n}\n\n/**\n * A dummy component whose sole purpose is to expose the {@link #prefixCss} method to the\n * {@link SubtitleSettingsManager}.\n */\nclass DummyComponent extends Component<ComponentConfig> {\n\n  private static _instance: DummyComponent;\n\n  public static instance(): DummyComponent {\n    if (!DummyComponent._instance) {\n      DummyComponent._instance = new DummyComponent();\n    }\n\n    return DummyComponent._instance;\n  }\n\n  public prefixCss(cssClassOrId: string): string {\n    return super.prefixCss(cssClassOrId);\n  }\n}\n\nexport class SubtitleSettingsProperty<T> {\n\n  private _manager: SubtitleSettingsManager;\n  private _onChanged: EventDispatcher<SubtitleSettingsManager, SubtitleSettingsProperty<T>>;\n  private _value: T;\n\n  constructor(manager: SubtitleSettingsManager) {\n    this._manager = manager;\n    this._onChanged = new EventDispatcher<SubtitleSettingsManager, SubtitleSettingsProperty<T>>();\n  }\n\n  public isSet(): boolean {\n    return this._value != null;\n  }\n\n  public clear(): void {\n    this._value = null;\n    this.onChangedEvent(null);\n  }\n\n  public get value(): T {\n    return this._value;\n  }\n\n  public set value(value: T) {\n    if (typeof value === 'string' && value === 'null') {\n      value = null;\n    }\n\n    this._value = value;\n    this.onChangedEvent(value);\n  }\n\n  protected onChangedEvent(value: T) {\n    this._onChanged.dispatch(this._manager, this);\n  }\n\n  public get onChanged(): Event<SubtitleSettingsManager, SubtitleSettingsProperty<T>> {\n    return this._onChanged.getEvent();\n  }\n}","import {SettingsPanelPage} from '../settingspanelpage';\nimport {SettingsPanel} from '../settingspanel';\nimport {SubtitleOverlay} from '../subtitleoverlay';\nimport {ContainerConfig} from '../container';\nimport {SubtitleSettingsManager} from './subtitlesettingsmanager';\nimport {Component, ComponentConfig} from '../component';\nimport {FontSizeSelectBox} from './fontsizeselectbox';\nimport {FontFamilySelectBox} from './fontfamilyselectbox';\nimport {FontColorSelectBox} from './fontcolorselectbox';\nimport {FontOpacitySelectBox} from './fontopacityselectbox';\nimport {CharacterEdgeSelectBox} from './characteredgeselectbox';\nimport {BackgroundColorSelectBox} from './backgroundcolorselectbox';\nimport {BackgroundOpacitySelectBox} from './backgroundopacityselectbox';\nimport {WindowColorSelectBox} from './windowcolorselectbox';\nimport {WindowOpacitySelectBox} from './windowopacityselectbox';\nimport {SubtitleSettingsResetButton} from './subtitlesettingsresetbutton';\nimport {UIInstanceManager} from '../../uimanager';\nimport {SettingsPanelPageBackButton} from '../settingspanelpagebackbutton';\nimport {SettingsPanelItem} from '../settingspanelitem';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\nexport interface SubtitleSettingsPanelPageConfig extends ContainerConfig {\n  settingsPanel: SettingsPanel;\n  overlay: SubtitleOverlay;\n}\n\nexport class SubtitleSettingsPanelPage extends SettingsPanelPage {\n\n  private readonly overlay: SubtitleOverlay;\n  private readonly settingsPanel: SettingsPanel;\n\n  constructor(config: SubtitleSettingsPanelPageConfig) {\n    super(config);\n\n    this.overlay = config.overlay;\n    this.settingsPanel = config.settingsPanel;\n\n    let manager = new SubtitleSettingsManager();\n\n    this.config = this.mergeConfig(config, {\n      components: <Component<ComponentConfig>[]>[\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.font.size'), new FontSizeSelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.font.family'), new FontFamilySelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.font.color'), new FontColorSelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.font.opacity'), new FontOpacitySelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.characterEdge'), new CharacterEdgeSelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.background.color'), new BackgroundColorSelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.background.opacity'), new BackgroundOpacitySelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.window.color'), new WindowColorSelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.window.opacity'), new WindowOpacitySelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(new SettingsPanelPageBackButton({\n          container: this.settingsPanel,\n          text: i18n.getLocalizer('back'),\n        }), new SubtitleSettingsResetButton({\n          settingsManager: manager,\n        })),\n      ],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onActive.subscribe(() => {\n      this.overlay.enablePreviewSubtitleLabel();\n    });\n\n    this.onInactive.subscribe(() => {\n      this.overlay.removePreviewSubtitleLabel();\n    });\n  }\n}","import {UIInstanceManager} from '../../uimanager';\nimport {SubtitleSettingsManager} from './subtitlesettingsmanager';\nimport {Button, ButtonConfig} from '../button';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\nexport interface SubtitleSettingsResetButtonConfig extends ButtonConfig {\n  settingsManager: SubtitleSettingsManager;\n}\n\n/**\n * A button that resets all subtitle settings to their defaults.\n */\nexport class SubtitleSettingsResetButton extends Button<ButtonConfig> {\n\n  constructor(config: SubtitleSettingsResetButtonConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-subtitlesettingsresetbutton',\n      text: i18n.getLocalizer('reset'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onClick.subscribe(() => {\n      (<SubtitleSettingsResetButtonConfig>this.config).settingsManager.reset();\n    });\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different background colors.\n */\nexport class WindowColorSelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingswindowcolorselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('white', i18n.getLocalizer('colors.white'));\n    this.addItem('black', i18n.getLocalizer('colors.black'));\n    this.addItem('red', i18n.getLocalizer('colors.red'));\n    this.addItem('green', i18n.getLocalizer('colors.green'));\n    this.addItem('blue', i18n.getLocalizer('colors.blue'));\n    this.addItem('cyan', i18n.getLocalizer('colors.cyan'));\n    this.addItem('yellow', i18n.getLocalizer('colors.yellow'));\n    this.addItem('magenta', i18n.getLocalizer('colors.magenta'));\n\n\n\n    let setColorAndOpacity = () => {\n      if (this.settingsManager.windowColor.isSet() && this.settingsManager.windowOpacity.isSet()) {\n        this.toggleOverlayClass(\n          'windowcolor-' + this.settingsManager.windowColor.value + this.settingsManager.windowOpacity.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n    };\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.windowColor.value = key;\n    });\n\n    this.settingsManager.windowColor.onChanged.subscribe((sender, property) => {\n      // Color and opacity go together, so we need to...\n      if (!this.settingsManager.windowColor.isSet()) {\n        // ... clear the opacity when the color is not set\n        this.settingsManager.windowOpacity.clear();\n      } else if (!this.settingsManager.windowOpacity.isSet()) {\n        // ... set an opacity when the color is set\n        this.settingsManager.windowOpacity.value = '100';\n      }\n      this.selectItem(property.value);\n      setColorAndOpacity();\n    });\n\n    this.settingsManager.windowOpacity.onChanged.subscribe(() => {\n      setColorAndOpacity();\n    });\n\n    // Load initial value\n    if (this.settingsManager.windowColor.isSet()) {\n      this.selectItem(this.settingsManager.windowColor.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different background opacity.\n */\nexport class WindowOpacitySelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingswindowopacityselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('100', i18n.getLocalizer('percent', { value: 100 }));\n    this.addItem('75', i18n.getLocalizer('percent', { value: 75 }));\n    this.addItem('50', i18n.getLocalizer('percent', { value: 50 }));\n    this.addItem('25', i18n.getLocalizer('percent', { value: 25 }));\n    this.addItem('0', i18n.getLocalizer('percent', { value: 0 }));\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.windowOpacity.value = key;\n\n      // Color and opacity go together, so we need to...\n      if (!this.settingsManager.windowOpacity.isSet()) {\n        // ... clear the color when the opacity is not set\n        this.settingsManager.windowColor.clear();\n      } else if (!this.settingsManager.windowColor.isSet()) {\n        // ... set a color when the opacity is set\n        this.settingsManager.windowColor.value = 'black';\n      }\n    });\n\n    // Update selected item when value is set from somewhere else\n    this.settingsManager.windowOpacity.onChanged.subscribe((sender, property) => {\n      this.selectItem(property.value);\n    });\n\n    // Load initial value\n    if (this.settingsManager.windowOpacity.isSet()) {\n      this.selectItem(this.settingsManager.windowOpacity.value);\n    }\n  }\n}\n","import {Container, ContainerConfig} from './container';\nimport {UIInstanceManager} from '../uimanager';\nimport {MetadataLabel, MetadataLabelContent} from './metadatalabel';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * Configuration interface for a {@link TitleBar}.\n */\nexport interface TitleBarConfig extends ContainerConfig {\n  /**\n   * Specifies if the title bar should stay hidden when no metadata label contains any text. Does not make a lot\n   * of sense if the title bar contains other components than just MetadataLabels (like in the default configuration).\n   * Default: false\n   */\n  keepHiddenWithoutMetadata?: boolean;\n}\n\n/**\n * Displays a title bar containing a label with the title of the video.\n */\nexport class TitleBar extends Container<TitleBarConfig> {\n\n  constructor(config: TitleBarConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-titlebar',\n      hidden: true,\n      components: [\n        new MetadataLabel({ content: MetadataLabelContent.Title }),\n        new MetadataLabel({ content: MetadataLabelContent.Description }),\n      ],\n      keepHiddenWithoutMetadata: false,\n    }, <TitleBarConfig>this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let shouldBeShown = !this.isHidden();\n    let hasMetadataText = true; // Flag to track if any metadata label contains text\n\n    let checkMetadataTextAndUpdateVisibility = () => {\n      hasMetadataText = false;\n\n      // Iterate through metadata labels and check if at least one of them contains text\n      for (let component of this.getComponents()) {\n        if (component instanceof MetadataLabel) {\n          if (!component.isEmpty()) {\n            hasMetadataText = true;\n            break;\n          }\n        }\n      }\n\n      if (this.isShown()) {\n        // Hide a visible titlebar if it does not contain any text and the hidden flag is set\n        if (config.keepHiddenWithoutMetadata && !hasMetadataText) {\n          this.hide();\n        }\n      } else if (shouldBeShown) {\n        // Show a hidden titlebar if it should actually be shown\n        this.show();\n      }\n    };\n\n    // Listen to text change events to update the hasMetadataText flag when the metadata dynamically changes\n    for (let component of this.getComponents()) {\n      if (component instanceof MetadataLabel) {\n        component.onTextChanged.subscribe(checkMetadataTextAndUpdateVisibility);\n      }\n    }\n\n    uimanager.onControlsShow.subscribe(() => {\n      shouldBeShown = true;\n      if (!(config.keepHiddenWithoutMetadata && !hasMetadataText)) {\n        this.show();\n      }\n    });\n    uimanager.onControlsHide.subscribe(() => {\n      shouldBeShown = false;\n      this.hide();\n    });\n\n    // init\n    checkMetadataTextAndUpdateVisibility();\n  }\n}","import {Button, ButtonConfig} from './button';\nimport {NoArgs, EventDispatcher, Event} from '../eventdispatcher';\nimport { UIInstanceManager } from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { LocalizableText } from '../localization/i18n';\n\n/**\n * Configuration interface for a toggle button component.\n */\nexport interface ToggleButtonConfig extends ButtonConfig {\n  /**\n   * The CSS class that marks the on-state of the button.\n   */\n  onClass?: string;\n  /**\n   * The CSS class that marks the off-state of the button.\n   */\n  offClass?: string;\n  /**\n   * The text as string or as localize callback on the button.\n   */\n  text?: LocalizableText;\n}\n\n/**\n * A button that can be toggled between 'on' and 'off' states.\n */\nexport class ToggleButton<Config extends ToggleButtonConfig> extends Button<Config> {\n\n  private onState: boolean;\n\n  private toggleButtonEvents = {\n    onToggle: new EventDispatcher<ToggleButton<Config>, NoArgs>(),\n    onToggleOn: new EventDispatcher<ToggleButton<Config>, NoArgs>(),\n    onToggleOff: new EventDispatcher<ToggleButton<Config>, NoArgs>(),\n  };\n\n  constructor(config: Config) {\n    super(config);\n\n    const defaultConfig: ToggleButtonConfig = {\n      cssClass: 'ui-togglebutton',\n      onClass: 'on',\n      offClass: 'off',\n    };\n\n    this.config = this.mergeConfig(config, defaultConfig as Config, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n    const config = this.getConfig();\n    this.getDomElement().addClass(this.prefixCss(config.offClass));\n  }\n\n  /**\n   * Toggles the button to the 'on' state.\n   */\n  on() {\n    if (this.isOff()) {\n      const config = this.getConfig();\n\n      this.onState = true;\n      this.getDomElement().removeClass(this.prefixCss(config.offClass));\n      this.getDomElement().addClass(this.prefixCss(config.onClass));\n\n      this.onToggleEvent();\n      this.onToggleOnEvent();\n    }\n  }\n\n  /**\n   * Toggles the button to the 'off' state.\n   */\n  off() {\n    if (this.isOn()) {\n      const config = this.getConfig();\n\n      this.onState = false;\n      this.getDomElement().removeClass(this.prefixCss(config.onClass));\n      this.getDomElement().addClass(this.prefixCss(config.offClass));\n\n      this.onToggleEvent();\n      this.onToggleOffEvent();\n    }\n  }\n\n  /**\n   * Toggle the button 'on' if it is 'off', or 'off' if it is 'on'.\n   */\n  toggle() {\n    if (this.isOn()) {\n      this.off();\n    } else {\n      this.on();\n    }\n  }\n\n  /**\n   * Checks if the toggle button is in the 'on' state.\n   * @returns {boolean} true if button is 'on', false if 'off'\n   */\n  isOn(): boolean {\n    return this.onState;\n  }\n\n  /**\n   * Checks if the toggle button is in the 'off' state.\n   * @returns {boolean} true if button is 'off', false if 'on'\n   */\n  isOff(): boolean {\n    return !this.isOn();\n  }\n\n  protected onClickEvent() {\n    super.onClickEvent();\n\n    // Fire the toggle event together with the click event\n    // (they are technically the same, only the semantics are different)\n    this.onToggleEvent();\n  }\n\n  protected onToggleEvent() {\n    this.toggleButtonEvents.onToggle.dispatch(this);\n  }\n\n  protected onToggleOnEvent() {\n    this.toggleButtonEvents.onToggleOn.dispatch(this);\n  }\n\n  protected onToggleOffEvent() {\n    this.toggleButtonEvents.onToggleOff.dispatch(this);\n  }\n\n  /**\n   * Gets the event that is fired when the button is toggled.\n   * @returns {Event<ToggleButton<Config>, NoArgs>}\n   */\n  get onToggle(): Event<ToggleButton<Config>, NoArgs> {\n    return this.toggleButtonEvents.onToggle.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the button is toggled 'on'.\n   * @returns {Event<ToggleButton<Config>, NoArgs>}\n   */\n  get onToggleOn(): Event<ToggleButton<Config>, NoArgs> {\n    return this.toggleButtonEvents.onToggleOn.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the button is toggled 'off'.\n   * @returns {Event<ToggleButton<Config>, NoArgs>}\n   */\n  get onToggleOff(): Event<ToggleButton<Config>, NoArgs> {\n    return this.toggleButtonEvents.onToggleOff.getEvent();\n  }\n}","import {Component, ComponentConfig} from './component';\nimport {DOM} from '../dom';\n\n/**\n * Animated analog TV static noise.\n */\nexport class TvNoiseCanvas extends Component<ComponentConfig> {\n\n  private canvas: DOM;\n\n  private canvasElement: HTMLCanvasElement;\n  private canvasContext: CanvasRenderingContext2D;\n  private canvasWidth = 160;\n  private canvasHeight = 90;\n  private interferenceHeight = 50;\n  private lastFrameUpdate: number = 0;\n  private frameInterval: number = 60;\n  private useAnimationFrame: boolean = !!window.requestAnimationFrame;\n  private noiseAnimationWindowPos: number;\n  private frameUpdateHandlerId: number;\n\n  constructor(config: ComponentConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-tvnoisecanvas',\n    }, this.config);\n  }\n\n  protected toDomElement(): DOM {\n    return this.canvas = new DOM('canvas', { 'class': this.getCssClasses() });\n  }\n\n  start(): void {\n    this.canvasElement = <HTMLCanvasElement>this.canvas.get(0);\n    this.canvasContext = this.canvasElement.getContext('2d');\n    this.noiseAnimationWindowPos = -this.canvasHeight;\n    this.lastFrameUpdate = 0;\n\n    this.canvasElement.width = this.canvasWidth;\n    this.canvasElement.height = this.canvasHeight;\n\n    this.renderFrame();\n  }\n\n  stop(): void {\n    if (this.useAnimationFrame) {\n      cancelAnimationFrame(this.frameUpdateHandlerId);\n    } else {\n      clearTimeout(this.frameUpdateHandlerId);\n    }\n  }\n\n  private renderFrame(): void {\n    // This code has been copied from the player controls.js and simplified\n\n    if (this.lastFrameUpdate + this.frameInterval > new Date().getTime()) {\n      // It's too early to render the next frame\n      this.scheduleNextRender();\n      return;\n    }\n\n    let currentPixelOffset;\n    let canvasWidth = this.canvasWidth;\n    let canvasHeight = this.canvasHeight;\n\n    // Create texture\n    let noiseImage = this.canvasContext.createImageData(canvasWidth, canvasHeight);\n\n    // Fill texture with noise\n    for (let y = 0; y < canvasHeight; y++) {\n      for (let x = 0; x < canvasWidth; x++) {\n        currentPixelOffset = (canvasWidth * y * 4) + x * 4;\n        noiseImage.data[currentPixelOffset] = Math.random() * 255;\n        if (y < this.noiseAnimationWindowPos || y > this.noiseAnimationWindowPos + this.interferenceHeight) {\n          noiseImage.data[currentPixelOffset] *= 0.85;\n        }\n        noiseImage.data[currentPixelOffset + 1] = noiseImage.data[currentPixelOffset];\n        noiseImage.data[currentPixelOffset + 2] = noiseImage.data[currentPixelOffset];\n        noiseImage.data[currentPixelOffset + 3] = 50;\n      }\n    }\n\n    // Put texture onto canvas\n    this.canvasContext.putImageData(noiseImage, 0, 0);\n\n    this.lastFrameUpdate = new Date().getTime();\n    this.noiseAnimationWindowPos += 7;\n    if (this.noiseAnimationWindowPos > canvasHeight) {\n      this.noiseAnimationWindowPos = -canvasHeight;\n    }\n\n    this.scheduleNextRender();\n  }\n\n  private scheduleNextRender(): void {\n    if (this.useAnimationFrame) {\n      this.frameUpdateHandlerId = window.requestAnimationFrame(this.renderFrame.bind(this));\n    } else {\n      this.frameUpdateHandlerId = setTimeout(this.renderFrame.bind(this), this.frameInterval);\n    }\n  }\n}","import {ContainerConfig, Container} from './container';\nimport {UIInstanceManager} from '../uimanager';\nimport {DOM} from '../dom';\nimport {Timeout} from '../timeout';\nimport {PlayerUtils} from '../playerutils';\nimport { CancelEventArgs, EventDispatcher } from '../eventdispatcher';\nimport { PlayerAPI, PlayerResizedEvent } from 'bitmovin-player';\n\n/**\n * Configuration interface for a {@link UIContainer}.\n */\nexport interface UIContainerConfig extends ContainerConfig {\n  /**\n   * The delay in milliseconds after which the control bar will be hidden when there is no user interaction.\n   * Set to -1 for the UI to be always shown.\n   * Default: 5 seconds (5000)\n   */\n  hideDelay?: number;\n  /**\n   * An array of player states in which the UI will not be hidden, no matter what the {@link hideDelay} is.\n   */\n  hidePlayerStateExceptions?: PlayerUtils.PlayerState[];\n  /**\n   * The HTML element on which user interaction events (e.g. mouse and touch events) will be tracked to detect\n   * interaction with the UI. These basically trigger showing and hiding of the UI.\n   * Default: the UI container itself\n   */\n  userInteractionEventSource?: HTMLElement;\n}\n\n/**\n * The base container that contains all of the UI. The UIContainer is passed to the {@link UIManager} to build and\n * setup the UI.\n */\nexport class UIContainer extends Container<UIContainerConfig> {\n\n  private static readonly STATE_PREFIX = 'player-state-';\n\n  private static readonly FULLSCREEN = 'fullscreen';\n  private static readonly BUFFERING = 'buffering';\n  private static readonly REMOTE_CONTROL = 'remote-control';\n  private static readonly CONTROLS_SHOWN = 'controls-shown';\n  private static readonly CONTROLS_HIDDEN = 'controls-hidden';\n\n  private uiHideTimeout: Timeout;\n  private playerStateChange: EventDispatcher<UIContainer, PlayerUtils.PlayerState>;\n\n  private userInteractionEventSource: DOM;\n  private userInteractionEvents: { name: string, handler: EventListenerOrEventListenerObject }[];\n\n  constructor(config: UIContainerConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, <UIContainerConfig>{\n      cssClass: 'ui-uicontainer',\n      hideDelay: 5000,\n    }, this.config);\n\n    this.playerStateChange = new EventDispatcher<UIContainer, PlayerUtils.PlayerState>();\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    const config = this.getConfig();\n\n    if (config.userInteractionEventSource) {\n      this.userInteractionEventSource = new DOM(config.userInteractionEventSource);\n    } else {\n      this.userInteractionEventSource = this.getDomElement();\n    }\n\n    super.configure(player, uimanager);\n\n    this.configureUIShowHide(player, uimanager);\n    this.configurePlayerStates(player, uimanager);\n  }\n\n  private configureUIShowHide(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    let config = this.getConfig();\n\n    if (config.hideDelay === -1) {\n      uimanager.onConfigured.subscribe(() => uimanager.onControlsShow.dispatch(this));\n      return;\n    }\n\n    let isUiShown = false;\n    let isSeeking = false;\n    let isFirstTouch = true;\n    let playerState: PlayerUtils.PlayerState;\n\n    const hidingPrevented = (): boolean => {\n      return config.hidePlayerStateExceptions && config.hidePlayerStateExceptions.indexOf(playerState) > -1;\n    };\n\n    let showUi = () => {\n      if (!isUiShown) {\n        // Let subscribers know that they should reveal themselves\n        uimanager.onControlsShow.dispatch(this);\n        isUiShown = true;\n      }\n      // Don't trigger timeout while seeking (it will be triggered once the seek is finished) or casting\n      if (!isSeeking && !player.isCasting() && !hidingPrevented()) {\n        this.uiHideTimeout.start();\n      }\n    };\n\n    let hideUi = () => {\n      // Hide the UI only if it is shown, and if not casting\n      if (isUiShown && !player.isCasting()) {\n        // Issue a preview event to check if we are good to hide the controls\n        let previewHideEventArgs = <CancelEventArgs>{};\n        uimanager.onPreviewControlsHide.dispatch(this, previewHideEventArgs);\n\n        if (!previewHideEventArgs.cancel) {\n          // If the preview wasn't canceled, let subscribers know that they should now hide themselves\n          uimanager.onControlsHide.dispatch(this);\n          isUiShown = false;\n        } else {\n          // If the hide preview was canceled, continue to show UI\n          showUi();\n        }\n      }\n    };\n\n    // Timeout to defer UI hiding by the configured delay time\n    this.uiHideTimeout = new Timeout(config.hideDelay, hideUi);\n\n    this.userInteractionEvents = [{\n      // On touch displays, the first touch reveals the UI\n      name: 'touchend',\n      handler: (e) => {\n        if (!isUiShown) {\n          // Only if the UI is hidden, we prevent other actions (except for the first touch) and reveal the UI\n          // instead. The first touch is not prevented to let other listeners receive the event and trigger an\n          // initial action, e.g. the huge playback button can directly start playback instead of requiring a double\n          // tap which 1. reveals the UI and 2. starts playback.\n          if (isFirstTouch && !player.isPlaying()) {\n            isFirstTouch = false;\n          } else {\n            e.preventDefault();\n          }\n          showUi();\n        }\n      },\n    }, {\n      // When the mouse enters, we show the UI\n      name: 'mouseenter',\n      handler: () => {\n        showUi();\n      },\n    }, {\n      // When the mouse moves within, we show the UI\n      name: 'mousemove',\n      handler: () => {\n        showUi();\n      },\n    }, {\n      // When the mouse leaves, we can prepare to hide the UI, except a seek is going on\n      name: 'mouseleave',\n      handler: () => {\n        // When a seek is going on, the seek scrub pointer may exit the UI area while still seeking, and we do not\n        // hide the UI in such cases\n        if (!isSeeking && !hidingPrevented()) {\n          this.uiHideTimeout.start();\n        }\n      },\n    }];\n\n    this.userInteractionEvents.forEach((event) => this.userInteractionEventSource.on(event.name, event.handler));\n\n    uimanager.onSeek.subscribe(() => {\n      this.uiHideTimeout.clear(); // Don't hide UI while a seek is in progress\n      isSeeking = true;\n    });\n    uimanager.onSeeked.subscribe(() => {\n      isSeeking = false;\n      if (!hidingPrevented()) {\n        this.uiHideTimeout.start(); // Re-enable UI hide timeout after a seek\n      }\n    });\n    player.on(player.exports.PlayerEvent.CastStarted, () => {\n      showUi(); // Show UI when a Cast session has started (UI will then stay permanently on during the session)\n    });\n    this.playerStateChange.subscribe((_, state) => {\n      playerState = state;\n      if (hidingPrevented()) {\n        // Entering a player state that prevents hiding and forces the controls to be shown\n        this.uiHideTimeout.clear();\n        showUi();\n      } else {\n        // Entering a player state that allows hiding\n        this.uiHideTimeout.start();\n      }\n    });\n  }\n\n  private configurePlayerStates(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    let container = this.getDomElement();\n\n    // Convert player states into CSS class names\n    let stateClassNames = <any>[];\n    for (let state in PlayerUtils.PlayerState) {\n      if (isNaN(Number(state))) {\n        let enumName = PlayerUtils.PlayerState[<any>PlayerUtils.PlayerState[state]];\n        stateClassNames[PlayerUtils.PlayerState[state]] =\n          this.prefixCss(UIContainer.STATE_PREFIX + enumName.toLowerCase());\n      }\n    }\n\n    let removeStates = () => {\n      container.removeClass(stateClassNames[PlayerUtils.PlayerState.Idle]);\n      container.removeClass(stateClassNames[PlayerUtils.PlayerState.Prepared]);\n      container.removeClass(stateClassNames[PlayerUtils.PlayerState.Playing]);\n      container.removeClass(stateClassNames[PlayerUtils.PlayerState.Paused]);\n      container.removeClass(stateClassNames[PlayerUtils.PlayerState.Finished]);\n    };\n\n    const updateState = (state: PlayerUtils.PlayerState) => {\n      removeStates();\n      container.addClass(stateClassNames[state]);\n      this.playerStateChange.dispatch(this, state);\n    };\n\n    player.on(player.exports.PlayerEvent.SourceLoaded, () => {\n      updateState(PlayerUtils.PlayerState.Prepared);\n    });\n    player.on(player.exports.PlayerEvent.Play, () => {\n      updateState(PlayerUtils.PlayerState.Playing);\n    });\n    player.on(player.exports.PlayerEvent.Playing, () => {\n      updateState(PlayerUtils.PlayerState.Playing);\n    });\n    player.on(player.exports.PlayerEvent.Paused, () => {\n      updateState(PlayerUtils.PlayerState.Paused);\n    });\n    player.on(player.exports.PlayerEvent.PlaybackFinished, () => {\n      updateState(PlayerUtils.PlayerState.Finished);\n    });\n    player.on(player.exports.PlayerEvent.SourceUnloaded, () => {\n      updateState(PlayerUtils.PlayerState.Idle);\n    });\n    uimanager.getConfig().events.onUpdated.subscribe(() => {\n      updateState(PlayerUtils.getState(player));\n    });\n\n    // Fullscreen marker class\n    player.on(player.exports.PlayerEvent.ViewModeChanged, () => {\n      if (player.getViewMode() === player.exports.ViewMode.Fullscreen) {\n        container.addClass(this.prefixCss(UIContainer.FULLSCREEN));\n      } else {\n        container.removeClass(this.prefixCss(UIContainer.FULLSCREEN));\n      }\n    });\n    // Init fullscreen state\n    if (player.getViewMode() === player.exports.ViewMode.Fullscreen) {\n      container.addClass(this.prefixCss(UIContainer.FULLSCREEN));\n    }\n\n    // Buffering marker class\n    player.on(player.exports.PlayerEvent.StallStarted, () => {\n      container.addClass(this.prefixCss(UIContainer.BUFFERING));\n    });\n    player.on(player.exports.PlayerEvent.StallEnded, () => {\n      container.removeClass(this.prefixCss(UIContainer.BUFFERING));\n    });\n    // Init buffering state\n    if (player.isStalled()) {\n      container.addClass(this.prefixCss(UIContainer.BUFFERING));\n    }\n\n    // RemoteControl marker class\n    player.on(player.exports.PlayerEvent.CastStarted, () => {\n      container.addClass(this.prefixCss(UIContainer.REMOTE_CONTROL));\n    });\n    player.on(player.exports.PlayerEvent.CastStopped, () => {\n      container.removeClass(this.prefixCss(UIContainer.REMOTE_CONTROL));\n    });\n    // Init RemoteControl state\n    if (player.isCasting()) {\n      container.addClass(this.prefixCss(UIContainer.REMOTE_CONTROL));\n    }\n\n    // Controls visibility marker class\n    uimanager.onControlsShow.subscribe(() => {\n      container.removeClass(this.prefixCss(UIContainer.CONTROLS_HIDDEN));\n      container.addClass(this.prefixCss(UIContainer.CONTROLS_SHOWN));\n    });\n    uimanager.onControlsHide.subscribe(() => {\n      container.removeClass(this.prefixCss(UIContainer.CONTROLS_SHOWN));\n      container.addClass(this.prefixCss(UIContainer.CONTROLS_HIDDEN));\n    });\n\n    // Layout size classes\n    let updateLayoutSizeClasses = (width: number, height: number) => {\n      container.removeClass(this.prefixCss('layout-max-width-400'));\n      container.removeClass(this.prefixCss('layout-max-width-600'));\n      container.removeClass(this.prefixCss('layout-max-width-800'));\n      container.removeClass(this.prefixCss('layout-max-width-1200'));\n\n      if (width <= 400) {\n        container.addClass(this.prefixCss('layout-max-width-400'));\n      } else if (width <= 600) {\n        container.addClass(this.prefixCss('layout-max-width-600'));\n      } else if (width <= 800) {\n        container.addClass(this.prefixCss('layout-max-width-800'));\n      } else if (width <= 1200) {\n        container.addClass(this.prefixCss('layout-max-width-1200'));\n      }\n    };\n    player.on(player.exports.PlayerEvent.PlayerResized, (e: PlayerResizedEvent) => {\n      // Convert strings (with \"px\" suffix) to ints\n      let width = Math.round(Number(e.width.substring(0, e.width.length - 2)));\n      let height = Math.round(Number(e.height.substring(0, e.height.length - 2)));\n\n      updateLayoutSizeClasses(width, height);\n    });\n    // Init layout state\n    updateLayoutSizeClasses(new DOM(player.getContainer()).width(), new DOM(player.getContainer()).height());\n  }\n\n  release(): void {\n    // Explicitly unsubscribe user interaction event handlers because they could be attached to an external element\n    // that isn't owned by the UI and therefore not removed on release.\n    if (this.userInteractionEvents) {\n      this.userInteractionEvents.forEach((event) => this.userInteractionEventSource.off(event.name, event.handler));\n    }\n\n    super.release();\n\n    if (this.uiHideTimeout) {\n      this.uiHideTimeout.clear();\n    }\n  }\n\n  protected toDomElement(): DOM {\n    let container = super.toDomElement();\n\n    // Detect flexbox support (not supported in IE9)\n    if (document && typeof document.createElement('p').style.flex !== 'undefined') {\n      container.addClass(this.prefixCss('flexbox'));\n    } else {\n      container.addClass(this.prefixCss('no-flexbox'));\n    }\n\n    return container;\n  }\n}\n","import {SelectBox} from './selectbox';\nimport {ListSelectorConfig} from './listselector';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A select box providing a selection between 'auto' and the available video qualities.\n */\nexport class VideoQualitySelectBox extends SelectBox {\n\n  private hasAuto: boolean;\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-videoqualityselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let selectCurrentVideoQuality = () => {\n      this.selectItem(player.getVideoQuality().id);\n    };\n\n    let updateVideoQualities = () => {\n      let videoQualities = player.getAvailableVideoQualities();\n\n      this.clearItems();\n\n      // Progressive streams do not support automatic quality selection\n      this.hasAuto = player.getStreamType() !== 'progressive';\n\n      if (this.hasAuto) {\n        // Add entry for automatic quality switching (default setting)\n        this.addItem('auto', i18n.getLocalizer('auto'));\n      }\n\n      // Add video qualities\n      for (let videoQuality of videoQualities) {\n        this.addItem(videoQuality.id, videoQuality.label);\n      }\n\n      // Select initial quality\n      selectCurrentVideoQuality();\n    };\n\n    this.onItemSelected.subscribe((sender: VideoQualitySelectBox, value: string) => {\n      player.setVideoQuality(value);\n    });\n\n    // Update qualities when source goes away\n    player.on(player.exports.PlayerEvent.SourceUnloaded, updateVideoQualities);\n    // Update qualities when the period within a source changes\n    player.on(player.exports.PlayerEvent.PeriodSwitched, updateVideoQualities);\n    // Update quality selection when quality is changed (from outside)\n    player.on(player.exports.PlayerEvent.VideoQualityChanged, selectCurrentVideoQuality);\n\n    if ((player.exports.PlayerEvent as any).VideoQualityAdded) {\n      // Update qualities when their availability changed\n      // TODO: remove any cast after next player release\n      player.on((player.exports.PlayerEvent as any).VideoQualityAdded, updateVideoQualities);\n      player.on((player.exports.PlayerEvent as any).VideoQualityRemoved, updateVideoQualities);\n    }\n\n    uimanager.getConfig().events.onUpdated.subscribe(updateVideoQualities);\n  }\n\n  /**\n   * Returns true if the select box contains an 'auto' item for automatic quality selection mode.\n   * @return {boolean}\n   */\n  hasAutoItem(): boolean {\n    return this.hasAuto;\n  }\n}","import {Container, ContainerConfig} from './container';\nimport {VolumeSlider} from './volumeslider';\nimport {VolumeToggleButton} from './volumetogglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport {Timeout} from '../timeout';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * Configuration interface for a {@link VolumeControlButton}.\n */\nexport interface VolumeControlButtonConfig extends ContainerConfig {\n  /**\n   * The delay after which the volume slider will be hidden when there is no user interaction.\n   * Care must be taken that the delay is long enough so users can reach the slider from the toggle button, e.g. by\n   * mouse movement. If the delay is too short, the sliders disappears before the mouse pointer has reached it and\n   * the user is not able to use it.\n   * Default: 500ms\n   */\n  hideDelay?: number;\n  /**\n   * Specifies if the volume slider should be vertically or horizontally aligned.\n   * Default: true\n   */\n  vertical?: boolean;\n}\n\n/**\n * A composite volume control that consists of and internally manages a volume control button that can be used\n * for muting, and a (depending on the CSS style, e.g. slide-out) volume control bar.\n */\nexport class VolumeControlButton extends Container<VolumeControlButtonConfig> {\n\n  private volumeToggleButton: VolumeToggleButton;\n  private volumeSlider: VolumeSlider;\n\n  private volumeSliderHideTimeout: Timeout;\n\n  constructor(config: VolumeControlButtonConfig = {}) {\n    super(config);\n\n    this.volumeToggleButton = new VolumeToggleButton();\n    this.volumeSlider = new VolumeSlider({\n      vertical: config.vertical != null ? config.vertical : true,\n      hidden: true,\n    });\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-volumecontrolbutton',\n      components: [this.volumeToggleButton, this.volumeSlider],\n      hideDelay: 500,\n    }, <VolumeControlButtonConfig>this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let volumeToggleButton = this.getVolumeToggleButton();\n    let volumeSlider = this.getVolumeSlider();\n\n    this.volumeSliderHideTimeout = new Timeout(this.getConfig().hideDelay, () => {\n      volumeSlider.hide();\n    });\n\n    /*\n     * Volume Slider visibility handling\n     *\n     * The volume slider shall be visible while the user hovers the mute toggle button, while the user hovers the\n     * volume slider, and while the user slides the volume slider. If none of these situations are true, the slider\n     * shall disappear.\n     */\n    let volumeSliderHovered = false;\n    volumeToggleButton.getDomElement().on('mouseenter', () => {\n      // Show volume slider when mouse enters the button area\n      if (volumeSlider.isHidden()) {\n        volumeSlider.show();\n      }\n      // Avoid hiding of the slider when button is hovered\n      this.volumeSliderHideTimeout.clear();\n    });\n    volumeToggleButton.getDomElement().on('mouseleave', () => {\n      // Hide slider delayed when button is left\n      this.volumeSliderHideTimeout.reset();\n    });\n    volumeSlider.getDomElement().on('mouseenter', () => {\n      // When the slider is entered, cancel the hide timeout activated by leaving the button\n      this.volumeSliderHideTimeout.clear();\n      volumeSliderHovered = true;\n    });\n    volumeSlider.getDomElement().on('mouseleave', () => {\n      // When mouse leaves the slider, only hide it if there is no slide operation in progress\n      if (volumeSlider.isSeeking()) {\n        this.volumeSliderHideTimeout.clear();\n      } else {\n        this.volumeSliderHideTimeout.reset();\n      }\n      volumeSliderHovered = false;\n    });\n    volumeSlider.onSeeked.subscribe(() => {\n      // When a slide operation is done and the slider not hovered (mouse outside slider), hide slider delayed\n      if (!volumeSliderHovered) {\n        this.volumeSliderHideTimeout.reset();\n      }\n    });\n  }\n\n  release(): void {\n    super.release();\n    this.volumeSliderHideTimeout.clear();\n  }\n\n  /**\n   * Provides access to the internally managed volume toggle button.\n   * @returns {VolumeToggleButton}\n   */\n  getVolumeToggleButton(): VolumeToggleButton {\n    return this.volumeToggleButton;\n  }\n\n  /**\n   * Provides access to the internally managed volume silder.\n   * @returns {VolumeSlider}\n   */\n  getVolumeSlider(): VolumeSlider {\n    return this.volumeSlider;\n  }\n}","import { SeekBar, SeekBarConfig, SeekPreviewEventArgs } from './seekbar';\nimport { UIInstanceManager } from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { VolumeTransition } from '../volumecontroller';\n\n/**\n * Configuration interface for the {@link VolumeSlider} component.\n */\nexport interface VolumeSliderConfig extends SeekBarConfig {\n  /**\n   * Specifies if the volume slider should be automatically hidden when volume control is prohibited by the\n   * browser or platform. This currently only applies to iOS.\n   * Default: true\n   */\n  hideIfVolumeControlProhibited?: boolean;\n}\n\n/**\n * A simple volume slider component to adjust the player's volume setting.\n */\nexport class VolumeSlider extends SeekBar {\n\n  private static readonly issuerName = 'ui';\n\n  private volumeTransition: VolumeTransition;\n\n  constructor(config: VolumeSliderConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, <VolumeSliderConfig>{\n      cssClass: 'ui-volumeslider',\n      hideIfVolumeControlProhibited: true,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager, false);\n\n    let config = <VolumeSliderConfig>this.getConfig();\n\n    const volumeController = uimanager.getConfig().volumeController;\n\n    if (config.hideIfVolumeControlProhibited && !this.detectVolumeControlAvailability()) {\n      this.hide();\n\n      // We can just return from here, because the user will never interact with the control and any configured\n      // functionality would only eat resources for no reason.\n      return;\n    }\n\n    volumeController.onChanged.subscribe((_, args) => {\n      if (args.muted) {\n        this.setPlaybackPosition(0);\n      } else {\n        this.setPlaybackPosition(args.volume);\n      }\n    });\n\n    this.onSeek.subscribe(() => {\n      this.volumeTransition = volumeController.startTransition();\n    });\n\n    this.onSeekPreview.subscribeRateLimited(this.updateVolumeWhileScrubbing, 50);\n    this.onSeeked.subscribe((sender, percentage) => {\n      if (this.volumeTransition) {\n        this.volumeTransition.finish(percentage);\n      }\n    });\n\n    // Update the volume slider marker when the player resized, a source is loaded,\n    // or the UI is configured. Check the seekbar for a detailed description.\n    player.on(player.exports.PlayerEvent.PlayerResized, () => {\n      this.refreshPlaybackPosition();\n    });\n    uimanager.onConfigured.subscribe(() => {\n      this.refreshPlaybackPosition();\n    });\n\n    uimanager.getConfig().events.onUpdated.subscribe(() => {\n      this.refreshPlaybackPosition();\n    });\n\n    uimanager.onComponentShow.subscribe(() => {\n      this.refreshPlaybackPosition();\n    });\n    uimanager.onComponentHide.subscribe(() => {\n      this.refreshPlaybackPosition();\n    });\n\n    // Init volume bar\n    volumeController.onChangedEvent();\n  }\n\n  private updateVolumeWhileScrubbing = (sender: VolumeSlider, args: SeekPreviewEventArgs) => {\n    if (args.scrubbing && this.volumeTransition) {\n      this.volumeTransition.update(args.position);\n    }\n  };\n\n  private detectVolumeControlAvailability(): boolean {\n    /*\n     * \"On iOS devices, the audio level is always under the user’s physical control. The volume property is not\n     * settable in JavaScript. Reading the volume property always returns 1.\"\n     * https://developer.apple.com/library/content/documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/Device-SpecificConsiderations/Device-SpecificConsiderations.html\n     */\n    // as muted autoplay gets paused as soon as we unmute it, we may not touch the volume of the actual player so we\n    // probe a dummy audio element\n    const dummyVideoElement = document.createElement('video');\n    // try setting the volume to 0.7 and if it's still 1 we are on a volume control restricted device\n    dummyVideoElement.volume = 0.7;\n    return dummyVideoElement.volume !== 1;\n  }\n\n  release(): void {\n    super.release();\n\n    this.onSeekPreview.unsubscribe(this.updateVolumeWhileScrubbing);\n  }\n}\n","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport { UIInstanceManager } from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles audio muting.\n */\nexport class VolumeToggleButton extends ToggleButton<ToggleButtonConfig> {\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    const defaultConfig: ToggleButtonConfig = {\n      cssClass: 'ui-volumetogglebutton',\n      text: i18n.getLocalizer('settings.audio.mute'),\n      onClass: 'muted',\n      offClass: 'unmuted',\n    };\n\n    this.config = this.mergeConfig(config, defaultConfig, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    const volumeController = uimanager.getConfig().volumeController;\n\n    volumeController.onChanged.subscribe((_, args) => {\n      if (args.muted) {\n        this.on();\n      } else {\n        this.off();\n      }\n\n      const volumeLevelTens = Math.ceil(args.volume / 10);\n      this.getDomElement().data(this.prefixCss('volume-level-tens'), String(volumeLevelTens));\n    });\n\n    this.onClick.subscribe(() => {\n      volumeController.toggleMuted();\n    });\n\n    // Startup init\n    volumeController.onChangedEvent();\n  }\n}","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI, PlayerEventBase, WarningEvent } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles the video view between normal/mono and VR/stereo.\n */\nexport class VRToggleButton extends ToggleButton<ToggleButtonConfig> {\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-vrtogglebutton',\n      text: i18n.getLocalizer('vr'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let isVRConfigured = () => {\n      // VR availability cannot be checked through getVRStatus() because it is asynchronously populated and not\n      // available at UI initialization. As an alternative, we check the VR settings in the config.\n      // TODO use getVRStatus() through isVRStereoAvailable() once the player has been rewritten and the status is\n      // available in Ready\n      const source = player.getSource();\n      return source && Boolean(source.vr);\n    };\n\n    let isVRStereoAvailable = () => {\n      const source = player.getSource();\n      return player.vr && Boolean(source.vr);\n    };\n\n    let vrStateHandler = (ev: PlayerEventBase) => {\n      if (ev.type === player.exports.PlayerEvent.Warning\n        && (ev as WarningEvent).code !== player.exports.WarningCode.VR_RENDERING_ERROR) {\n        return;\n      }\n\n      if (isVRConfigured() && isVRStereoAvailable()) {\n        this.show(); // show button in case it is hidden\n\n        if (player.vr && player.vr.getStereo()) {\n          this.on();\n        } else {\n          this.off();\n        }\n      } else {\n        this.hide(); // hide button if no stereo mode available\n      }\n    };\n\n    let vrButtonVisibilityHandler = () => {\n      if (isVRConfigured()) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.VRStereoChanged, vrStateHandler);\n    player.on(player.exports.PlayerEvent.Warning, vrStateHandler);\n    // Hide button when VR source goes away\n    player.on(player.exports.PlayerEvent.SourceUnloaded, vrButtonVisibilityHandler);\n    uimanager.getConfig().events.onUpdated.subscribe(vrButtonVisibilityHandler);\n\n    this.onClick.subscribe(() => {\n      if (!isVRStereoAvailable()) {\n        if (console) {\n          console.log('No VR content');\n        }\n      } else {\n        if (player.vr && player.vr.getStereo()) {\n          player.vr.setStereo(false);\n        } else {\n          player.vr.setStereo(true);\n        }\n      }\n    });\n\n    // Set startup visibility\n    vrButtonVisibilityHandler();\n  }\n}","import {ClickOverlay, ClickOverlayConfig} from './clickoverlay';\n\n/**\n * Configuration interface for a {@link ClickOverlay}.\n */\nexport interface WatermarkConfig extends ClickOverlayConfig {\n  // nothing yet\n}\n\n/**\n * A watermark overlay with a clickable logo.\n */\nexport class Watermark extends ClickOverlay {\n\n  constructor(config: WatermarkConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-watermark',\n      url: 'http://bitmovin.com',\n    }, <WatermarkConfig>this.config);\n  }\n}","import {VRToggleButton} from './components/vrtogglebutton';\nimport {SettingsToggleButton} from './components/settingstogglebutton';\nimport {VolumeSlider} from './components/volumeslider';\nimport {PlaybackTimeLabel, PlaybackTimeLabelMode} from './components/playbacktimelabel';\nimport {AirPlayToggleButton} from './components/airplaytogglebutton';\nimport {ErrorMessageOverlay} from './components/errormessageoverlay';\nimport {ControlBar} from './components/controlbar';\nimport {CastToggleButton} from './components/casttogglebutton';\nimport {FullscreenToggleButton} from './components/fullscreentogglebutton';\nimport {RecommendationOverlay} from './components/recommendationoverlay';\nimport {PlaybackSpeedSelectBox} from './components/playbackspeedselectbox';\nimport {AudioQualitySelectBox} from './components/audioqualityselectbox';\nimport {CastStatusOverlay} from './components/caststatusoverlay';\nimport {UIContainer} from './components/uicontainer';\nimport {Watermark} from './components/watermark';\nimport {SubtitleOverlay} from './components/subtitleoverlay';\nimport {SettingsPanel} from './components/settingspanel';\nimport {SeekBarLabel} from './components/seekbarlabel';\nimport {PlaybackToggleOverlay} from './components/playbacktoggleoverlay';\nimport {PictureInPictureToggleButton} from './components/pictureinpicturetogglebutton';\nimport {Spacer} from './components/spacer';\nimport {Container} from './components/container';\nimport {VolumeToggleButton} from './components/volumetogglebutton';\nimport {PlaybackToggleButton} from './components/playbacktogglebutton';\nimport {SeekBar} from './components/seekbar';\nimport {VideoQualitySelectBox} from './components/videoqualityselectbox';\nimport {UIConditionContext, UIManager} from './uimanager';\nimport {TitleBar} from './components/titlebar';\nimport {BufferingOverlay} from './components/bufferingoverlay';\nimport {SubtitleListBox} from './components/subtitlelistbox';\nimport {AudioTrackListBox} from './components/audiotracklistbox';\nimport {SettingsPanelItem} from './components/settingspanelitem';\nimport {SettingsPanelPage} from './components/settingspanelpage';\nimport { UIFactory } from './uifactory';\nimport { UIConfig } from './uiconfig';\nimport { PlayerAPI } from 'bitmovin-player';\n\nexport namespace DemoFactory {\n\n  export function buildDemoWithSeparateAudioSubtitlesButtons(player: PlayerAPI, config: UIConfig = {}): UIManager {\n    // show smallScreen UI only on mobile/handheld devices\n    let smallScreenSwitchWidth = 600;\n\n    return new UIManager(player, [{\n      ui: UIFactory.modernSmallScreenAdsUI(),\n      condition: (context: UIConditionContext) => {\n        return context.isMobile && context.documentWidth < smallScreenSwitchWidth\n          && context.isAd && context.adRequiresUi;\n      },\n    }, {\n      ui: UIFactory.modernAdsUI(),\n      condition: (context: UIConditionContext) => {\n        return context.isAd && context.adRequiresUi;\n      },\n    }, {\n      ui: UIFactory.modernSmallScreenUI(),\n      condition: (context: UIConditionContext) => {\n        return context.isMobile && context.documentWidth < smallScreenSwitchWidth;\n      },\n    }, {\n      ui: modernUIWithSeparateAudioSubtitlesButtons(),\n    }], config);\n  }\n\n  function modernUIWithSeparateAudioSubtitlesButtons() {\n    let subtitleOverlay = new SubtitleOverlay();\n\n    let settingsPanel = new SettingsPanel({\n      components: [\n        new SettingsPanelPage({\n          components: [\n            new SettingsPanelItem('Video Quality', new VideoQualitySelectBox()),\n            new SettingsPanelItem('Speed', new PlaybackSpeedSelectBox()),\n            new SettingsPanelItem('Audio Quality', new AudioQualitySelectBox()),\n          ],\n        }),\n      ],\n      hidden: true,\n    });\n\n    let subtitleListBox = new SubtitleListBox();\n    let subtitleSettingsPanel = new SettingsPanel({\n      components: [\n        new SettingsPanelPage({\n          components: [\n            new SettingsPanelItem(null, subtitleListBox),\n          ],\n        }),\n      ],\n      hidden: true,\n    });\n\n    let audioTrackListBox = new AudioTrackListBox();\n    let audioTrackSettingsPanel = new SettingsPanel({\n      components: [\n        new SettingsPanelPage({\n          components: [\n            new SettingsPanelItem(null, audioTrackListBox),\n          ],\n        }),\n      ],\n      hidden: true,\n    });\n\n    let controlBar = new ControlBar({\n      components: [\n        audioTrackSettingsPanel,\n        subtitleSettingsPanel,\n        settingsPanel,\n        new Container({\n          components: [\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.CurrentTime, hideInLivePlayback: true }),\n            new SeekBar({ label: new SeekBarLabel() }),\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.TotalTime, cssClasses: ['text-right'] }),\n          ],\n          cssClasses: ['controlbar-top'],\n        }),\n        new Container({\n          components: [\n            new PlaybackToggleButton(),\n            new VolumeToggleButton(),\n            new VolumeSlider(),\n            new Spacer(),\n            new PictureInPictureToggleButton(),\n            new AirPlayToggleButton(),\n            new CastToggleButton(),\n            new VRToggleButton(),\n            new SettingsToggleButton({\n              settingsPanel: audioTrackSettingsPanel,\n              cssClass: 'ui-audiotracksettingstogglebutton',\n            }),\n            new SettingsToggleButton({\n              settingsPanel: subtitleSettingsPanel,\n              cssClass: 'ui-subtitlesettingstogglebutton',\n            }),\n            new SettingsToggleButton({ settingsPanel: settingsPanel }),\n            new FullscreenToggleButton(),\n          ],\n          cssClasses: ['controlbar-bottom'],\n        }),\n      ],\n    });\n\n    return new UIContainer({\n      components: [\n        subtitleOverlay,\n        new BufferingOverlay(),\n        new PlaybackToggleOverlay(),\n        new CastStatusOverlay(),\n        controlBar,\n        new TitleBar(),\n        new RecommendationOverlay(),\n        new Watermark(),\n        new ErrorMessageOverlay(),\n      ],\n    });\n  }\n}","export interface Offset {\n  left: number;\n  top: number;\n}\n\nexport interface CssProperties {\n  [propertyName: string]: string;\n}\n\n/**\n * Simple DOM manipulation and DOM element event handling modeled after jQuery (as replacement for jQuery).\n *\n * Like jQuery, DOM operates on single elements and lists of elements. For example: creating an element returns a DOM\n * instance with a single element, selecting elements returns a DOM instance with zero, one, or many elements. Similar\n * to jQuery, setters usually affect all elements, while getters operate on only the first element.\n * Also similar to jQuery, most methods (except getters) return the DOM instance facilitating easy chaining of method\n * calls.\n *\n * Built with the help of: http://youmightnotneedjquery.com/\n */\nexport class DOM {\n\n  private document: Document;\n\n  /**\n   * The list of elements that the instance wraps. Take care that not all methods can operate on the whole list,\n   * getters usually just work on the first element.\n   */\n  private elements: HTMLElement[];\n\n  /**\n   * Creates a DOM element.\n   * @param tagName the tag name of the DOM element\n   * @param attributes a list of attributes of the element\n   */\n  constructor(tagName: string, attributes: {[name: string]: string});\n  /**\n   * Selects all elements from the DOM that match the specified selector.\n   * @param selector the selector to match DOM elements with\n   */\n  constructor(selector: string);\n  /**\n   * Wraps a plain HTMLElement with a DOM instance.\n   * @param element the HTMLElement to wrap with DOM\n   */\n  constructor(element: HTMLElement);\n  /**\n   * Wraps a list of plain HTMLElements with a DOM instance.\n   * @param elements the HTMLElements to wrap with DOM\n   */\n  constructor(elements: HTMLElement[]);\n  /**\n   * Wraps the document with a DOM instance. Useful to attach event listeners to the document.\n   * @param document the document to wrap\n   */\n  constructor(document: Document);\n  constructor(something: string | HTMLElement | HTMLElement[] | Document, attributes?: {[name: string]: string}) {\n    this.document = document; // Set the global document to the local document field\n\n    if (something instanceof Array) {\n      if (something.length > 0 && something[0] instanceof HTMLElement) {\n        let elements = something;\n        this.elements = elements;\n      }\n    }\n    else if (something instanceof HTMLElement) {\n      let element = something;\n      this.elements = [element];\n    }\n    else if (something instanceof Document) {\n      // When a document is passed in, we do not do anything with it, but by setting this.elements to null\n      // we give the event handling method a means to detect if the events should be registered on the document\n      // instead of elements.\n      this.elements = null;\n    }\n    else if (attributes) {\n      let tagName = something;\n      let element = document.createElement(tagName);\n\n      for (let attributeName in attributes) {\n        let attributeValue = attributes[attributeName];\n        element.setAttribute(attributeName, attributeValue);\n      }\n\n      this.elements = [element];\n    }\n    else {\n      let selector = something;\n      this.elements = this.findChildElements(selector);\n    }\n  }\n\n  /**\n   * Gets the number of elements that this DOM instance currently holds.\n   * @returns {number} the number of elements\n   */\n  get length(): number {\n    return this.elements ? this.elements.length : 0;\n  }\n\n  /**\n   * Gets the HTML elements that this DOM instance currently holds.\n   * @returns {HTMLElement[]} the raw HTML elements\n   */\n  get(): HTMLElement[];\n  /**\n   * Gets an HTML element from the list elements that this DOM instance currently holds.\n   * @param index The zero-based index into the element list. Can be negative to return an element from the end,\n   *    e.g. -1 returns the last element.\n   */\n  get(index: number): HTMLElement;\n  get(index?: number): HTMLElement | HTMLElement[] {\n    if (index === undefined) {\n      return this.elements;\n    } else if (!this.elements || index >= this.elements.length || index < -this.elements.length) {\n      return undefined;\n    } else if (index < 0) {\n      return this.elements[this.elements.length - index];\n    } else {\n      return this.elements[index];\n    }\n  }\n\n  /**\n   * A shortcut method for iterating all elements. Shorts this.elements.forEach(...) to this.forEach(...).\n   * @param handler the handler to execute an operation on an element\n   */\n  private forEach(handler: (element: HTMLElement) => void): void {\n    if (!this.elements) {\n      return;\n    }\n    this.elements.forEach((element) => {\n      handler(element);\n    });\n  }\n\n  private findChildElementsOfElement(element: HTMLElement | Document, selector: string): HTMLElement[] {\n    let childElements = element.querySelectorAll(selector);\n\n    // Convert NodeList to Array\n    // https://toddmotto.com/a-comprehensive-dive-into-nodelists-arrays-converting-nodelists-and-understanding-the-dom/\n    return [].slice.call(childElements);\n  }\n\n  private findChildElements(selector: string): HTMLElement[] {\n    let allChildElements = <HTMLElement[]>[];\n\n    if (this.elements) {\n      this.forEach((element) => {\n        allChildElements = allChildElements.concat(this.findChildElementsOfElement(element, selector));\n      });\n    }\n    else {\n      return this.findChildElementsOfElement(document, selector);\n    }\n\n    return allChildElements;\n  }\n\n  /**\n   * Finds all child elements of all elements matching the supplied selector.\n   * @param selector the selector to match with child elements\n   * @returns {DOM} a new DOM instance representing all matched children\n   */\n  find(selector: string): DOM {\n    let allChildElements = this.findChildElements(selector);\n    return new DOM(allChildElements);\n  }\n\n  /**\n   * Returns a string of the inner HTML content of the first element.\n   */\n  html(): string;\n  /**\n   * Sets the inner HTML content of all elements.\n   * @param content a string of plain text or HTML markup\n   */\n  html(content: string): DOM;\n  html(content?: string): string | DOM {\n    if (arguments.length > 0) {\n      return this.setHtml(content);\n    }\n    else {\n      return this.getHtml();\n    }\n  }\n\n  private getHtml(): string | null {\n    return this.elements[0].innerHTML;\n  }\n\n  private setHtml(content: string): DOM {\n    if (content === undefined || content == null) {\n      // Set to empty string to avoid innerHTML getting set to 'undefined' (all browsers) or 'null' (IE9)\n      content = '';\n    }\n\n    this.forEach((element) => {\n      element.innerHTML = content;\n    });\n\n    return this;\n  }\n\n  /**\n   * Clears the inner HTML of all elements (deletes all children).\n   * @returns {DOM}\n   */\n  empty(): DOM {\n    this.forEach((element) => {\n      element.innerHTML = '';\n    });\n    return this;\n  }\n\n  /**\n   * Returns the current value of the first form element, e.g. the selected value of a select box or the text if an\n   * input field.\n   * @returns {string} the value of a form element\n   */\n  val(): string {\n    let element = this.elements[0];\n\n    if (element instanceof HTMLSelectElement || element instanceof HTMLInputElement) {\n      return element.value;\n    }\n    else {\n      // TODO add support for missing form elements\n      throw new Error(`val() not supported for ${typeof element}`);\n    }\n  }\n\n  /**\n   * Returns the value of an attribute on the first element.\n   * @param attribute\n   */\n  attr(attribute: string): string | null;\n  /**\n   * Sets an attribute on all elements.\n   * @param attribute the name of the attribute\n   * @param value the value of the attribute\n   */\n  attr(attribute: string, value: string): DOM;\n  attr(attribute: string, value?: string): string | null | DOM {\n    if (arguments.length > 1) {\n      return this.setAttr(attribute, value);\n    }\n    else {\n      return this.getAttr(attribute);\n    }\n  }\n\n  private getAttr(attribute: string): string | null {\n    return this.elements[0].getAttribute(attribute);\n  }\n\n  private setAttr(attribute: string, value: string): DOM {\n    this.forEach((element) => {\n      element.setAttribute(attribute, value);\n    });\n    return this;\n  }\n\n  /**\n   * Returns the value of a data element on the first element.\n   * @param dataAttribute the name of the data attribute without the 'data-' prefix\n   */\n  data(dataAttribute: string): string | null;\n  /**\n   * Sets a data attribute on all elements.\n   * @param dataAttribute the name of the data attribute without the 'data-' prefix\n   * @param value the value of the data attribute\n   */\n  data(dataAttribute: string, value: string): DOM;\n  data(dataAttribute: string, value?: string): string | null | DOM {\n    if (arguments.length > 1) {\n      return this.setData(dataAttribute, value);\n    }\n    else {\n      return this.getData(dataAttribute);\n    }\n  }\n\n  private getData(dataAttribute: string): string | null {\n    return this.elements[0].getAttribute('data-' + dataAttribute);\n  }\n\n  private setData(dataAttribute: string, value: string): DOM {\n    this.forEach((element) => {\n      element.setAttribute('data-' + dataAttribute, value);\n    });\n    return this;\n  }\n\n  /**\n   * Appends one or more DOM elements as children to all elements.\n   * @param childElements the chrild elements to append\n   * @returns {DOM}\n   */\n  append(...childElements: DOM[]): DOM {\n    this.forEach((element) => {\n      childElements.forEach((childElement) => {\n        childElement.elements.forEach((_, index) => {\n          element.appendChild(childElement.elements[index]);\n        });\n      });\n    });\n    return this;\n  }\n\n  /**\n   * Removes all elements from the DOM.\n   */\n  remove(): void {\n    this.forEach((element) => {\n      let parent = element.parentNode;\n      if (parent) {\n        parent.removeChild(element);\n      }\n    });\n  }\n\n  /**\n   * Returns the offset of the first element from the document's top left corner.\n   * @returns {Offset}\n   */\n  offset(): Offset {\n    let element = this.elements[0];\n    let elementRect = element.getBoundingClientRect();\n    let htmlRect = document.body.parentElement.getBoundingClientRect();\n\n    // Virtual viewport scroll handling (e.g. pinch zoomed viewports in mobile browsers or desktop Chrome/Edge)\n    // 'normal' zooms and virtual viewport zooms (aka layout viewport) result in different\n    // element.getBoundingClientRect() results:\n    //  - with normal scrolls, the clientRect decreases with an increase in scroll(Top|Left)/page(X|Y)Offset\n    //  - with pinch zoom scrolls, the clientRect stays the same while scroll/pageOffset changes\n    // This means, that the combination of clientRect + scroll/pageOffset does not work to calculate the offset\n    // from the document's upper left origin when pinch zoom is used.\n    // To work around this issue, we do not use scroll/pageOffset but get the clientRect of the html element and\n    // subtract it from the element's rect, which always results in the offset from the document origin.\n    // NOTE: the current way of offset calculation was implemented specifically to track event positions on the\n    // seek bar, and it might break compatibility with jQuery's offset() method. If this ever turns out to be a\n    // problem, this method should be reverted to the old version and the offset calculation moved to the seek bar.\n\n    return {\n      top: elementRect.top - htmlRect.top,\n      left: elementRect.left - htmlRect.left,\n    };\n  }\n\n  /**\n   * Returns the width of the first element.\n   * @returns {number} the width of the first element\n   */\n  width(): number {\n    // TODO check if this is the same as jQuery's width() (probably not)\n    return this.elements[0].offsetWidth;\n  }\n\n  /**\n   * Returns the height of the first element.\n   * @returns {number} the height of the first element\n   */\n  height(): number {\n    // TODO check if this is the same as jQuery's height() (probably not)\n    return this.elements[0].offsetHeight;\n  }\n\n  /**\n   * Attaches an event handler to one or more events on all elements.\n   * @param eventName the event name (or multiple names separated by space) to listen to\n   * @param eventHandler the event handler to call when the event fires\n   * @returns {DOM}\n   */\n  on(eventName: string, eventHandler: EventListenerOrEventListenerObject): DOM {\n    let events = eventName.split(' ');\n\n    events.forEach((event) => {\n      if (this.elements == null) {\n        this.document.addEventListener(event, eventHandler);\n      }\n      else {\n        this.forEach((element) => {\n          element.addEventListener(event, eventHandler);\n        });\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Removes an event handler from one or more events on all elements.\n   * @param eventName the event name (or multiple names separated by space) to remove the handler from\n   * @param eventHandler the event handler to remove\n   * @returns {DOM}\n   */\n  off(eventName: string, eventHandler: EventListenerOrEventListenerObject): DOM {\n    let events = eventName.split(' ');\n\n    events.forEach((event) => {\n      if (this.elements == null) {\n        this.document.removeEventListener(event, eventHandler);\n      }\n      else {\n        this.forEach((element) => {\n          element.removeEventListener(event, eventHandler);\n        });\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Adds the specified class(es) to all elements.\n   * @param className the class(es) to add, multiple classes separated by space\n   * @returns {DOM}\n   */\n  addClass(className: string): DOM {\n    this.forEach((element) => {\n      if (element.classList) {\n        const classNames = className.split(' ')\n          .filter(className => className.length > 0);\n\n        if (classNames.length > 0) {\n          element.classList.add(...classNames);\n        }\n      }\n      else {\n        element.className += ' ' + className;\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Removed the specified class(es) from all elements.\n   * @param className the class(es) to remove, multiple classes separated by space\n   * @returns {DOM}\n   */\n  removeClass(className: string): DOM {\n    this.forEach((element) => {\n      if (element.classList) {\n        const classNames = className.split(' ')\n          .filter(className => className.length > 0);\n\n        if (classNames.length > 0) {\n          element.classList.remove(...classNames);\n        }\n      }\n      else {\n        element.className = element.className.replace(\n          new RegExp('(^|\\\\b)' + className.split(' ').join('|') + '(\\\\b|$)', 'gi'), ' ');\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Checks if any of the elements has the specified class.\n   * @param className the class name to check\n   * @returns {boolean} true if one of the elements has the class attached, else if no element has it attached\n   */\n  hasClass(className: string): boolean {\n    let hasClass = false;\n\n    this.forEach((element) => {\n      if (element.classList) {\n        if (element.classList.contains(className)) {\n          // Since we are inside a handler, we can't just 'return true'. Instead, we save it to a variable\n          // and return it at the end of the function body.\n          hasClass = true;\n        }\n      }\n      else {\n        if (new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className)) {\n          // See comment above\n          hasClass = true;\n        }\n      }\n    });\n\n    return hasClass;\n  }\n\n  /**\n   * Returns the value of a CSS property of the first element.\n   * @param propertyName the name of the CSS property to retrieve the value of\n   */\n  css(propertyName: string): string | null;\n  /**\n   * Sets the value of a CSS property on all elements.\n   * @param propertyName the name of the CSS property to set the value for\n   * @param value the value to set for the given CSS property\n   */\n  css(propertyName: string, value: string): DOM;\n  /**\n   * Sets a collection of CSS properties and their values on all elements.\n   * @param propertyValueCollection an object containing pairs of property names and their values\n   */\n  css(propertyValueCollection: CssProperties): DOM;\n  css(propertyNameOrCollection: string | CssProperties, value?: string): string | null | DOM {\n    if (typeof propertyNameOrCollection === 'string') {\n      let propertyName = propertyNameOrCollection;\n\n      if (arguments.length === 2) {\n        return this.setCss(propertyName, value);\n      }\n      else {\n        return this.getCss(propertyName);\n      }\n    }\n    else {\n      let propertyValueCollection = propertyNameOrCollection;\n      return this.setCssCollection(propertyValueCollection);\n    }\n  }\n\n  private getCss(propertyName: string): string | null {\n    return getComputedStyle(this.elements[0])[<any>propertyName];\n  }\n\n  private setCss(propertyName: string, value: string): DOM {\n    this.forEach((element) => {\n      // <any> cast to resolve TS7015: http://stackoverflow.com/a/36627114/370252\n      element.style[<any>propertyName] = value;\n    });\n    return this;\n  }\n\n  private setCssCollection(ruleValueCollection: {[ruleName: string]: string}): DOM {\n    this.forEach((element) => {\n      // http://stackoverflow.com/a/34490573/370252\n      Object.assign(element.style, ruleValueCollection);\n    });\n\n    return this;\n  }\n}\n","import {ErrorMessageMap, ErrorMessageTranslator} from './components/errormessageoverlay';\nimport { ErrorEvent } from 'bitmovin-player';\n\nexport namespace ErrorUtils {\n\n  export const defaultErrorMessages: ErrorMessageMap = {\n    1000: 'Error is unknown',\n    1001: 'The player API is not available after a call to PlayerAPI.destroy.',\n    1100: 'General setup error',\n    1101: 'There was an error when inserting the HTML video element',\n    1102: 'No configuration was provided',\n    1103: 'The license is not valid',\n    1104: 'The the domain-locked player is not authorized to playback on this domain',\n    1105: 'The domain is not whitelisted',\n    1106: 'The license server URL is invalid',\n    1107: 'The impression server URL is invalid',\n    1108: 'Could not initialize a rendering engine',\n    1109: 'The used flash version does not support playback',\n    1110: 'Native Flash is not authorized by a valid Adobe token',\n    1111: 'Flash doesn\\'t have sufficient resources',\n    1112: 'Flash container API not available',\n    1113: 'Protocol not supported. This site has been loaded using \"file\" protocol, but unfortunately this is not supported. Please load the page using a web server (using http or https)',\n    1200: 'General source error',\n    1201: 'No valid source was provided',\n    1202: 'The downloaded manifest is invalid',\n    1203: 'There was no technology detected to playback the provided source',\n    1204: 'The stream type is not supported',\n    1205: 'The forced technology is not supported',\n    1206: 'No stream found for supported technologies.',\n    1207: 'The downloaded segment is empty',\n    1208: 'The manifest could not be loaded',\n    1209: 'Progressive stream type not supported or the stream has an error',\n    1210: 'HLS stream has an error',\n    1211: 'The encryption method is not supported',\n    1300: 'General playback error',\n    1301: 'Video decoder or demuxer had an error with the content',\n    1302: 'General error if Flash renderer has an error',\n    1303: 'Flash doesn\\'t have sufficient resources',\n    1304: 'The transmuxer could not be initialized',\n    1400: 'Network error while downloading',\n    1401: 'The manifest download timed out',\n    1402: 'The segment download timed out',\n    1403: 'The progressive stream download timed out',\n    1404: 'The Certificate could not be loaded',\n    2000: 'General DRM error',\n    2001: 'Required DRM configuration is missing',\n    2002: 'The licensing server URL is missing',\n    2003: 'License request failed',\n    2004: 'Key or KeyId is missing',\n    2005: 'Key size is not supported',\n    2006: 'Unable to instantiate a key system supporting the required combinations',\n    2007: 'Unable to create or initialize key session',\n    2008: 'The MediaKey object could not be created/initialized',\n    2009: 'Key error',\n    2010: 'The key system is not supported',\n    2011: 'The certificate is not valid',\n    2012: 'Invalid header key/value pair for PlayReady license request',\n    2013: 'Content cannot be played back because the output is restricted on this machine',\n    2014: 'DRM error for the Flash renderer',\n    2100: 'General VR error',\n    2101: 'Player technology not compatible with VR playback',\n    3000: 'General module error',\n    3001: 'The definition of the module is invalid (e.g. incomplete).',\n    3002: 'The module definition specifies dependencies but the module is not provided via a function for deferred loading.',\n    3003: 'A module cannot be loaded because it has not been added to the player core.',\n    3004: 'A module cannot be loaded because one or more dependencies are missing.',\n    3100: 'An Advertising module error has occurred. Refer to the attached AdvertisingError.',\n  };\n\n  export const defaultErrorMessageTranslator: ErrorMessageTranslator = (error: ErrorEvent) => {\n    const errorMessage = ErrorUtils.defaultErrorMessages[error.code];\n\n    if (errorMessage) {\n      // Use the error message text if there is one\n      return `${errorMessage}\\n(${error.name})`; // default error message style\n    } else {\n      // Fallback to error code/name if no message is defined\n      return `${error.code} ${error.name}`;\n    }\n  };\n}","import {ArrayUtils} from './arrayutils';\nimport { Timeout } from './timeout';\n/**\n * Function interface for event listeners on the {@link EventDispatcher}.\n */\nexport interface EventListener<Sender, Args> {\n  (sender: Sender, args: Args): void;\n}\n\n/**\n * Empty type for creating {@link EventDispatcher event dispatchers} that do not carry any arguments.\n */\nexport interface NoArgs {\n}\n\n/**\n * Event args for an event that can be canceled.\n */\nexport interface CancelEventArgs extends NoArgs {\n  /**\n   * Gets or sets a flag whether the event should be canceled.\n   */\n  cancel?: boolean;\n}\n\n/**\n * Public interface that represents an event. Can be used to subscribe to and unsubscribe from events.\n */\nexport interface Event<Sender, Args> {\n  /**\n   * Subscribes an event listener to this event dispatcher.\n   * @param listener the listener to add\n   */\n  subscribe(listener: EventListener<Sender, Args>): void;\n\n  /**\n   * Subscribes an event listener to this event dispatcher that is only called once.\n   * @param listener the listener to add\n   */\n  subscribeOnce(listener: EventListener<Sender, Args>): void;\n\n  /**\n   * Subscribes an event listener to this event dispatcher that will be called at a limited rate with a minimum\n   * interval of the specified milliseconds.\n   * @param listener the listener to add\n   * @param rateMs the rate in milliseconds to which calling of the listeners should be limited\n   */\n  subscribeRateLimited(listener: EventListener<Sender, Args>, rateMs: number): void;\n\n  /**\n   * Unsubscribes a subscribed event listener from this dispatcher.\n   * @param listener the listener to remove\n   * @returns {boolean} true if the listener was successfully unsubscribed, false if it isn't subscribed on this\n   *   dispatcher\n   */\n  unsubscribe(listener: EventListener<Sender, Args>): boolean;\n}\n\n/**\n * Event dispatcher to subscribe and trigger events. Each event should have its own dispatcher.\n */\nexport class EventDispatcher<Sender, Args> implements Event<Sender, Args> {\n\n  private listeners: EventListenerWrapper<Sender, Args>[] = [];\n\n  constructor() {\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  subscribe(listener: EventListener<Sender, Args>) {\n    this.listeners.push(new EventListenerWrapper(listener));\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  subscribeOnce(listener: EventListener<Sender, Args>) {\n    this.listeners.push(new EventListenerWrapper(listener, true));\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  subscribeRateLimited(listener: EventListener<Sender, Args>, rateMs: number) {\n    this.listeners.push(new RateLimitedEventListenerWrapper(listener, rateMs));\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  unsubscribe(listener: EventListener<Sender, Args>): boolean {\n    // Iterate through listeners, compare with parameter, and remove if found\n    // NOTE: In case we ever remove all matching listeners instead of just the first, we need to reverse-iterate here\n    for (let i = 0; i < this.listeners.length; i++) {\n      let subscribedListener = this.listeners[i];\n      if (subscribedListener.listener === listener) {\n        subscribedListener.clear();\n        ArrayUtils.remove(this.listeners, subscribedListener);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Removes all listeners from this dispatcher.\n   */\n  unsubscribeAll(): void {\n    // In case of RateLimitedEventListenerWrapper we need to make sure that the timeout callback won't be called\n    for (let listener of this.listeners) {\n      listener.clear();\n    }\n\n    this.listeners = [];\n  }\n\n  /**\n   * Dispatches an event to all subscribed listeners.\n   * @param sender the source of the event\n   * @param args the arguments for the event\n   */\n  dispatch(sender: Sender, args: Args = null) {\n    let listenersToRemove = [];\n\n    // Call every listener\n    // We iterate over a copy of the array of listeners to avoid the case where events are not fired on listeners when\n    // listeners are unsubscribed from within the event handlers during a dispatch (because the indices change and\n    // listeners are shifted within the array).\n    // This means that listener x+1 will still be called if unsubscribed from within the handler of listener x, as well\n    // as listener y+1 will not be called when subscribed from within the handler of listener y.\n    // Array.slice(0) is the fastest array copy method according to: https://stackoverflow.com/a/21514254/370252\n    const listeners = this.listeners.slice(0);\n    for (let listener of listeners) {\n      listener.fire(sender, args);\n\n      if (listener.isOnce()) {\n        listenersToRemove.push(listener);\n      }\n    }\n\n    // Remove one-time listener\n    for (let listenerToRemove of listenersToRemove) {\n      ArrayUtils.remove(this.listeners, listenerToRemove);\n    }\n  }\n\n  /**\n   * Returns the event that this dispatcher manages and on which listeners can subscribe and unsubscribe event handlers.\n   * @returns {Event}\n   */\n  getEvent(): Event<Sender, Args> {\n    // For now, just cast the event dispatcher to the event interface. At some point in the future when the\n    // codebase grows, it might make sense to split the dispatcher into separate dispatcher and event classes.\n    return <Event<Sender, Args>>this;\n  }\n}\n\n/**\n * A basic event listener wrapper to manage listeners within the {@link EventDispatcher}. This is a 'private' class\n * for internal dispatcher use and it is therefore not exported.\n */\nclass EventListenerWrapper<Sender, Args> {\n\n  private eventListener: EventListener<Sender, Args>;\n  private once: boolean;\n\n  constructor(listener: EventListener<Sender, Args>, once: boolean = false) {\n    this.eventListener = listener;\n    this.once = once;\n  }\n\n  /**\n   * Returns the wrapped event listener.\n   * @returns {EventListener<Sender, Args>}\n   */\n  get listener(): EventListener<Sender, Args> {\n    return this.eventListener;\n  }\n\n  /**\n   * Fires the wrapped event listener with the given arguments.\n   * @param sender\n   * @param args\n   */\n  fire(sender: Sender, args: Args) {\n    this.eventListener(sender, args);\n  }\n\n  /**\n   * Checks if this listener is scheduled to be called only once.\n   * @returns {boolean} once if true\n   */\n  isOnce(): boolean {\n    return this.once;\n  }\n\n  clear(): void {\n  }\n}\n\ninterface EventAttributes<Sender, Args> {\n  sender: Sender;\n  args: Args;\n}\n\n/**\n * Extends the basic {@link EventListenerWrapper} with rate-limiting functionality.\n */\nclass RateLimitedEventListenerWrapper<Sender, Args> extends EventListenerWrapper<Sender, Args> {\n\n  private readonly rateMs: number;\n  private readonly rateLimitingEventListener: EventListener<Sender, Args>;\n\n  // save last seen event attributes\n  private lastSeenEvent: EventAttributes<Sender, Args>;\n\n  private rateLimitTimout: Timeout;\n\n  constructor(listener: EventListener<Sender, Args>, rateMs: number) {\n    super(listener); // sets the event listener sink\n\n    this.rateMs = rateMs;\n\n    // starting limiting the events to the given value\n    const startRateLimiting = () => {\n      this.rateLimitTimout.start();\n    };\n\n    // timout for limiting the events\n    this.rateLimitTimout = new Timeout(this.rateMs, () => {\n      if (this.lastSeenEvent) {\n        this.fireSuper(this.lastSeenEvent.sender, this.lastSeenEvent.args);\n        startRateLimiting(); // start rateLimiting again to keep rate limit active even after firing the last seen event\n        this.lastSeenEvent = null;\n      }\n    });\n\n    // In case the events stopping during the rateLimiting we need to track the last seen one and delegate after the\n    // rate limiting is finished. This prevents missing the last update due to the rate limit.\n    this.rateLimitingEventListener = (sender: Sender, args: Args) => {\n      // only fire events if the rateLimiting is not running\n      if (this.shouldFireEvent()) {\n        this.fireSuper(sender, args);\n        startRateLimiting();\n        return;\n      }\n\n      this.lastSeenEvent = {\n        sender: sender,\n        args: args,\n      };\n    };\n  }\n\n  private shouldFireEvent(): boolean {\n    return !this.rateLimitTimout.isActive();\n  }\n\n  private fireSuper(sender: Sender, args: Args) {\n    // Fire the actual external event listener\n    super.fire(sender, args);\n  }\n\n  fire(sender: Sender, args: Args) {\n    // Fire the internal rate-limiting listener instead of the external event listener\n    this.rateLimitingEventListener(sender, args);\n  }\n\n  clear(): void {\n    super.clear();\n    this.rateLimitTimout.clear();\n  }\n}\n","export namespace Guid {\n\n  let guid = 1;\n\n  export function next() {\n    return guid++;\n  }\n}\n","import {DOM} from './dom';\n\nexport interface ImageLoadedCallback {\n  (url: string, width: number, height: number): void;\n}\n\ninterface ImageLoaderState {\n  url: string;\n  image: DOM;\n  loadedCallback: ImageLoadedCallback;\n  loaded: boolean;\n  width: number;\n  height: number;\n}\n\n/**\n * Tracks the loading state of images.\n */\nexport class ImageLoader {\n\n  private state: { [url: string]: ImageLoaderState; } = {};\n\n  /**\n   * Loads an image and call the callback once the image is loaded. If the image is already loaded, the callback\n   * is called immediately, else it is called once loading has finished. Calling this method multiple times for the\n   * same image while it is loading calls only let callback passed into the last call.\n   * @param url The url to the image to load\n   * @param loadedCallback The callback that is called when the image is loaded\n   */\n  load(url: string, loadedCallback: ImageLoadedCallback): void {\n    if (!this.state[url]) {\n      // When the image was never attempted to be loaded before, we create a state and store it in the state map\n      // for later use when the same image is requested to be loaded again.\n      let state: ImageLoaderState = {\n        url: url,\n        image: new DOM('img', {}),\n        loadedCallback: loadedCallback,\n        loaded: false,\n        width: 0,\n        height: 0,\n      };\n      this.state[url] = state;\n\n      // Listen to the load event, update the state and call the callback once the image is loaded\n      state.image.on('load', (e) => {\n        state.loaded = true;\n        state.width = (<HTMLImageElement>state.image.get(0)).width;\n        state.height = (<HTMLImageElement>state.image.get(0)).height;\n\n        this.callLoadedCallback(state);\n      });\n\n      // Set the image URL to start the loading\n      state.image.attr('src', state.url);\n    } else {\n      // We have a state for the requested image, so it is either already loaded or currently loading\n      let state = this.state[url];\n\n      // We overwrite the callback to make sure that only the callback of the latest call gets executed.\n      // Earlier callbacks become invalid once a new load call arrives, and they are not called as long as the image\n      // is not loaded.\n      state.loadedCallback = loadedCallback;\n\n      // When the image is already loaded, we directly execute the callback instead of waiting for the load event\n      if (state.loaded) {\n        this.callLoadedCallback(state);\n      }\n    }\n  }\n\n  private callLoadedCallback(state: ImageLoaderState): void {\n    state.loadedCallback(state.url, state.width, state.height);\n  }\n}\n","import vocabularyDe from './languages/de.json';\nimport vocabularyEn from './languages/en.json';\nimport { LocalizationConfig } from '../uimanager.js';\n\nexport const defaultVocabularies: Vocabularies = {\n  'en': vocabularyEn,\n  'de': vocabularyDe,\n};\n\nconst defaultLocalizationConfig: LocalizationConfig = {\n  language: 'en',\n  vocabularies: defaultVocabularies,\n};\n\ntype Localizer = () => string;\nexport type LocalizableText = string | Localizer;\n\ninterface Vocabulary {\n  'settings.video.quality': string;\n  'settings.audio.quality': string;\n  'settings.audio.track': string;\n  'settings.audio.mute': string;\n  'settings.subtitles': string;\n  'settings.subtitles.font.color': string;\n  'settings.subtitles.font.opacity': string;\n  'settings.subtitles.background.color': string;\n  'settings.subtitles.background.opacity': string;\n  'settings.subtitles.font.size': string;\n  'settings.subtitles.characterEdge': string;\n  'settings.subtitles.characterEdge.raised': string;\n  'settings.subtitles.characterEdge.depressed': string;\n  'settings.subtitles.characterEdge.uniform': string;\n  'settings.subtitles.characterEdge.dropshadowed': string;\n  'settings.subtitles.font.family': string;\n  'settings.subtitles.font.family.monospacedserif': string;\n  'settings.subtitles.font.family.proportionalserif': string;\n  'settings.subtitles.font.family.monospacedsansserif': string;\n  'settings.subtitles.font.family.proportionalsansserif': string;\n  'settings.subtitles.font.family.casual': string;\n  'settings.subtitles.font.family.cursive': string;\n  'settings.subtitles.font.family.smallcapital': string;\n  'settings.subtitles.window.color': string;\n  'settings.subtitles.window.opacity': string;\n  'colors.white': string;\n  'colors.black': string;\n  'colors.red': string;\n  'colors.green': string;\n  'colors.blue': string;\n  'colors.cyan': string;\n  'colors.yellow': string;\n  'colors.magenta': string;\n  'percent': string;\n  'settings': string;\n  'ads.remainingTime': string;\n  'pictureInPicture': string;\n  'appleAirplay': string;\n  'googleCast': string;\n  'vr': string;\n  'off': string;\n  'auto': string;\n  'back': string;\n  'reset': string;\n  'replay': string;\n  'normal': string;\n  'default': string;\n  'open': string;\n  'fullscreen': string;\n  'speed': string;\n  'playPause': string;\n  'live': string;\n  'subtitle.example': string;\n  'playingOn': string;\n  'connectingTo': string;\n}\n\nexport type CustomVocabulary<V> = V & Partial<Vocabulary>;\n\nexport interface Vocabularies {\n  [key: string]: CustomVocabulary<Record<string, string>>;\n}\n\nclass I18n {\n  private language: string;\n  private vocabulary: CustomVocabulary<Record<string, string>>;\n\n  constructor(config: LocalizationConfig) {\n    this.setConfig(config);\n  }\n\n  public setConfig(config: LocalizationConfig) {\n    const mergedConfig = { ...defaultLocalizationConfig, ...config };\n    const detectBrowserLanguage = mergedConfig.language === 'auto';\n    const vocabularies = this.mergeVocabulariesWithDefaultVocabularies(mergedConfig.vocabularies);\n    this.initializeLanguage(mergedConfig.language, detectBrowserLanguage, vocabularies);\n    this.initializeVocabulary(vocabularies);\n  }\n\n  private static containsLanguage(vocabularies: Vocabularies, language: string) {\n    return vocabularies.hasOwnProperty(language);\n  }\n\n  private mergeVocabulariesWithDefaultVocabularies(vocabularies: Vocabularies = {}) {\n    const rawVocabularies: Vocabularies = { ...defaultVocabularies, ...vocabularies };\n    return Object.keys(rawVocabularies).reduce((mergedVocabularies, language) => {\n      let vocabulary = rawVocabularies[language];\n      if (I18n.containsLanguage(defaultVocabularies, language) && I18n.containsLanguage(vocabularies, language)) {\n        vocabulary = { ...defaultVocabularies[language], ...vocabularies[language] };\n      }\n      return { ...mergedVocabularies, [language]: vocabulary };\n    }, {});\n  }\n\n  private initializeLanguage(\n    language: string,\n    browserLanguageDetectionEnabled: boolean,\n    vocabularies: Vocabularies,\n  ) {\n    if (browserLanguageDetectionEnabled) {\n      const userLanguage = window.navigator.language;\n\n      if (I18n.containsLanguage(vocabularies, userLanguage)) {\n        this.language = userLanguage;\n        return;\n      }\n      const shortenedUserLanguage = userLanguage.slice(0, 2);\n      if (I18n.containsLanguage(vocabularies, shortenedUserLanguage)) {\n        this.language = shortenedUserLanguage;\n        return;\n      }\n    }\n\n    this.language = language;\n  }\n\n  private initializeVocabulary(vocabularies: Vocabularies) {\n    this.vocabulary = ['en', this.language]\n      .reduce((vocab, lang) => ({ ...vocab, ...(vocabularies[lang] || {}) }), {});\n  }\n\n  private replaceVariableWithPlaceholderIfExists(text: string, config: any) {\n    const matches = text.match(new RegExp('{[a-zA-Z0-9]+}', 'g'));\n    if (matches.length === 0) {\n      return text;\n    }\n\n    return matches\n      .map((m: string) => ({ match: m, key: m.slice(1, -1) }))\n      .reduce((str, { key, match }) => config.hasOwnProperty(key) ? str.replace(match, config[key]) : str, text);\n  }\n\n  public getLocalizer<V extends CustomVocabulary<Record<string, string>> = CustomVocabulary<Record<string, string>>>(\n    key: keyof V,\n    config?: Record<string, string | number>,\n  ): Localizer {\n    return () => {\n      if (key == null) { // because sometimes we call toDomElement() without configuring the component or setting text...\n        return undefined;\n      }\n      let vocabularyString = this.vocabulary[key as string];\n\n      if (vocabularyString == null) {\n        vocabularyString = key as string;\n      }\n\n      if (config != null) {\n        vocabularyString = this.replaceVariableWithPlaceholderIfExists(vocabularyString, config);\n      }\n\n      return vocabularyString;\n    };\n  }\n\n  public performLocalization(text: LocalizableText) {\n    return typeof text === 'function' ? text() : text;\n  }\n}\n\nexport const i18n = new I18n(defaultLocalizationConfig);\n","module.exports={\n  \"settings.video.quality\": \"Videoqualität\",\n  \"settings.audio.quality\": \"Audioqualität\",\n  \"settings.audio.track\": \"Audiospur\",\n  \"speed\": \"Geschwindigkeit\",\n  \"playPause\": \"Abspielen/Pause\",\n  \"open\": \"öffnen\",\n  \"settings.audio.mute\": \"Lautstärke/Stummschaltung\",\n  \"pictureInPicture\": \"Bild im Bild\",\n  \"appleAirplay\": \"Apple AirPlay\",\n  \"googleCast\": \"Google Cast\",\n  \"vr\": \"VR\",\n  \"settings\": \"Einstellungen\",\n  \"fullscreen\": \"Vollbild\",\n  \"off\": \"aus\",\n  \"settings.subtitles\": \"Untertitel\",\n  \"settings.subtitles.font.size\": \"Größe\",\n  \"settings.subtitles.font.family\": \"Schriftart\",\n  \"settings.subtitles.font.color\": \"Farbe\",\n  \"settings.subtitles.font.opacity\": \"Deckkraft\",\n  \"settings.subtitles.characterEdge\": \"Ränder\",\n  \"settings.subtitles.background.color\": \"Hintergrundfarbe\",\n  \"settings.subtitles.background.opacity\": \"Hintergrunddeckkraft\",\n  \"settings.subtitles.window.color\": \"Hintergrundfarbe\",\n  \"settings.subtitles.window.opacity\": \"Hintergrunddeckkraft\",\n  \"back\": \"Zurück\",\n  \"reset\": \"Zurücksetzen\",\n  \"replay\": \"Wiederholen\",\n  \"ads.remainingTime\": \"Diese Anzeige endet in {remainingTime} Sekunden\",\n  \"default\": \"standard\",\n  \"colors.white\": \"weiß\",\n  \"colors.black\": \"schwarz\",\n  \"colors.red\": \"rot\",\n  \"colors.green\": \"grün\",\n  \"colors.blue\": \"blau\",\n  \"colors.yellow\": \"gelb\",\n  \"subtitle.example\": \"Beispiel Untertitel\",\n  \"playingOn\": \"Spielt auf <strong>{castDeviceName}</strong>\",\n  \"connectingTo\": \"Verbindung mit <strong>{castDeviceName}</strong> wird hergestellt...\"\n}\n","module.exports={\n  \"settings.video.quality\": \"Video Quality\",\n  \"settings.audio.quality\": \"Audio Quality\",\n  \"settings.audio.track\": \"Audio Track\",\n  \"settings.audio.mute\" : \"Volume/Mute\",\n  \"settings.subtitles.window.color\" : \"Window color\",\n  \"settings.subtitles.window.opacity\" : \"Window opacity\",\n  \"settings.subtitles\" : \"Subtitles\",\n  \"settings.subtitles.font.color\" : \"Font color\",\n  \"settings.subtitles.font.opacity\" : \"Font opacity\",\n  \"settings.subtitles.background.color\" : \"Background color\",\n  \"settings.subtitles.background.opacity\": \"Background opacity\",\n  \"colors.white\": \"white\",\n  \"colors.black\": \"black\",\n  \"colors.red\": \"red\",\n  \"colors.green\": \"green\",\n  \"colors.blue\": \"blue\",\n  \"colors.cyan\": \"cyan\",\n  \"colors.yellow\": \"yellow\",\n  \"colors.magenta\": \"magenta\",\n  \"percent\": \"{value}%\",\n  \"settings.subtitles.font.size\": \"Font size\",\n  \"settings.subtitles.characterEdge\": \"Character edge\",\n  \"settings.subtitles.characterEdge.raised\": \"raised\",\n  \"settings.subtitles.characterEdge.depressed\": \"depressed\",\n  \"settings.subtitles.characterEdge.uniform\": \"uniform\",\n  \"settings.subtitles.characterEdge.dropshadowed\": \"drop shadowed\",\n  \"settings.subtitles.font.family\": \"Font family\",\n  \"settings.subtitles.font.family.monospacedserif\": \"monospaced serif\",\n  \"settings.subtitles.font.family.proportionalserif\": \"proportional serif\",\n  \"settings.subtitles.font.family.monospacedsansserif\": \"monospaced sans serif\",\n  \"settings.subtitles.font.family.proportionalsansserif\": \"proportional sans serif\",\n  \"settings.subtitles.font.family.casual\": \"casual\",\n  \"settings.subtitles.font.family.cursive\": \"cursive\",\n  \"settings.subtitles.font.family.smallcapital\": \"small capital\",\n  \"ads.remainingTime\": \"This ad will end in {remainingTime} seconds.\",\n  \"settings\": \"Settings\",\n  \"fullscreen\" : \"Fullscreen\",\n  \"speed\": \"Speed\",\n  \"playPause\" : \"Play/Pause\",\n  \"open\": \"open\",\n  \"pictureInPicture\": \"Picture-in-Picture\",\n  \"appleAirplay\" : \"Apple AirPlay\",\n  \"googleCast\": \"Google Cast\",\n  \"vr\" : \"VR\",\n  \"off\": \"off\",\n  \"auto\": \"auto\",\n  \"back\" : \"Back\",\n  \"reset\": \"Reset\",\n  \"replay\": \"Replay\",\n  \"normal\": \"normal\",\n  \"default\": \"default\",\n  \"live\": \"Live\",\n  \"subtitle.example\": \"example subtitle\",\n  \"playingOn\": \"Playing on <strong>{castDeviceName}</strong>\",\n  \"connectingTo\": \"Connecting to <strong>{castDeviceName}</strong>...\"\n}\n","export const version: string = '{{VERSION}}';\n// Management\nexport { UIManager, UIInstanceManager } from './uimanager';\n// Factories\nexport { UIFactory } from './uifactory';\nexport { DemoFactory } from './demofactory';\n// Utils\nexport { ArrayUtils } from './arrayutils';\nexport { StringUtils } from './stringutils';\nexport { PlayerUtils } from './playerutils';\nexport { UIUtils } from './uiutils';\nexport { BrowserUtils } from './browserutils';\nexport { StorageUtils } from './storageutils';\nexport { ErrorUtils } from './errorutils';\n// Components\nexport { Button } from './components/button';\nexport { ControlBar } from './components/controlbar';\nexport { FullscreenToggleButton } from './components/fullscreentogglebutton';\nexport { HugePlaybackToggleButton } from './components/hugeplaybacktogglebutton';\nexport { PlaybackTimeLabel, PlaybackTimeLabelMode } from './components/playbacktimelabel';\nexport { PlaybackToggleButton } from './components/playbacktogglebutton';\nexport { SeekBar } from './components/seekbar';\nexport { SelectBox } from './components/selectbox';\nexport { ItemSelectionList } from './components/itemselectionlist';\nexport { SettingsPanel } from './components/settingspanel';\nexport { SettingsToggleButton } from './components/settingstogglebutton';\nexport { ToggleButton } from './components/togglebutton';\nexport { VideoQualitySelectBox } from './components/videoqualityselectbox';\nexport { VolumeToggleButton } from './components/volumetogglebutton';\nexport { VRToggleButton } from './components/vrtogglebutton';\nexport { Watermark } from './components/watermark';\nexport { UIContainer } from './components/uicontainer';\nexport { Container } from './components/container';\nexport { Label } from './components/label';\nexport { AudioQualitySelectBox } from './components/audioqualityselectbox';\nexport { AudioTrackSelectBox } from './components/audiotrackselectbox';\nexport { CastStatusOverlay } from './components/caststatusoverlay';\nexport { CastToggleButton } from './components/casttogglebutton';\nexport { Component } from './components/component';\nexport { ErrorMessageOverlay } from './components/errormessageoverlay';\nexport { RecommendationOverlay } from './components/recommendationoverlay';\nexport { SeekBarLabel } from './components/seekbarlabel';\nexport { SubtitleOverlay } from './components/subtitleoverlay';\nexport { SubtitleSelectBox } from './components/subtitleselectbox';\nexport { TitleBar } from './components/titlebar';\nexport { VolumeControlButton } from './components/volumecontrolbutton';\nexport { ClickOverlay } from './components/clickoverlay';\nexport { AdSkipButton } from './components/adskipbutton';\nexport { AdMessageLabel } from './components/admessagelabel';\nexport { AdClickOverlay } from './components/adclickoverlay';\nexport { PlaybackSpeedSelectBox } from './components/playbackspeedselectbox';\nexport { HugeReplayButton } from './components/hugereplaybutton';\nexport { BufferingOverlay } from './components/bufferingoverlay';\nexport { CastUIContainer } from './components/castuicontainer';\nexport { PlaybackToggleOverlay } from './components/playbacktoggleoverlay';\nexport { CloseButton } from './components/closebutton';\nexport { MetadataLabel, MetadataLabelContent } from './components/metadatalabel';\nexport { AirPlayToggleButton } from './components/airplaytogglebutton';\nexport { VolumeSlider } from './components/volumeslider';\nexport { PictureInPictureToggleButton } from './components/pictureinpicturetogglebutton';\nexport { Spacer } from './components/spacer';\nexport { BackgroundColorSelectBox } from './components/subtitlesettings/backgroundcolorselectbox';\nexport { BackgroundOpacitySelectBox } from './components/subtitlesettings/backgroundopacityselectbox';\nexport { CharacterEdgeSelectBox } from './components/subtitlesettings/characteredgeselectbox';\nexport { FontColorSelectBox } from './components/subtitlesettings/fontcolorselectbox';\nexport { FontFamilySelectBox } from './components/subtitlesettings/fontfamilyselectbox';\nexport { FontOpacitySelectBox } from './components/subtitlesettings/fontopacityselectbox';\nexport { FontSizeSelectBox } from './components/subtitlesettings/fontsizeselectbox';\nexport { SubtitleSettingSelectBox } from './components/subtitlesettings/subtitlesettingselectbox';\nexport { SubtitleSettingsLabel } from './components/subtitlesettings/subtitlesettingslabel';\nexport { WindowColorSelectBox } from './components/subtitlesettings/windowcolorselectbox';\nexport { WindowOpacitySelectBox } from './components/subtitlesettings/windowopacityselectbox';\nexport { SubtitleSettingsResetButton } from './components/subtitlesettings/subtitlesettingsresetbutton';\nexport { ListBox } from './components/listbox';\nexport { SubtitleListBox } from './components/subtitlelistbox';\nexport { AudioTrackListBox } from './components/audiotracklistbox';\nexport { SettingsPanelPage } from './components/settingspanelpage';\nexport { SettingsPanelPageBackButton } from './components/settingspanelpagebackbutton';\nexport { SettingsPanelPageOpenButton } from './components/settingspanelpageopenbutton';\nexport { SubtitleSettingsPanelPage } from './components/subtitlesettings/subtitlesettingspanelpage';\nexport { SettingsPanelItem } from './components/settingspanelitem';\n\n// Object.assign polyfill for ES5/IE9\n// https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\nif (typeof Object.assign !== 'function') {\n  Object.assign = function(target: any) {\n    'use strict';\n    if (target == null) {\n      throw new TypeError('Cannot convert undefined or null to object');\n    }\n\n    target = Object(target);\n    for (let index = 1; index < arguments.length; index++) {\n      let source = arguments[index];\n      if (source != null) {\n        for (let key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n    }\n    return target;\n  };\n}","import {Event, EventDispatcher, NoArgs} from './eventdispatcher';\nimport {BrowserUtils} from './browserutils';\nimport { UIInstanceManager } from './uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\n\nexport namespace PlayerUtils {\n\n  export enum PlayerState {\n    Idle,\n    Prepared,\n    Playing,\n    Paused,\n    Finished,\n  }\n\n  export function isTimeShiftAvailable(player: PlayerAPI): boolean {\n    return player.isLive() && player.getMaxTimeShift() !== 0;\n  }\n\n  export function getState(player: PlayerAPI): PlayerState {\n    if (player.hasEnded()) {\n      return PlayerState.Finished;\n    } else if (player.isPlaying()) {\n      return PlayerState.Playing;\n    } else if (player.isPaused()) {\n      return PlayerState.Paused;\n    } else if (player.getSource() != null) {\n      return PlayerState.Prepared;\n    } else {\n      return PlayerState.Idle;\n    }\n  }\n\n  /**\n   * Returns the currentTime - seekableRange.start. This ensures a user-friendly currentTime after a live stream\n   * transitioned to VoD.\n   * @param player\n   */\n  export function getCurrentTimeRelativeToSeekableRange(player: PlayerAPI): number {\n    const currentTime = player.getCurrentTime();\n    if (player.isLive()) {\n      return currentTime;\n    }\n\n    const seekableRangeStart = PlayerUtils.getSeekableRangeStart(player, 0);\n    return currentTime - seekableRangeStart;\n  }\n\n  /**\n   * Returns the start value of the seekable range or the defaultValue if no seekableRange is present.\n   * For now this happens only in combination with Mobile SDKs.\n   *\n   * TODO: remove this function in next major release\n   *\n   * @param player\n   * @param defaultValue\n   */\n  export function getSeekableRangeStart(player: PlayerAPI, defaultValue: number = 0) {\n    return player.getSeekableRange() && player.getSeekableRange().start || defaultValue;\n  }\n\n  export interface TimeShiftAvailabilityChangedArgs extends NoArgs {\n    timeShiftAvailable: boolean;\n  }\n\n  export class TimeShiftAvailabilityDetector {\n\n    private player: PlayerAPI;\n    private timeShiftAvailable: boolean;\n    private timeShiftAvailabilityChangedEvent = new EventDispatcher<PlayerAPI, TimeShiftAvailabilityChangedArgs>();\n\n    constructor(player: PlayerAPI) {\n      this.player = player;\n      this.timeShiftAvailable = undefined;\n\n      let timeShiftDetector = () => {\n        this.detect();\n      };\n      // Try to detect timeshift availability when source is loaded, which works for DASH streams\n      player.on(player.exports.PlayerEvent.SourceLoaded, timeShiftDetector);\n      // With HLS/NativePlayer streams, getMaxTimeShift can be 0 before the buffer fills, so we need to additionally\n      // check timeshift availability in TimeChanged\n      player.on(player.exports.PlayerEvent.TimeChanged, timeShiftDetector);\n    }\n\n    detect(): void {\n      if (this.player.isLive()) {\n        let timeShiftAvailableNow = PlayerUtils.isTimeShiftAvailable(this.player);\n\n        // When the availability changes, we fire the event\n        if (timeShiftAvailableNow !== this.timeShiftAvailable) {\n          this.timeShiftAvailabilityChangedEvent.dispatch(this.player, { timeShiftAvailable: timeShiftAvailableNow });\n          this.timeShiftAvailable = timeShiftAvailableNow;\n        }\n      }\n    }\n\n    get onTimeShiftAvailabilityChanged(): Event<PlayerAPI, TimeShiftAvailabilityChangedArgs> {\n      return this.timeShiftAvailabilityChangedEvent.getEvent();\n    }\n  }\n\n  export interface LiveStreamDetectorEventArgs extends NoArgs {\n    live: boolean;\n  }\n\n  /**\n   * Detects changes of the stream type, i.e. changes of the return value of the player#isLive method.\n   * Normally, a stream cannot change its type during playback, it's either VOD or live. Due to bugs on some\n   * platforms or browsers, it can still change. It is therefore unreliable to just check #isLive and this detector\n   * should be used as a workaround instead.\n   *\n   * Additionally starting with player v8.19.0 we have the use-case that a live stream changes into a vod.\n   * The DurationChanged event indicates this switch.\n   *\n   * Known cases:\n   *\n   * - HLS VOD on Android 4.3\n   * Video duration is initially 'Infinity' and only gets available after playback starts, so streams are wrongly\n   * reported as 'live' before playback (the live-check in the player checks for infinite duration).\n   *\n   * @deprecated since UI v3.9.0 in combination with player v8.19.0 use PlayerEvent.DurationChanged instead\n   *\n   * TODO: remove this class in next major release\n   */\n  export class LiveStreamDetector {\n\n    private player: PlayerAPI;\n    private live: boolean;\n    private liveChangedEvent = new EventDispatcher<PlayerAPI, LiveStreamDetectorEventArgs>();\n    private uimanager: UIInstanceManager;\n\n    constructor(player: PlayerAPI, uimanager: UIInstanceManager) {\n      this.player = player;\n      this.uimanager = uimanager;\n      this.live = undefined;\n\n      let liveDetector = () => {\n        this.detect();\n      };\n      this.uimanager.getConfig().events.onUpdated.subscribe(liveDetector);\n      // Re-evaluate when playback starts\n      player.on(player.exports.PlayerEvent.Play, liveDetector);\n\n      // HLS live detection workaround for Android:\n      // Also re-evaluate during playback, because that is when the live flag might change.\n      // (Doing it only in Android Chrome saves unnecessary overhead on other platforms)\n      if (BrowserUtils.isAndroid && BrowserUtils.isChrome) {\n        player.on(player.exports.PlayerEvent.TimeChanged, liveDetector);\n      }\n\n      // DurationChanged event was introduced with player v8.19.0\n      if (player.exports.PlayerEvent.DurationChanged) {\n        player.on(player.exports.PlayerEvent.DurationChanged, liveDetector);\n      }\n\n      // Ad video's isLive() might be different than the actual video's isLive().\n      player.on(player.exports.PlayerEvent.AdBreakStarted, liveDetector);\n      player.on(player.exports.PlayerEvent.AdBreakFinished, liveDetector);\n    }\n\n    detect(): void {\n      let liveNow = this.player.isLive();\n\n      // Compare current to previous live state flag and fire event when it changes. Since we initialize the flag\n      // with undefined, there is always at least an initial event fired that tells listeners the live state.\n      if (liveNow !== this.live) {\n        this.liveChangedEvent.dispatch(this.player, { live: liveNow });\n        this.live = liveNow;\n      }\n    }\n\n    get onLiveChanged(): Event<PlayerAPI, LiveStreamDetectorEventArgs> {\n      return this.liveChangedEvent.getEvent();\n    }\n  }\n}\n","export namespace StorageUtils {\n  let hasLocalStorageCache: boolean;\n\n  export function hasLocalStorage(): boolean {\n    if (hasLocalStorageCache) {\n      return hasLocalStorageCache;\n    }\n\n    // hasLocalStorage is used to safely ensure we can use localStorage\n    // taken from https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API#Feature-detecting_localStorage\n    let storage: any = { length: 0 };\n    try {\n      storage = window['localStorage'];\n      let x = '__storage_test__';\n      storage.setItem(x, x);\n      storage.removeItem(x);\n      hasLocalStorageCache = true;\n    }\n    catch (e) {\n      hasLocalStorageCache = e instanceof DOMException && (\n          // everything except Firefox\n        e.code === 22 ||\n        // Firefox\n        e.code === 1014 ||\n        // test name field too, because code might not be present\n        // everything except Firefox\n        e.name === 'QuotaExceededError' ||\n        // Firefox\n        e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\n        // acknowledge QuotaExceededError only if there's something already stored\n        storage.length !== 0;\n    }\n    return hasLocalStorageCache;\n  }\n\n  /**\n   * Stores a string item into localStorage.\n   * @param key the item's key\n   * @param data the item's data\n   */\n  export function setItem(key: string, data: string): void {\n    if (StorageUtils.hasLocalStorage()) {\n      window.localStorage.setItem(key, data);\n    }\n  }\n\n  /**\n   * Gets an item's string value from the localStorage.\n   * @param key the key to look up its associated value\n   * @return {string | null} Returns the string if found, null if there is no data stored for the key\n   */\n  export function getItem(key: string): string | null {\n    if (StorageUtils.hasLocalStorage()) {\n      return window.localStorage.getItem(key);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Stores an object into localStorage. The object will be serialized to JSON. The following types are supported\n   * in addition to the default types:\n   *  - ColorUtils.Color\n   *\n   * @param key the key to store the data to\n   * @param data the object to store\n   */\n  export function setObject<T>(key: string, data: T): void {\n    if (StorageUtils.hasLocalStorage()) {\n      let json = JSON.stringify(data);\n      setItem(key, json);\n    }\n  }\n\n  /**\n   * Gets an object for the given key from localStorage. The object will be deserialized from JSON. Beside the\n   * default types, the following types are supported:\n   *  - ColorUtils.Color\n   *\n   * @param key the key to look up its associated object\n   * @return {any} Returns the object if found, null otherwise\n   */\n  export function getObject<T>(key: string): T {\n    if (StorageUtils.hasLocalStorage()) {\n      let json = getItem(key);\n\n      if (key) {\n        let object = JSON.parse(json);\n        return <T>object;\n      }\n    }\n    return null;\n  }\n}\n","import { PlayerAPI } from 'bitmovin-player';\n\nexport namespace StringUtils {\n\n  export let FORMAT_HHMMSS: string = 'hh:mm:ss';\n  export let FORMAT_MMSS: string = 'mm:ss';\n\n  /**\n   * Formats a number of seconds into a time string with the pattern hh:mm:ss.\n   *\n   * @param totalSeconds the total number of seconds to format to string\n   * @param format the time format to output (default: hh:mm:ss)\n   * @returns {string} the formatted time string\n   */\n  export function secondsToTime(totalSeconds: number, format: string = FORMAT_HHMMSS): string {\n    let isNegative = totalSeconds < 0;\n\n    if (isNegative) {\n      // If the time is negative, we make it positive for the calculation below\n      // (else we'd get all negative numbers) and reattach the negative sign later.\n      totalSeconds = -totalSeconds;\n    }\n\n    // Split into separate time parts\n    let hours = Math.floor(totalSeconds / 3600);\n    let minutes = Math.floor(totalSeconds / 60) - hours * 60;\n    let seconds = Math.floor(totalSeconds) % 60;\n\n    return (isNegative ? '-' : '') + format\n        .replace('hh', leftPadWithZeros(hours, 2))\n        .replace('mm', leftPadWithZeros(minutes, 2))\n        .replace('ss', leftPadWithZeros(seconds, 2));\n  }\n\n  /**\n   * Converts a number to a string and left-pads it with zeros to the specified length.\n   * Example: leftPadWithZeros(123, 5) => '00123'\n   *\n   * @param num the number to convert to string and pad with zeros\n   * @param length the desired length of the padded string\n   * @returns {string} the padded number as string\n   */\n  function leftPadWithZeros(num: number | string, length: number): string {\n    let text = num + '';\n    let padding = '0000000000'.substr(0, length - text.length);\n    return padding + text;\n  }\n\n  /**\n   * Fills out placeholders in an ad message.\n   *\n   * Has the placeholders '{remainingTime[formatString]}', '{playedTime[formatString]}' and\n   * '{adDuration[formatString]}', which are replaced by the remaining time until the ad can be skipped, the current\n   * time or the ad duration. The format string is optional. If not specified, the placeholder is replaced by the time\n   * in seconds. If specified, it must be of the following format:\n   * - %d - Inserts the time as an integer.\n   * - %0Nd - Inserts the time as an integer with leading zeroes, if the length of the time string is smaller than N.\n   * - %f - Inserts the time as a float.\n   * - %0Nf - Inserts the time as a float with leading zeroes.\n   * - %.Mf - Inserts the time as a float with M decimal places. Can be combined with %0Nf, e.g. %04.2f (the time\n   * 10.123 would be printed as 0010.12).\n   * - %hh:mm:ss\n   * - %mm:ss\n   *\n   * Examples:\n   * - { text: 'Ad: {remainingTime%mm:ss} secs' }\n   * An input value of 100 would be displayed as: 'Ad: 01:40 secs'\n   * - { text: 'Ad: {remainingTime%f} secs' }\n   * An input value of 100 would be displayed as: 'Ad: 100.0 secs'\n   *\n   * @param adMessage an ad message with optional placeholders to fill\n   * @param skipOffset if specified, {remainingTime} will be filled with the remaining time until the ad can be skipped\n   * @param player the player to get the time data from\n   * @returns {string} the ad message with filled placeholders\n   */\n  export function replaceAdMessagePlaceholders(adMessage: string, skipOffset: number, player: PlayerAPI) {\n    let adMessagePlaceholderRegex = new RegExp(\n      '\\\\{(remainingTime|playedTime|adDuration)(}|%((0[1-9]\\\\d*(\\\\.\\\\d+(d|f)|d|f)|\\\\.\\\\d+f|d|f)|hh:mm:ss|mm:ss)})',\n      'g',\n    );\n\n    return adMessage.replace(adMessagePlaceholderRegex, (formatString) => {\n      let time = 0;\n      if (formatString.indexOf('remainingTime') > -1) {\n        if (skipOffset) {\n          time = Math.ceil(skipOffset - player.getCurrentTime());\n        } else {\n          time = player.getDuration() - player.getCurrentTime();\n        }\n      } else if (formatString.indexOf('playedTime') > -1) {\n        time = player.getCurrentTime();\n      } else if (formatString.indexOf('adDuration') > -1) {\n        time = player.getDuration();\n      }\n      return formatNumber(time, formatString);\n    });\n  }\n\n  function formatNumber(time: number, format: string) {\n    let formatStringValidationRegex = /%((0[1-9]\\d*(\\.\\d+(d|f)|d|f)|\\.\\d+f|d|f)|hh:mm:ss|mm:ss)/;\n    let leadingZeroesRegex = /(%0[1-9]\\d*)(?=(\\.\\d+f|f|d))/;\n    let decimalPlacesRegex = /\\.\\d*(?=f)/;\n\n    if (!formatStringValidationRegex.test(format)) {\n      // If the format is invalid, we set a default fallback format\n      format = '%d';\n    }\n\n    // Determine the number of leading zeros\n    let leadingZeroes = 0;\n    let leadingZeroesMatches = format.match(leadingZeroesRegex);\n    if (leadingZeroesMatches) {\n      leadingZeroes = parseInt(leadingZeroesMatches[0].substring(2));\n    }\n\n    // Determine the number of decimal places\n    let numDecimalPlaces = null;\n    let decimalPlacesMatches = format.match(decimalPlacesRegex);\n    if (decimalPlacesMatches && !isNaN(parseInt(decimalPlacesMatches[0].substring(1)))) {\n      numDecimalPlaces = parseInt(decimalPlacesMatches[0].substring(1));\n      if (numDecimalPlaces > 20) {\n        numDecimalPlaces = 20;\n      }\n    }\n\n    // Float format\n    if (format.indexOf('f') > -1) {\n      let timeString = '';\n\n      if (numDecimalPlaces !== null) {\n        // Apply fixed number of decimal places\n        timeString = time.toFixed(numDecimalPlaces);\n      } else {\n        timeString = '' + time;\n      }\n\n      // Apply leading zeros\n      if (timeString.indexOf('.') > -1) {\n        return leftPadWithZeros(timeString, timeString.length + (leadingZeroes - timeString.indexOf('.')));\n      } else {\n        return leftPadWithZeros(timeString, leadingZeroes);\n      }\n\n    }\n    // Time format\n    else if (format.indexOf(':') > -1) {\n      let totalSeconds = Math.ceil(time);\n\n      // hh:mm:ss format\n      if (format.indexOf('hh') > -1) {\n        return secondsToTime(totalSeconds);\n      }\n      // mm:ss format\n      else {\n        let minutes = Math.floor(totalSeconds / 60);\n        let seconds = totalSeconds % 60;\n\n        return leftPadWithZeros(minutes, 2) + ':' + leftPadWithZeros(seconds, 2);\n      }\n    }\n    // Integer format\n    else {\n      return leftPadWithZeros(Math.ceil(time), leadingZeroes);\n    }\n  }\n}\n","import { ListItem, ListSelector, ListSelectorConfig } from './components/listselector';\nimport { UIInstanceManager } from './uimanager';\nimport { PlayerAPI, SubtitleEvent, SubtitleTrack } from 'bitmovin-player';\nimport { i18n } from './localization/i18n';\n\n/**\n * Helper class to handle all subtitle related events\n *\n * This class listens to player events as well as the `ListSelector` event if selection changed\n */\nexport class SubtitleSwitchHandler {\n\n  private static SUBTITLES_OFF_KEY: string = 'null';\n\n  private player: PlayerAPI;\n  private listElement: ListSelector<ListSelectorConfig>;\n  private uimanager: UIInstanceManager;\n\n  constructor(player: PlayerAPI, element: ListSelector<ListSelectorConfig>, uimanager: UIInstanceManager) {\n    this.player = player;\n    this.listElement = element;\n    this.uimanager = uimanager;\n\n    this.bindSelectionEvent();\n    this.bindPlayerEvents();\n    this.refreshSubtitles();\n    this.selectCurrentSubtitle();\n  }\n\n  private bindSelectionEvent(): void {\n    this.listElement.onItemSelected.subscribe((_, value: string) => {\n      // TODO add support for multiple concurrent subtitle selections\n      if (value === SubtitleSwitchHandler.SUBTITLES_OFF_KEY) {\n        const currentSubtitle = this.player.subtitles.list().filter((subtitle) => subtitle.enabled).pop();\n        if (currentSubtitle) {\n          this.player.subtitles.disable(currentSubtitle.id);\n        }\n      } else {\n        this.player.subtitles.enable(value, true);\n      }\n    });\n  }\n\n  private bindPlayerEvents(): void {\n    this.player.on(this.player.exports.PlayerEvent.SubtitleAdded, this.addSubtitle);\n    this.player.on(this.player.exports.PlayerEvent.SubtitleEnabled, this.selectCurrentSubtitle);\n    this.player.on(this.player.exports.PlayerEvent.SubtitleDisabled, this.selectCurrentSubtitle);\n    this.player.on(this.player.exports.PlayerEvent.SubtitleRemoved, this.removeSubtitle);\n    // Update subtitles when source goes away\n    this.player.on(this.player.exports.PlayerEvent.SourceUnloaded, this.refreshSubtitles);\n    // Update subtitles when the period within a source changes\n    this.player.on(this.player.exports.PlayerEvent.PeriodSwitched, this.refreshSubtitles);\n    this.uimanager.getConfig().events.onUpdated.subscribe(this.refreshSubtitles);\n  }\n\n  private addSubtitle = (event: SubtitleEvent) => {\n    const subtitle = event.subtitle;\n    if (!this.listElement.hasItem(subtitle.id)) {\n      this.listElement.addItem(subtitle.id, subtitle.label);\n    }\n  };\n\n  private removeSubtitle = (event: SubtitleEvent) => {\n    const subtitle = event.subtitle;\n    if (this.listElement.hasItem(subtitle.id)) {\n      this.listElement.removeItem(subtitle.id);\n    }\n  };\n\n  private selectCurrentSubtitle = () => {\n    if (!this.player.subtitles) {\n      // Subtitles API not available (yet)\n      return;\n    }\n\n    let currentSubtitle = this.player.subtitles.list().filter((subtitle) => subtitle.enabled).pop();\n    this.listElement.selectItem(currentSubtitle ? currentSubtitle.id : SubtitleSwitchHandler.SUBTITLES_OFF_KEY);\n  };\n\n  private refreshSubtitles = () => {\n    if (!this.player.subtitles) {\n      // Subtitles API not available (yet)\n      return;\n    }\n\n    const offListItem: ListItem = {\n      key: SubtitleSwitchHandler.SUBTITLES_OFF_KEY,\n      label: i18n.getLocalizer('off'),\n    };\n\n    const subtitles = this.player.subtitles.list();\n    const subtitleToListItem = (subtitle: SubtitleTrack): ListItem => {\n      return { key: subtitle.id, label: subtitle.label };\n    };\n\n    this.listElement.synchronizeItems([\n      offListItem, ...subtitles.map(subtitleToListItem),\n    ]);\n  };\n}\n","// TODO change to internal (not exported) class, how to use in other files?\n/**\n * Executes a callback after a specified amount of time, optionally repeatedly until stopped.\n */\nexport class Timeout {\n\n  private readonly delay: number;\n  private readonly callback: () => void;\n  private readonly repeat: boolean;\n  // There's two setTimeout declarations, one on Window which returns type \"number\" and one in NodeJS which returns\n  // type \"Timer\". For unknown reasons builds on Jenkins fail due to a type mismatch when we use type \"number\" here,\n  // although it works on other platforms (e.g. Windows, Codeship).\n  // To work around the issue we use type \"any\". The type does not matter anyway because we're not working with\n  // this value except providing it to clearTimeout.\n  private timeoutOrIntervalId: any;\n  private active: boolean;\n\n  /**\n   * Creates a new timeout callback handler.\n   * @param delay the delay in milliseconds after which the callback should be executed\n   * @param callback the callback to execute after the delay time\n   * @param repeat if true, call the callback repeatedly in delay intervals\n   */\n  constructor(delay: number, callback: () => void, repeat: boolean = false) {\n    this.delay = delay;\n    this.callback = callback;\n    this.repeat = repeat;\n    this.timeoutOrIntervalId = 0;\n    this.active = false;\n  }\n\n  /**\n   * Starts the timeout and calls the callback when the timeout delay has passed.\n   * @returns {Timeout} the current timeout (so the start call can be chained to the constructor)\n   */\n  start(): this {\n    this.reset();\n    return this;\n  }\n\n  /**\n   * Clears the timeout. The callback will not be called if clear is called during the timeout.\n   */\n  clear(): void {\n    this.clearInternal();\n  }\n\n  /**\n   * Resets the passed timeout delay to zero. Can be used to defer the calling of the callback.\n   */\n  reset(): void {\n    this.clearInternal();\n\n    if (this.repeat) {\n      this.timeoutOrIntervalId = setInterval(this.callback, this.delay);\n    } else {\n      this.timeoutOrIntervalId = setTimeout(() => {\n        this.active = false;\n        this.callback();\n      }, this.delay);\n    }\n    this.active = true;\n  }\n\n  isActive(): boolean {\n    return this.active;\n  }\n\n  private clearInternal(): void {\n    if (this.repeat) {\n      clearInterval(this.timeoutOrIntervalId);\n    } else {\n      clearTimeout(this.timeoutOrIntervalId);\n    }\n    this.active = false;\n  }\n}","import { SubtitleOverlay } from './components/subtitleoverlay';\nimport { SettingsPanelPage } from './components/settingspanelpage';\nimport { SettingsPanelItem } from './components/settingspanelitem';\nimport { VideoQualitySelectBox } from './components/videoqualityselectbox';\nimport { PlaybackSpeedSelectBox } from './components/playbackspeedselectbox';\nimport { AudioTrackSelectBox } from './components/audiotrackselectbox';\nimport { AudioQualitySelectBox } from './components/audioqualityselectbox';\nimport { SettingsPanel } from './components/settingspanel';\nimport { SubtitleSettingsPanelPage } from './components/subtitlesettings/subtitlesettingspanelpage';\nimport { SettingsPanelPageOpenButton } from './components/settingspanelpageopenbutton';\nimport { SubtitleSettingsLabel } from './components/subtitlesettings/subtitlesettingslabel';\nimport { SubtitleSelectBox } from './components/subtitleselectbox';\nimport { ControlBar } from './components/controlbar';\nimport { Container } from './components/container';\nimport { PlaybackTimeLabel, PlaybackTimeLabelMode } from './components/playbacktimelabel';\nimport { SeekBar } from './components/seekbar';\nimport { SeekBarLabel } from './components/seekbarlabel';\nimport { PlaybackToggleButton } from './components/playbacktogglebutton';\nimport { VolumeToggleButton } from './components/volumetogglebutton';\nimport { VolumeSlider } from './components/volumeslider';\nimport { Spacer } from './components/spacer';\nimport { PictureInPictureToggleButton } from './components/pictureinpicturetogglebutton';\nimport { AirPlayToggleButton } from './components/airplaytogglebutton';\nimport { CastToggleButton } from './components/casttogglebutton';\nimport { VRToggleButton } from './components/vrtogglebutton';\nimport { SettingsToggleButton } from './components/settingstogglebutton';\nimport { FullscreenToggleButton } from './components/fullscreentogglebutton';\nimport { UIContainer } from './components/uicontainer';\nimport { BufferingOverlay } from './components/bufferingoverlay';\nimport { PlaybackToggleOverlay } from './components/playbacktoggleoverlay';\nimport { CastStatusOverlay } from './components/caststatusoverlay';\nimport { TitleBar } from './components/titlebar';\nimport { RecommendationOverlay } from './components/recommendationoverlay';\nimport { Watermark } from './components/watermark';\nimport { ErrorMessageOverlay } from './components/errormessageoverlay';\nimport { AdClickOverlay } from './components/adclickoverlay';\nimport { AdMessageLabel } from './components/admessagelabel';\nimport { AdSkipButton } from './components/adskipbutton';\nimport { CloseButton } from './components/closebutton';\nimport { MetadataLabel, MetadataLabelContent } from './components/metadatalabel';\nimport { PlayerUtils } from './playerutils';\nimport { Label } from './components/label';\nimport { CastUIContainer } from './components/castuicontainer';\nimport { UIConditionContext, UIManager } from './uimanager';\nimport { UIConfig } from './uiconfig';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from './localization/i18n';\n\nexport namespace UIFactory {\n\n  export function buildDefaultUI(player: PlayerAPI, config: UIConfig = {}): UIManager {\n    return UIFactory.buildModernUI(player, config);\n  }\n\n  export function buildDefaultSmallScreenUI(player: PlayerAPI, config: UIConfig = {}): UIManager {\n    return UIFactory.buildModernSmallScreenUI(player, config);\n  }\n\n  export function buildDefaultCastReceiverUI(player: PlayerAPI, config: UIConfig = {}): UIManager {\n    return UIFactory.buildModernCastReceiverUI(player, config);\n  }\n\n  function modernUI() {\n    let subtitleOverlay = new SubtitleOverlay();\n\n    let mainSettingsPanelPage = new SettingsPanelPage({\n      components: [\n        new SettingsPanelItem(i18n.getLocalizer('settings.video.quality'), new VideoQualitySelectBox()),\n        new SettingsPanelItem(i18n.getLocalizer('speed'), new PlaybackSpeedSelectBox()),\n        new SettingsPanelItem(i18n.getLocalizer('settings.audio.track'), new AudioTrackSelectBox()),\n        new SettingsPanelItem(i18n.getLocalizer('settings.audio.quality'), new AudioQualitySelectBox()),\n      ],\n    });\n\n    let settingsPanel = new SettingsPanel({\n      components: [\n        mainSettingsPanelPage,\n      ],\n      hidden: true,\n    });\n\n    let subtitleSettingsPanelPage = new SubtitleSettingsPanelPage({\n      settingsPanel: settingsPanel,\n      overlay: subtitleOverlay,\n    });\n\n    let subtitleSettingsOpenButton = new SettingsPanelPageOpenButton({\n      targetPage: subtitleSettingsPanelPage,\n      container: settingsPanel,\n      text: i18n.getLocalizer('open'),\n    });\n\n    mainSettingsPanelPage.addComponent(\n      new SettingsPanelItem(\n        new SubtitleSettingsLabel({text: i18n.getLocalizer('settings.subtitles'), opener: subtitleSettingsOpenButton}),\n        new SubtitleSelectBox(),\n      ));\n\n    settingsPanel.addComponent(subtitleSettingsPanelPage);\n\n    let controlBar = new ControlBar({\n      components: [\n        settingsPanel,\n        new Container({\n          components: [\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.CurrentTime, hideInLivePlayback: true }),\n            new SeekBar({ label: new SeekBarLabel() }),\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.TotalTime, cssClasses: ['text-right'] }),\n          ],\n          cssClasses: ['controlbar-top'],\n        }),\n        new Container({\n          components: [\n            new PlaybackToggleButton(),\n            new VolumeToggleButton(),\n            new VolumeSlider(),\n            new Spacer(),\n            new PictureInPictureToggleButton(),\n            new AirPlayToggleButton(),\n            new CastToggleButton(),\n            new VRToggleButton(),\n            new SettingsToggleButton({ settingsPanel: settingsPanel }),\n            new FullscreenToggleButton(),\n          ],\n          cssClasses: ['controlbar-bottom'],\n        }),\n      ],\n    });\n\n    return new UIContainer({\n      components: [\n        subtitleOverlay,\n        new BufferingOverlay(),\n        new PlaybackToggleOverlay(),\n        new CastStatusOverlay(),\n        controlBar,\n        new TitleBar(),\n        new RecommendationOverlay(),\n        new Watermark(),\n        new ErrorMessageOverlay(),\n      ],\n      hideDelay: 2000,\n      hidePlayerStateExceptions: [\n        PlayerUtils.PlayerState.Prepared,\n        PlayerUtils.PlayerState.Paused,\n        PlayerUtils.PlayerState.Finished,\n      ],\n    });\n  }\n\n  export function modernAdsUI() {\n    return new UIContainer({\n      components: [\n        new BufferingOverlay(),\n        new AdClickOverlay(),\n        new PlaybackToggleOverlay(),\n        new Container({\n          components: [\n            new AdMessageLabel({ text: i18n.getLocalizer('ads.remainingTime')}),\n            new AdSkipButton(),\n          ],\n          cssClass: 'ui-ads-status',\n        }),\n        new ControlBar({\n          components: [\n            new Container({\n              components: [\n                new PlaybackToggleButton(),\n                new VolumeToggleButton(),\n                new VolumeSlider(),\n                new Spacer(),\n                new FullscreenToggleButton(),\n              ],\n              cssClasses: ['controlbar-bottom'],\n            }),\n          ],\n        }),\n      ],\n      cssClasses: ['ui-skin-ads'],\n      hideDelay: 2000,\n      hidePlayerStateExceptions: [\n        PlayerUtils.PlayerState.Prepared,\n        PlayerUtils.PlayerState.Paused,\n        PlayerUtils.PlayerState.Finished,\n      ],\n    });\n  }\n\n  export function modernSmallScreenUI() {\n    let subtitleOverlay = new SubtitleOverlay();\n\n    let mainSettingsPanelPage = new SettingsPanelPage({\n      components: [\n        new SettingsPanelItem(i18n.getLocalizer('settings.video.quality'), new VideoQualitySelectBox()),\n        new SettingsPanelItem(i18n.getLocalizer('speed'), new PlaybackSpeedSelectBox()),\n        new SettingsPanelItem(i18n.getLocalizer('settings.audio.track'), new AudioTrackSelectBox()),\n        new SettingsPanelItem(i18n.getLocalizer('settings.audio.quality'), new AudioQualitySelectBox()),\n      ],\n    });\n\n    let settingsPanel = new SettingsPanel({\n      components: [\n        mainSettingsPanelPage,\n      ],\n      hidden: true,\n      pageTransitionAnimation: false,\n      hideDelay: -1,\n    });\n\n    let subtitleSettingsPanelPage = new SubtitleSettingsPanelPage({\n      settingsPanel: settingsPanel,\n      overlay: subtitleOverlay,\n    });\n\n    let subtitleSettingsOpenButton = new SettingsPanelPageOpenButton({\n      targetPage: subtitleSettingsPanelPage,\n      container: settingsPanel,\n      text: i18n.getLocalizer('open'),\n    });\n\n    mainSettingsPanelPage.addComponent(\n      new SettingsPanelItem(\n        new SubtitleSettingsLabel({text: i18n.getLocalizer('settings.subtitles'), opener: subtitleSettingsOpenButton}),\n        new SubtitleSelectBox(),\n      ));\n\n    settingsPanel.addComponent(subtitleSettingsPanelPage);\n\n    settingsPanel.addComponent(new CloseButton({ target: settingsPanel }));\n    subtitleSettingsPanelPage.addComponent(new CloseButton({ target: settingsPanel }));\n\n    let controlBar = new ControlBar({\n      components: [\n        new Container({\n          components: [\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.CurrentTime, hideInLivePlayback: true }),\n            new SeekBar({ label: new SeekBarLabel() }),\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.TotalTime, cssClasses: ['text-right'] }),\n          ],\n          cssClasses: ['controlbar-top'],\n        }),\n      ],\n    });\n\n    return new UIContainer({\n      components: [\n        subtitleOverlay,\n        new BufferingOverlay(),\n        new CastStatusOverlay(),\n        new PlaybackToggleOverlay(),\n        new RecommendationOverlay(),\n        controlBar,\n        new TitleBar({\n          components: [\n            new MetadataLabel({ content: MetadataLabelContent.Title }),\n            new CastToggleButton(),\n            new VRToggleButton(),\n            new PictureInPictureToggleButton(),\n            new AirPlayToggleButton(),\n            new VolumeToggleButton(),\n            new SettingsToggleButton({ settingsPanel: settingsPanel }),\n            new FullscreenToggleButton(),\n          ],\n        }),\n        settingsPanel,\n        new Watermark(),\n        new ErrorMessageOverlay(),\n      ],\n      cssClasses: ['ui-skin-smallscreen'],\n      hideDelay: 2000,\n      hidePlayerStateExceptions: [\n        PlayerUtils.PlayerState.Prepared,\n        PlayerUtils.PlayerState.Paused,\n        PlayerUtils.PlayerState.Finished,\n      ],\n    });\n  }\n\n  export function modernSmallScreenAdsUI() {\n    return new UIContainer({\n      components: [\n        new BufferingOverlay(),\n        new AdClickOverlay(),\n        new PlaybackToggleOverlay(),\n        new TitleBar({\n          components: [\n            // dummy label with no content to move buttons to the right\n            new Label({ cssClass: 'label-metadata-title' }),\n            new FullscreenToggleButton(),\n          ],\n        }),\n        new Container({\n          components: [\n            new AdMessageLabel({ text: 'Ad: {remainingTime} secs' }),\n            new AdSkipButton(),\n          ],\n          cssClass: 'ui-ads-status',\n        }),\n      ],\n      cssClasses: ['ui-skin-ads', 'ui-skin-smallscreen'],\n      hideDelay: 2000,\n      hidePlayerStateExceptions: [\n        PlayerUtils.PlayerState.Prepared,\n        PlayerUtils.PlayerState.Paused,\n        PlayerUtils.PlayerState.Finished,\n      ],\n    });\n  }\n\n  export function modernCastReceiverUI() {\n    let controlBar = new ControlBar({\n      components: [\n        new Container({\n          components: [\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.CurrentTime, hideInLivePlayback: true }),\n            new SeekBar({ smoothPlaybackPositionUpdateIntervalMs: -1 }),\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.TotalTime, cssClasses: ['text-right'] }),\n          ],\n          cssClasses: ['controlbar-top'],\n        }),\n      ],\n    });\n\n    return new CastUIContainer({\n      components: [\n        new SubtitleOverlay(),\n        new BufferingOverlay(),\n        new PlaybackToggleOverlay(),\n        new Watermark(),\n        controlBar,\n        new TitleBar({ keepHiddenWithoutMetadata: true }),\n        new ErrorMessageOverlay(),\n      ],\n      cssClasses: ['ui-skin-cast-receiver'],\n      hideDelay: 2000,\n      hidePlayerStateExceptions: [\n        PlayerUtils.PlayerState.Prepared,\n        PlayerUtils.PlayerState.Paused,\n        PlayerUtils.PlayerState.Finished,\n      ],\n    });\n  }\n\n  export function buildModernUI(player: PlayerAPI, config: UIConfig = {}): UIManager {\n    // show smallScreen UI only on mobile/handheld devices\n    let smallScreenSwitchWidth = 600;\n\n    return new UIManager(player, [{\n      ui: modernSmallScreenAdsUI(),\n      condition: (context: UIConditionContext) => {\n        return context.isMobile && context.documentWidth < smallScreenSwitchWidth && context.isAd\n          && context.adRequiresUi;\n      },\n    }, {\n      ui: modernAdsUI(),\n      condition: (context: UIConditionContext) => {\n        return context.isAd && context.adRequiresUi;\n      },\n    }, {\n      ui: modernSmallScreenUI(),\n      condition: (context: UIConditionContext) => {\n        return !context.isAd && !context.adRequiresUi && context.isMobile\n          && context.documentWidth < smallScreenSwitchWidth;\n      },\n    }, {\n      ui: modernUI(),\n      condition: (context: UIConditionContext) => {\n        return !context.isAd && !context.adRequiresUi;\n      },\n    }], config);\n  }\n\n  export function buildModernSmallScreenUI(player: PlayerAPI, config: UIConfig = {}): UIManager {\n    return new UIManager(player, [{\n      ui: modernSmallScreenAdsUI(),\n      condition: (context: UIConditionContext) => {\n        return context.isAd && context.adRequiresUi;\n      },\n    }, {\n      ui: modernSmallScreenUI(),\n      condition: (context: UIConditionContext) => {\n        return !context.isAd && !context.adRequiresUi;\n      },\n    }], config);\n  }\n\n  export function buildModernCastReceiverUI(player: PlayerAPI, config: UIConfig = {}): UIManager {\n    return new UIManager(player, modernCastReceiverUI(), config);\n  }\n}\n","import {UIContainer} from './components/uicontainer';\nimport {DOM} from './dom';\nimport {Component, ComponentConfig} from './components/component';\nimport {Container} from './components/container';\nimport { SeekBar, SeekBarMarker } from './components/seekbar';\nimport {NoArgs, EventDispatcher, CancelEventArgs} from './eventdispatcher';\nimport {UIUtils} from './uiutils';\nimport {ArrayUtils} from './arrayutils';\nimport {BrowserUtils} from './browserutils';\nimport { TimelineMarker, UIConfig } from './uiconfig';\nimport { PlayerAPI, PlayerEventCallback, PlayerEventBase, PlayerEvent, AdEvent, LinearAd } from 'bitmovin-player';\nimport { VolumeController } from './volumecontroller';\nimport { i18n, CustomVocabulary, Vocabularies } from './localization/i18n';\n\nexport interface LocalizationConfig {\n  /**\n   * Sets the desired language, and falls back to 'en' if there is no vocabulary for the desired language. Setting it\n   * to \"auto\" will enable language detection from the browser's locale.\n   */\n  language?: 'auto' | 'en' | 'de' | string;\n  /**\n   * A map of `language` to {@link CustomVocabulary} definitions. Can be used to overwrite default translations and add\n   * custom strings or additional languages.\n   */\n  vocabularies?: Vocabularies;\n}\n\nexport interface InternalUIConfig extends UIConfig {\n  events: {\n    /**\n     * Fires when the configuration has been updated/changed.\n     */\n    onUpdated: EventDispatcher<UIManager, void>;\n  };\n  volumeController: VolumeController;\n}\n\n/**\n * The context that will be passed to a {@link UIConditionResolver} to determine if it's conditions fulfil the context.\n */\nexport interface UIConditionContext {\n  /**\n   * Tells if the player is loading or playing an ad.\n   */\n  isAd: boolean;\n  /**\n   * Tells if the current ad requires an external UI, if {@link #isAd} is true.\n   */\n  adRequiresUi: boolean;\n  /**\n   * Tells if the player is currently in fullscreen mode.\n   */\n  isFullscreen: boolean;\n  /**\n   * Tells if the UI is running in a mobile browser.\n   */\n  isMobile: boolean;\n  /**\n   * Tells if the player is in playing or paused state.\n   */\n  isPlaying: boolean;\n  /**\n   * The width of the player/UI element.\n   */\n  width: number;\n  /**\n   * The width of the document where the player/UI is embedded in.\n   */\n  documentWidth: number;\n}\n\n/**\n * Resolves the conditions of its associated UI in a {@link UIVariant} upon a {@link UIConditionContext} and decides\n * if the UI should be displayed. If it returns true, the UI is a candidate for display; if it returns false, it will\n * not be displayed in the given context.\n */\nexport interface UIConditionResolver {\n  (context: UIConditionContext): boolean;\n}\n\n/**\n * Associates a UI instance with an optional {@link UIConditionResolver} that determines if the UI should be displayed.\n */\nexport interface UIVariant {\n  ui: UIContainer;\n  condition?: UIConditionResolver;\n}\n\nexport class UIManager {\n\n  private player: PlayerAPI;\n  private uiContainerElement: DOM;\n  private uiVariants: UIVariant[];\n  private uiInstanceManagers: InternalUIInstanceManager[];\n  private currentUi: InternalUIInstanceManager;\n  private config: InternalUIConfig; // Conjunction of provided uiConfig and sourceConfig from the player\n  private managerPlayerWrapper: PlayerWrapper;\n\n  private events = {\n    onUiVariantResolve: new EventDispatcher<UIManager, UIConditionContext>(),\n  };\n\n  /**\n   * Creates a UI manager with a single UI variant that will be permanently shown.\n   * @param player the associated player of this UI\n   * @param ui the UI to add to the player\n   * @param uiconfig optional UI configuration\n   */\n  constructor(player: PlayerAPI, ui: UIContainer, uiconfig?: UIConfig);\n  /**\n   * Creates a UI manager with a list of UI variants that will be dynamically selected and switched according to\n   * the context of the UI.\n   *\n   * Every time the UI context changes, the conditions of the UI variants will be sequentially resolved and the first\n   * UI, whose condition evaluates to true, will be selected and displayed. The last variant in the list might omit the\n   * condition resolver and will be selected as default/fallback UI when all other conditions fail. If there is no\n   * fallback UI and all conditions fail, no UI will be displayed.\n   *\n   * @param player the associated player of this UI\n   * @param uiVariants a list of UI variants that will be dynamically switched\n   * @param uiconfig optional UI configuration\n   */\n  constructor(player: PlayerAPI, uiVariants: UIVariant[], uiconfig?: UIConfig);\n  constructor(player: PlayerAPI, playerUiOrUiVariants: UIContainer | UIVariant[], uiconfig: UIConfig = {}) {\n    if (playerUiOrUiVariants instanceof UIContainer) {\n      // Single-UI constructor has been called, transform arguments to UIVariant[] signature\n      let playerUi = <UIContainer>playerUiOrUiVariants;\n      let uiVariants = [];\n\n      // Add the default player UI\n      uiVariants.push({ ui: playerUi });\n\n      this.uiVariants = uiVariants;\n    }\n    else {\n      // Default constructor (UIVariant[]) has been called\n      this.uiVariants = <UIVariant[]>playerUiOrUiVariants;\n    }\n\n    this.player = player;\n    this.managerPlayerWrapper = new PlayerWrapper(player);\n\n    // ensure that at least the metadata object does exist in the uiconfig\n    uiconfig.metadata = uiconfig.metadata ? uiconfig.metadata : {};\n\n    this.config = {\n      playbackSpeedSelectionEnabled: true, // Switch on speed selector by default\n      autoUiVariantResolve: true, // Switch on auto UI resolving by default\n      ...uiconfig,\n      events: {\n        onUpdated: new EventDispatcher<UIManager, void>(),\n      },\n      volumeController: new VolumeController(this.managerPlayerWrapper.getPlayer()),\n    };\n\n    /**\n     * Gathers configuration data from the UI config and player source config and creates a merged UI config\n     * that is used throughout the UI instance.\n     */\n    const updateConfig = () => {\n      const playerSourceConfig = player.getSource() || {};\n      this.config.metadata = JSON.parse(JSON.stringify(uiconfig.metadata || {}));\n\n      // Extract the UI-related config properties from the source config\n      const playerSourceUiConfig: UIConfig = {\n        metadata: {\n          // TODO move metadata into source.metadata namespace in player v8\n          title: playerSourceConfig.title,\n          description: playerSourceConfig.description,\n          markers: (playerSourceConfig as any).markers,\n        },\n        recommendations: (playerSourceConfig as any).recommendations,\n      };\n\n      // Player source config takes precedence over the UI config, because the config in the source is attached\n      // to a source which changes with every player.load, whereas the UI config stays the same for the whole\n      // lifetime of the player instance.\n      this.config.metadata.title = playerSourceUiConfig.metadata.title || uiconfig.metadata.title;\n      this.config.metadata.description = playerSourceUiConfig.metadata.description || uiconfig.metadata.description;\n      this.config.metadata.markers = playerSourceUiConfig.metadata.markers || uiconfig.metadata.markers || [];\n      this.config.recommendations = playerSourceUiConfig.recommendations || uiconfig.recommendations || [];\n    };\n\n    updateConfig();\n\n    // Update the configuration when a new source is loaded\n    this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.SourceLoaded, () => {\n      updateConfig();\n      this.config.events.onUpdated.dispatch(this);\n    });\n\n    if (uiconfig.container) {\n      // Unfortunately \"uiContainerElement = new DOM(config.container)\" will not accept the container with\n      // string|HTMLElement type directly, although it accepts both types, so we need to spit these two cases up here.\n      // TODO check in upcoming TS versions if the container can be passed in directly, or fix the constructor\n      this.uiContainerElement = uiconfig.container instanceof HTMLElement ?\n        new DOM(uiconfig.container) : new DOM(uiconfig.container);\n    } else {\n      this.uiContainerElement = new DOM(player.getContainer());\n    }\n\n    // Create UI instance managers for the UI variants\n    // The instance managers map to the corresponding UI variants by their array index\n    this.uiInstanceManagers = [];\n    let uiVariantsWithoutCondition = [];\n    for (let uiVariant of this.uiVariants) {\n      if (uiVariant.condition == null) {\n        // Collect variants without conditions for error checking\n        uiVariantsWithoutCondition.push(uiVariant);\n      }\n      // Create the instance manager for a UI variant\n      this.uiInstanceManagers.push(new InternalUIInstanceManager(player, uiVariant.ui, this.config));\n    }\n    // Make sure that there is only one UI variant without a condition\n    // It does not make sense to have multiple variants without condition, because only the first one in the list\n    // (the one with the lowest index) will ever be selected.\n    if (uiVariantsWithoutCondition.length > 1) {\n      throw Error('Too many UIs without a condition: You cannot have more than one default UI');\n    }\n    // Make sure that the default UI variant, if defined, is at the end of the list (last index)\n    // If it comes earlier, the variants with conditions that come afterwards will never be selected because the\n    // default variant without a condition always evaluates to 'true'\n    if (uiVariantsWithoutCondition.length > 0\n      && uiVariantsWithoutCondition[0] !== this.uiVariants[this.uiVariants.length - 1]) {\n      throw Error('Invalid UI variant order: the default UI (without condition) must be at the end of the list');\n    }\n\n    let adStartedEvent: AdEvent = null; // keep the event stored here during ad playback\n\n    // Dynamically select a UI variant that matches the current UI condition.\n    let resolveUiVariant = (event: PlayerEventBase) => {\n      // Make sure that the AdStarted event data is persisted through ad playback in case other events happen\n      // in the meantime, e.g. player resize. We need to store this data because there is no other way to find out\n      // ad details while an ad is playing (in v8.0 at least; from v8.1 there will be ads.getActiveAd()).\n      // Existing event data signals that an ad is currently active (instead of ads.isLinearAdActive()).\n      if (event != null) {\n        switch (event.type) {\n          // The ads UI is shown upon the first AdStarted event. Subsequent AdStarted events within an ad break\n          // will not change the condition context and thus not lead to undesired UI variant resolving.\n          // The ads UI is shown upon AdStarted instead of AdBreakStarted because there can be a loading delay\n          // between these two events in the player, and the AdBreakStarted event does not carry any metadata to\n          // initialize the ads UI, so it would be rendered in an uninitialized state for a certain amount of time.\n          // TODO show ads UI upon AdBreakStarted and display loading overlay between AdBreakStarted and first AdStarted\n          // TODO display loading overlay between AdFinished and next AdStarted\n          case player.exports.PlayerEvent.AdStarted:\n            adStartedEvent = event as AdEvent;\n            break;\n          // The ads UI is hidden only when the ad break is finished, i.e. not on AdFinished events. This way we keep\n          // the ads UI variant active throughout an ad break, as reacting to AdFinished would lead to undesired UI\n          // variant switching between two ads in an ad break, e.g. ads UI -> AdFinished -> content UI ->\n          // AdStarted -> ads UI.\n          case player.exports.PlayerEvent.AdBreakFinished:\n            adStartedEvent = null;\n            // When switching to a variant for the first time, a config.events.onUpdated event is fired to trigger a UI\n            // update of the new variant, because most components subscribe to this event to update themselves. When\n            // switching to the ads UI on the first AdStarted, all UI variants update themselves with the ad data, so\n            // when switching back to the \"normal\" UI it will carry properties of the ad instead of the main content.\n            // We thus fire this event here to force an UI update with the properties of the main content. This is\n            // basically a hack because the config.events.onUpdated event is abused in many places and not just used\n            // for config updates (e.g. adding a marker to the seekbar).\n            // TODO introduce an event that is fired when the playback content is updated, a switch to/from ads\n            this.config.events.onUpdated.dispatch(this);\n            break;\n          // When a new source is loaded during ad playback, there will be no Ad(Break)Finished event\n          case player.exports.PlayerEvent.SourceLoaded:\n          case player.exports.PlayerEvent.SourceUnloaded:\n            adStartedEvent = null;\n            break;\n        }\n      }\n\n      // Detect if an ad has started\n      let isAd = adStartedEvent != null;\n      let adRequiresUi = false;\n      if (isAd) {\n        let ad = adStartedEvent.ad;\n        // for now only linear ads can request a UI\n        if (ad.isLinear) {\n          let linearAd = ad as LinearAd;\n          adRequiresUi = linearAd.uiConfig && linearAd.uiConfig.requestsUi || false;\n        }\n      }\n\n      this.resolveUiVariant({\n        isAd: isAd,\n        adRequiresUi: adRequiresUi,\n      }, (context) => {\n        // If this is an ad UI, we need to relay the saved ON_AD_STARTED event data so ad components can configure\n        // themselves for the current ad.\n        if (context.isAd) {\n          /* Relay the ON_AD_STARTED event to the ads UI\n           *\n           * Because the ads UI is initialized in the ON_AD_STARTED handler, i.e. when the ON_AD_STARTED event has\n           * already been fired, components in the ads UI that listen for the ON_AD_STARTED event never receive it.\n           * Since this can break functionality of components that rely on this event, we relay the event to the\n           * ads UI components with the following call.\n           */\n          this.currentUi.getWrappedPlayer().fireEventInUI(this.player.exports.PlayerEvent.AdStarted, adStartedEvent);\n        }\n      });\n    };\n\n    // Listen to the following events to trigger UI variant resolution\n    if (this.config.autoUiVariantResolve) {\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.SourceLoaded, resolveUiVariant);\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.SourceUnloaded, resolveUiVariant);\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.Play, resolveUiVariant);\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.Paused, resolveUiVariant);\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.AdStarted, resolveUiVariant);\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.AdBreakFinished, resolveUiVariant);\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.PlayerResized, resolveUiVariant);\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.ViewModeChanged, resolveUiVariant);\n    }\n\n    // Initialize the UI\n    resolveUiVariant(null);\n  }\n\n  /**\n   * Exposes i18n.getLocalizer() function\n   * @returns {I18nApi.getLocalizer()}\n   */\n  static localize<V extends CustomVocabulary<Record<string, string>>>(key: keyof V) {\n    return i18n.getLocalizer(key);\n  }\n\n  /**\n   * Provide configuration to support Custom UI languages\n   * default language: 'en'\n   */\n  static setLocalizationConfig(localizationConfig: LocalizationConfig) {\n    i18n.setConfig(localizationConfig);\n  }\n\n  getConfig(): UIConfig {\n    return this.config;\n  }\n\n  /**\n   * Returns the list of UI variants as passed into the constructor of {@link UIManager}.\n   * @returns {UIVariant[]} the list of available UI variants\n   */\n  getUiVariants(): UIVariant[] {\n    return this.uiVariants;\n  }\n\n  /**\n   * Switches to a UI variant from the list returned by {@link getUiVariants}.\n   * @param {UIVariant} uiVariant the UI variant to switch to\n   * @param {() => void} onShow a callback that is executed just before the new UI variant is shown\n   */\n  switchToUiVariant(uiVariant: UIVariant, onShow?: () => void): void {\n    let uiVariantIndex = this.uiVariants.indexOf(uiVariant);\n\n    const nextUi: InternalUIInstanceManager = this.uiInstanceManagers[uiVariantIndex];\n    let uiVariantChanged = false;\n\n    // Determine if the UI variant is changing\n    if (nextUi !== this.currentUi) {\n      uiVariantChanged = true;\n      // console.log('switched from ', this.currentUi ? this.currentUi.getUI() : 'none',\n      //   ' to ', nextUi ? nextUi.getUI() : 'none');\n    }\n\n    // Only if the UI variant is changing, we need to do some stuff. Else we just leave everything as-is.\n    if (uiVariantChanged) {\n      // Hide the currently active UI variant\n      if (this.currentUi) {\n        this.currentUi.getUI().hide();\n      }\n\n      // Assign the new UI variant as current UI\n      this.currentUi = nextUi;\n\n      // When we switch to a different UI instance, there's some additional stuff to manage. If we do not switch\n      // to an instance, we're done here.\n      if (this.currentUi != null) {\n        // Add the UI to the DOM (and configure it) the first time it is selected\n        if (!this.currentUi.isConfigured()) {\n          this.addUi(this.currentUi);\n        }\n\n        if (onShow) {\n          onShow();\n        }\n\n        this.currentUi.getUI().show();\n      }\n    }\n  }\n\n  /**\n   * Triggers a UI variant switch as triggered by events when automatic switching is enabled. It allows to overwrite\n   * properties of the {@link UIConditionContext}.\n   * @param {Partial<UIConditionContext>} context an optional set of properties that overwrite properties of the\n   *   automatically determined context\n   * @param {(context: UIConditionContext) => void} onShow a callback that is executed just before the new UI variant\n   *   is shown (if a switch is happening)\n   */\n  resolveUiVariant(context: Partial<UIConditionContext> = {}, onShow?: (context: UIConditionContext) => void): void {\n    // Determine the current context for which the UI variant will be resolved\n    const defaultContext: UIConditionContext = {\n      isAd: false,\n      adRequiresUi: false,\n      isFullscreen: this.player.getViewMode() === this.player.exports.ViewMode.Fullscreen,\n      isMobile: BrowserUtils.isMobile,\n      isPlaying: this.player.isPlaying(),\n      width: this.uiContainerElement.width(),\n      documentWidth: document.body.clientWidth,\n    };\n\n    // Overwrite properties of the default context with passed in context properties\n    const switchingContext = { ...defaultContext, ...context };\n\n    // Fire the event and allow modification of the context before it is used to resolve the UI variant\n    this.events.onUiVariantResolve.dispatch(this, switchingContext);\n\n    let nextUiVariant: UIVariant = null;\n\n    // Select new UI variant\n    // If no variant condition is fulfilled, we switch to *no* UI\n    for (let uiVariant of this.uiVariants) {\n      if (uiVariant.condition == null || uiVariant.condition(switchingContext) === true) {\n        nextUiVariant = uiVariant;\n        break;\n      }\n    }\n\n    this.switchToUiVariant(nextUiVariant, () => {\n      if (onShow) {\n        onShow(switchingContext);\n      }\n    });\n  }\n\n  private addUi(ui: InternalUIInstanceManager): void {\n    let dom = ui.getUI().getDomElement();\n    let player = ui.getWrappedPlayer();\n\n    ui.configureControls();\n    /* Append the UI DOM after configuration to avoid CSS transitions at initialization\n     * Example: Components are hidden during configuration and these hides may trigger CSS transitions that are\n     * undesirable at this time. */\n    this.uiContainerElement.append(dom);\n\n    // When the UI is loaded after a source was loaded, we need to tell the components to initialize themselves\n    if (player.getSource()) {\n      this.config.events.onUpdated.dispatch(this);\n    }\n\n    // Fire onConfigured after UI DOM elements are successfully added. When fired immediately, the DOM elements\n    // might not be fully configured and e.g. do not have a size.\n    // https://swizec.com/blog/how-to-properly-wait-for-dom-elements-to-show-up-in-modern-browsers/swizec/6663\n    if (window.requestAnimationFrame) {\n      requestAnimationFrame(() => { ui.onConfigured.dispatch(ui.getUI()); });\n    } else {\n      // IE9 fallback\n      setTimeout(() => { ui.onConfigured.dispatch(ui.getUI()); }, 0);\n    }\n  }\n\n  private releaseUi(ui: InternalUIInstanceManager): void {\n    ui.releaseControls();\n    ui.getUI().getDomElement().remove();\n    ui.clearEventHandlers();\n  }\n\n  release(): void {\n    for (let uiInstanceManager of this.uiInstanceManagers) {\n      this.releaseUi(uiInstanceManager);\n    }\n    this.managerPlayerWrapper.clearEventHandlers();\n  }\n\n  /**\n   * Fires just before UI variants are about to be resolved and the UI variant is possibly switched. It is fired when\n   * the switch is triggered from an automatic switch and when calling {@link resolveUiVariant}.\n   * Can be used to modify the {@link UIConditionContext} before resolving is done.\n   * @returns {EventDispatcher<UIManager, UIConditionContext>}\n   */\n  get onUiVariantResolve(): EventDispatcher<UIManager, UIConditionContext> {\n    return this.events.onUiVariantResolve;\n  }\n\n  /**\n   * Returns the list of all added markers in undefined order.\n   */\n  getTimelineMarkers(): TimelineMarker[] {\n    return this.config.metadata.markers;\n  }\n\n  /**\n   * Adds a marker to the timeline. Does not check for duplicates/overlaps at the `time`.\n   */\n  addTimelineMarker(timelineMarker: TimelineMarker): void {\n    this.config.metadata.markers.push(timelineMarker);\n    this.config.events.onUpdated.dispatch(this);\n  }\n\n  /**\n   * Removes a marker from the timeline (by reference) and returns `true` if the marker has\n   * been part of the timeline and successfully removed, or `false` if the marker could not\n   * be found and thus not removed.\n   */\n  removeTimelineMarker(timelineMarker: TimelineMarker): boolean {\n    if (ArrayUtils.remove(this.config.metadata.markers, timelineMarker) === timelineMarker) {\n      this.config.events.onUpdated.dispatch(this);\n      return true;\n    }\n\n    return false;\n  }\n}\n\nexport interface SeekPreviewArgs extends NoArgs {\n  /**\n   * The timeline position in percent where the event originates from.\n   */\n  position: number;\n  /**\n   * The timeline marker associated with the current position, if existing.\n   */\n  marker?: SeekBarMarker;\n}\n\n/**\n * Encapsulates functionality to manage a UI instance. Used by the {@link UIManager} to manage multiple UI instances.\n */\nexport class UIInstanceManager {\n  private playerWrapper: PlayerWrapper;\n  private ui: UIContainer;\n  private config: InternalUIConfig;\n\n  private events = {\n    onConfigured: new EventDispatcher<UIContainer, NoArgs>(),\n    onSeek: new EventDispatcher<SeekBar, NoArgs>(),\n    onSeekPreview: new EventDispatcher<SeekBar, SeekPreviewArgs>(),\n    onSeeked: new EventDispatcher<SeekBar, NoArgs>(),\n    onComponentShow: new EventDispatcher<Component<ComponentConfig>, NoArgs>(),\n    onComponentHide: new EventDispatcher<Component<ComponentConfig>, NoArgs>(),\n    onControlsShow: new EventDispatcher<UIContainer, NoArgs>(),\n    onPreviewControlsHide: new EventDispatcher<UIContainer, CancelEventArgs>(),\n    onControlsHide: new EventDispatcher<UIContainer, NoArgs>(),\n    onRelease: new EventDispatcher<UIContainer, NoArgs>(),\n  };\n\n  constructor(player: PlayerAPI, ui: UIContainer, config: InternalUIConfig) {\n    this.playerWrapper = new PlayerWrapper(player);\n    this.ui = ui;\n    this.config = config;\n  }\n\n  getConfig(): InternalUIConfig {\n    return this.config;\n  }\n\n  getUI(): UIContainer {\n    return this.ui;\n  }\n\n  getPlayer(): PlayerAPI {\n    return this.playerWrapper.getPlayer();\n  }\n\n  /**\n   * Fires when the UI is fully configured and added to the DOM.\n   * @returns {EventDispatcher}\n   */\n  get onConfigured(): EventDispatcher<UIContainer, NoArgs> {\n    return this.events.onConfigured;\n  }\n\n  /**\n   * Fires when a seek starts.\n   * @returns {EventDispatcher}\n   */\n  get onSeek(): EventDispatcher<SeekBar, NoArgs> {\n    return this.events.onSeek;\n  }\n\n  /**\n   * Fires when the seek timeline is scrubbed.\n   * @returns {EventDispatcher}\n   */\n  get onSeekPreview(): EventDispatcher<SeekBar, SeekPreviewArgs> {\n    return this.events.onSeekPreview;\n  }\n\n  /**\n   * Fires when a seek is finished.\n   * @returns {EventDispatcher}\n   */\n  get onSeeked(): EventDispatcher<SeekBar, NoArgs> {\n    return this.events.onSeeked;\n  }\n\n  /**\n   * Fires when a component is showing.\n   * @returns {EventDispatcher}\n   */\n  get onComponentShow(): EventDispatcher<Component<ComponentConfig>, NoArgs> {\n    return this.events.onComponentShow;\n  }\n\n  /**\n   * Fires when a component is hiding.\n   * @returns {EventDispatcher}\n   */\n  get onComponentHide(): EventDispatcher<Component<ComponentConfig>, NoArgs> {\n    return this.events.onComponentHide;\n  }\n\n  /**\n   * Fires when the UI controls are showing.\n   * @returns {EventDispatcher}\n   */\n  get onControlsShow(): EventDispatcher<UIContainer, NoArgs> {\n    return this.events.onControlsShow;\n  }\n\n  /**\n   * Fires before the UI controls are hiding to check if they are allowed to hide.\n   * @returns {EventDispatcher}\n   */\n  get onPreviewControlsHide(): EventDispatcher<UIContainer, CancelEventArgs> {\n    return this.events.onPreviewControlsHide;\n  }\n\n  /**\n   * Fires when the UI controls are hiding.\n   * @returns {EventDispatcher}\n   */\n  get onControlsHide(): EventDispatcher<UIContainer, NoArgs> {\n    return this.events.onControlsHide;\n  }\n\n  /**\n   * Fires when the UI controls are released.\n   * @returns {EventDispatcher}\n   */\n  get onRelease(): EventDispatcher<UIContainer, NoArgs> {\n    return this.events.onRelease;\n  }\n\n  protected clearEventHandlers(): void {\n    this.playerWrapper.clearEventHandlers();\n\n    let events = <any>this.events; // avoid TS7017\n    for (let event in events) {\n      let dispatcher = <EventDispatcher<Object, Object>>events[event];\n      dispatcher.unsubscribeAll();\n    }\n  }\n}\n\n/**\n * Extends the {@link UIInstanceManager} for internal use in the {@link UIManager} and provides access to functionality\n * that components receiving a reference to the {@link UIInstanceManager} should not have access to.\n */\nclass InternalUIInstanceManager extends UIInstanceManager {\n\n  private configured: boolean;\n  private released: boolean;\n\n  getWrappedPlayer(): WrappedPlayer {\n    // TODO find a non-hacky way to provide the WrappedPlayer to the UIManager without exporting it\n    // getPlayer() actually returns the WrappedPlayer but its return type is set to Player so the WrappedPlayer does\n    // not need to be exported\n    return <WrappedPlayer>this.getPlayer();\n  }\n\n  configureControls(): void {\n    this.configureControlsTree(this.getUI());\n    this.configured = true;\n  }\n\n  isConfigured(): boolean {\n    return this.configured;\n  }\n\n  private configureControlsTree(component: Component<ComponentConfig>) {\n    let configuredComponents: Component<ComponentConfig>[] = [];\n\n    UIUtils.traverseTree(component, (component) => {\n      // First, check if we have already configured a component, and throw an error if we did. Multiple configuration\n      // of the same component leads to unexpected UI behavior. Also, a component that is in the UI tree multiple\n      // times hints at a wrong UI structure.\n      // We could just skip configuration in such a case and not throw an exception, but enforcing a clean UI tree\n      // seems like the better choice.\n      for (let configuredComponent of configuredComponents) {\n        if (configuredComponent === component) {\n          // Write the component to the console to simplify identification of the culprit\n          // (e.g. by inspecting the config)\n          if (console) {\n            console.error('Circular reference in UI tree', component);\n          }\n\n          // Additionally throw an error, because this case must not happen and leads to unexpected UI behavior.\n          throw Error('Circular reference in UI tree: ' + component.constructor.name);\n        }\n      }\n\n      component.initialize();\n      component.configure(this.getPlayer(), this);\n      configuredComponents.push(component);\n    });\n  }\n\n  releaseControls(): void {\n    // Do not call release methods if the components have never been configured; this can result in exceptions\n    if (this.configured) {\n      this.onRelease.dispatch(this.getUI());\n      this.releaseControlsTree(this.getUI());\n      this.configured = false;\n    }\n    this.released = true;\n  }\n\n  isReleased(): boolean {\n    return this.released;\n  }\n\n  private releaseControlsTree(component: Component<ComponentConfig>) {\n    component.release();\n\n    if (component instanceof Container) {\n      for (let childComponent of component.getComponents()) {\n        this.releaseControlsTree(childComponent);\n      }\n    }\n  }\n\n  clearEventHandlers(): void {\n    super.clearEventHandlers();\n  }\n}\n\n/**\n * Extended interface of the {@link Player} for use in the UI.\n */\ninterface WrappedPlayer extends PlayerAPI {\n  /**\n   * Fires an event on the player that targets all handlers in the UI but never enters the real player.\n   * @param event the event to fire\n   * @param data data to send with the event\n   */\n  fireEventInUI(event: PlayerEvent, data: {}): void;\n}\n\n/**\n * Wraps the player to track event handlers and provide a simple method to remove all registered event\n * handlers from the player.\n */\nexport class PlayerWrapper {\n\n  private player: PlayerAPI;\n  private wrapper: WrappedPlayer;\n\n  private eventHandlers: { [eventType: string]: PlayerEventCallback[]; } = {};\n\n  constructor(player: PlayerAPI) {\n    this.player = player;\n\n    // Collect all members of the player (public API methods and properties of the player)\n    // (Object.getOwnPropertyNames(player) does not work with the player TypeScript class starting in 7.2)\n    let members: string[] = [];\n    for (let member in player) {\n      members.push(member);\n    }\n\n    // Split the members into methods and properties\n    let methods = <any[]>[];\n    let properties = <any[]>[];\n\n    for (let member of members) {\n      if (typeof (<any>player)[member] === 'function') {\n        methods.push(member);\n      } else {\n        properties.push(member);\n      }\n    }\n\n    // Create wrapper object\n    let wrapper = <any>{};\n\n    // Add function wrappers for all API methods that do nothing but calling the base method on the player\n    for (let method of methods) {\n      wrapper[method] = function() {\n        // console.log('called ' + member); // track method calls on the player\n        return (<any>player)[method].apply(player, arguments);\n      };\n    }\n\n    // Add all public properties of the player to the wrapper\n    for (let property of properties) {\n      // Get an eventually existing property descriptor to differentiate between plain properties and properties with\n      // getters/setters.\n      const propertyDescriptor = ((target: PlayerAPI) => {\n        while (target) {\n          const propertyDescriptor = Object.getOwnPropertyDescriptor(target, property);\n          if (propertyDescriptor) {\n            return propertyDescriptor;\n          }\n          // Check if the PropertyDescriptor exists on a child prototype in case we have an inheritance of the player\n          target = Object.getPrototypeOf(target);\n        }\n      })(player);\n\n      // If the property has getters/setters, wrap them accordingly...\n      if (propertyDescriptor && (propertyDescriptor.get || propertyDescriptor.set)) {\n        Object.defineProperty(wrapper, property, {\n          get: () => propertyDescriptor.get.call(player),\n          set: (value: any) => propertyDescriptor.set.call(player, value),\n        });\n      }\n      // ... else just transfer the property to the wrapper\n      else {\n        wrapper[property] = (<any>player)[property];\n      }\n    }\n\n    // Explicitly add a wrapper method for 'on' that adds added event handlers to the event list\n    wrapper.on = (eventType: PlayerEvent, callback: PlayerEventCallback) => {\n      player.on(eventType, callback);\n\n      if (!this.eventHandlers[eventType]) {\n        this.eventHandlers[eventType] = [];\n      }\n\n      this.eventHandlers[eventType].push(callback);\n\n      return wrapper;\n    };\n\n    // Explicitly add a wrapper method for 'off' that removes removed event handlers from the event list\n    wrapper.off = (eventType: PlayerEvent, callback: PlayerEventCallback) => {\n      player.off(eventType, callback);\n\n      if (this.eventHandlers[eventType]) {\n        ArrayUtils.remove(this.eventHandlers[eventType], callback);\n      }\n\n      return wrapper;\n    };\n\n    wrapper.fireEventInUI = (event: PlayerEvent, data: {}) => {\n      if (this.eventHandlers[event]) { // check if there are handlers for this event registered\n        // Extend the data object with default values to convert it to a {@link PlayerEventBase} object.\n        let playerEventData = <PlayerEventBase>Object.assign({}, {\n          timestamp: Date.now(),\n          type: event,\n          // Add a marker property so the UI can detect UI-internal player events\n          uiSourced: true,\n        }, data);\n\n        // Execute the registered callbacks\n        for (let callback of this.eventHandlers[event]) {\n          callback(playerEventData);\n        }\n      }\n    };\n\n    this.wrapper = <WrappedPlayer>wrapper;\n  }\n\n  /**\n   * Returns a wrapped player object that can be used on place of the normal player object.\n   * @returns {WrappedPlayer} a wrapped player\n   */\n  getPlayer(): WrappedPlayer {\n    return this.wrapper;\n  }\n\n  /**\n   * Clears all registered event handlers from the player that were added through the wrapped player.\n   */\n  clearEventHandlers(): void {\n    try {\n      // Call the player API to check if the instance is still valid or already destroyed.\n      // This can be any call throwing the PlayerAPINotAvailableError when the player instance is destroyed.\n      this.player.getSource();\n    } catch (error) {\n      if (error instanceof this.player.exports.PlayerAPINotAvailableError) {\n        // We have detected that the player instance is already destroyed, so we clear the event handlers to avoid\n        // event handler unsubscription attempts (which would result in PlayerAPINotAvailableError errors).\n        this.eventHandlers = {};\n      }\n    }\n\n    for (let eventType in this.eventHandlers) {\n      for (let callback of this.eventHandlers[eventType]) {\n        this.player.off(eventType as PlayerEvent, callback);\n      }\n    }\n  }\n}\n\n","import {Component, ComponentConfig} from './components/component';\nimport {Container} from './components/container';\n\nexport namespace UIUtils {\n  export interface TreeTraversalCallback {\n    (component: Component<ComponentConfig>, parent?: Component<ComponentConfig>): void;\n  }\n\n  export function traverseTree(component: Component<ComponentConfig>, visit: TreeTraversalCallback): void {\n    let recursiveTreeWalker = (component: Component<ComponentConfig>, parent?: Component<ComponentConfig>) => {\n      visit(component, parent);\n\n      // If the current component is a container, visit it's children\n      if (component instanceof Container) {\n        for (let childComponent of component.getComponents()) {\n          recursiveTreeWalker(childComponent, component);\n        }\n      }\n    };\n\n    // Walk and configure the component tree\n    recursiveTreeWalker(component);\n  }\n}\n","import { Event, EventDispatcher } from './eventdispatcher';\nimport { PlayerAPI } from 'bitmovin-player';\n\nexport interface VolumeSettingChangedArgs {\n  volume: number;\n  muted: boolean;\n}\n\n/**\n * Can be used to centrally manage and control the volume and mute state of the player from multiple components.\n */\nexport class VolumeController {\n\n  private static readonly issuerName = 'ui-volumecontroller';\n\n  private readonly events = {\n    onChanged: new EventDispatcher<VolumeController, VolumeSettingChangedArgs>(),\n  };\n\n  private storedVolume: number;\n\n  constructor(private readonly player: PlayerAPI) {\n    this.storeVolume();\n\n    const handler = () => {\n      this.onChangedEvent();\n    };\n\n    player.on(player.exports.PlayerEvent.SourceLoaded, handler);\n    player.on(player.exports.PlayerEvent.VolumeChanged, handler);\n    player.on(player.exports.PlayerEvent.Muted, handler);\n    player.on(player.exports.PlayerEvent.Unmuted, handler);\n  }\n\n  setVolume(volume: number): void {\n    this.player.setVolume(volume, VolumeController.issuerName);\n  }\n\n  getVolume(): number {\n    return this.player.getVolume();\n  }\n\n  setMuted(muted: boolean): void {\n    if (muted) {\n      this.player.mute(VolumeController.issuerName);\n    } else {\n      this.player.unmute(VolumeController.issuerName);\n    }\n  }\n\n  toggleMuted(): void {\n    if (this.isMuted() || this.getVolume() === 0) {\n      // Unmuting from the mute or zero-volume state recalls the previously saved volume setting. Setting the\n      // volume automatically unmutes the player in v7.\n      this.recallVolume();\n    } else {\n      this.setMuted(true);\n    }\n  }\n\n  isMuted(): boolean {\n    return this.player.isMuted();\n  }\n\n  /**\n   * Stores (saves) the current volume so it can later be restored with {@link recallVolume}.\n   */\n  storeVolume(): void {\n    this.storedVolume = this.getVolume();\n  }\n\n  /**\n   * Recalls (sets) the volume previously stored with {@link storeVolume}.\n   */\n  recallVolume(): void {\n    this.setMuted(this.storedVolume === 0);\n    this.setVolume(this.storedVolume);\n  }\n\n  startTransition(): VolumeTransition {\n    return new VolumeTransition(this);\n  }\n\n  onChangedEvent() {\n    const playerMuted = this.isMuted();\n    const playerVolume = this.getVolume();\n\n    const uiMuted = playerMuted || playerVolume === 0;\n    const uiVolume = playerMuted ? 0 : playerVolume;\n\n    this.events.onChanged.dispatch(this, { volume: uiVolume, muted: uiMuted });\n  }\n\n  /**\n   * Gets the event that is fired when the volume settings have changed.\n   */\n  get onChanged(): Event<VolumeController, VolumeSettingChangedArgs> {\n    return this.events.onChanged.getEvent();\n  }\n}\n\nexport class VolumeTransition {\n\n  constructor(private controller: VolumeController) {\n    // Store the volume at the beginning of a volume change so we can recall it later in case we set the volume to\n    // zero and actually mute the player.\n    controller.storeVolume();\n  }\n\n  update(volume: number): void {\n    // Update the volume while transitioning so the user has a \"live preview\" of the desired target volume\n    this.controller.setMuted(false);\n    this.controller.setVolume(volume);\n  }\n\n  finish(volume: number): void {\n    if (volume === 0) {\n      // When the volume is zero we essentially mute the volume so we recall the volume from the beginning of the\n      // transition and mute the player instead. Recalling is necessary to return to the actual audio volume\n      // when unmuting.\n      // We must first recall the volume and then mute, because recalling sets the volume on the player\n      // and setting a player volume > 0 unmutes the player in v7.\n      this.controller.recallVolume();\n      this.controller.setMuted(true);\n    } else {\n      this.controller.setMuted(false);\n      this.controller.setVolume(volume);\n      this.controller.storeVolume();\n    }\n  }\n}"]}